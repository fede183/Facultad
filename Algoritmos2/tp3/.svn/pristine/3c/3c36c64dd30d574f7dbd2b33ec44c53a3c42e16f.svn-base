#include "Heap.h"
#include "mini_test.h"
#include "Red.h"
#include "aed2.h"
#include "avld.h"
#include "dcnet.cpp"

void heap_test() {
  Heap<paquete> l;
  ASSERT_EQ(l.cantidad(), 0);
  Conj<interfaz> i1;
  i1.Agregar(1);
  i1.Agregar(2);
  compu c1("compu1", i1);
  Conj<interfaz> i2;
  i2.Agregar(3);
  i2.Agregar(4);
  compu c2("compu2", i2);

  


  paquete p1(c1, c2), p2(c1, c2), p3(c1, c2), p4(c1, c2), p5(c1, c2), p6(c1, c2), p7(c1, c2);
  p1.id = 1;
  p2.id = 2;
  p3.id = 3;
  p4.id = 4;
  p5.id = 5;
  p6.id = 6;
  p7.id = 7;
  p1.prioridad = 45;
  p2.prioridad = 4;
  p3.prioridad = 48;
  p4.prioridad = 85;
  p5.prioridad = 5;
  p6.prioridad = 28;
  p7.prioridad = 15;

  l.encolar(p1);
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 1);
  ASSERT_EQ(l.proximo().id, 1);
  l.encolar(p2);
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 2);
  ASSERT_EQ(l.proximo().id, 2);
  l.encolar(p3);
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 3);
  ASSERT_EQ(l.proximo().id, 2);
  l.encolar(p4);
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 4);
  ASSERT_EQ(l.proximo().id, 2);
  l.encolar(p5);
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 5);
  ASSERT_EQ(l.proximo().id, 2);
  l.encolar(p6);
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 6);
  ASSERT_EQ(l.proximo().id, 2);
  l.encolar(p7);
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 7);
  ASSERT_EQ(l.proximo().id, 2);
  l.desencolar();
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 6);
  ASSERT_EQ(l.proximo().id, 5);
  l.desencolar();
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 5);
  ASSERT_EQ(l.proximo().id, 7);
  l.desencolar();
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 4);
  ASSERT_EQ(l.proximo().id, 6);
  l.desencolar();
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 3);
  ASSERT_EQ(l.proximo().id, 1);
  l.desencolar();
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 2);
  ASSERT_EQ(l.proximo().id, 3);
  l.desencolar();
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 1);
  ASSERT_EQ(l.proximo().id, 4);
}


void red_test(){
  Red r;
  Conj<interfaz> i1;
  i1.Agregar(1);
  i1.Agregar(2);
  compu c1("compu1", i1);
  
  Conj<interfaz> i2;
  i2.Agregar(3);
  i2.Agregar(4);
  compu c2("compu2", i2);

  Conj<interfaz> i3;
  i3.Agregar(5);
  i3.Agregar(6);
  i3.Agregar(7);

  compu c3("compu3", i3);


  r.AgregarComputadora(c1);
  r.AgregarComputadora(c2);
  r.AgregarComputadora(c3);
  
  r.Conectar(c1, c2, 1, 3);
  r.Conectar(c2, c3, 4, 6);
  r.Conectar(c1, c3, 2, 5);

  ASSERT(r.Conectadas(c1, c2));
  ASSERT(r.Conectadas(c2, c3));
  ASSERT(r.Conectadas(c1, c3));

  ASSERT_EQ(r.interfazUsada(c1, c2), 1);
  ASSERT_EQ(r.interfazUsada(c2, c3), 4);
  ASSERT_EQ(r.interfazUsada(c1, c3), 2);
  ASSERT_EQ(r.interfazUsada(c2, c1), 3);
  ASSERT_EQ(r.interfazUsada(c3, c2), 6);
  ASSERT_EQ(r.interfazUsada(c3, c1), 5);

  ASSERT(r.UsaInterfaz(c1, 1));
  ASSERT(r.UsaInterfaz(c1, 2));
  ASSERT(r.UsaInterfaz(c2, 3));
  ASSERT(r.UsaInterfaz(c2, 4));
  ASSERT(r.UsaInterfaz(c3, 5));
  ASSERT(r.UsaInterfaz(c3, 6));
  ASSERT(!r.UsaInterfaz(c3, 7));

  ASSERT(r.Vecinos(c1).Pertenece(c2) && r.Vecinos(c1).Pertenece(c3) && r.Vecinos(c1).Cardinal() == 2);
  ASSERT(r.Vecinos(c2).Pertenece(c1) && r.Vecinos(c2).Pertenece(c3) && r.Vecinos(c2).Cardinal() == 2);
  ASSERT(r.Vecinos(c3).Pertenece(c1) && r.Vecinos(c3).Pertenece(c2) && r.Vecinos(c3).Cardinal() == 2);
}

void avl_test(){
  DiccNat<Nat> avl1, avl2, avl3, avl4;
  //Avl para probar el caso RR
  avl1.DefinirNat(1, 80);
  ASSERT(avl1.Balanceado());
  avl1.DefinirNat(2, 70);
  ASSERT(avl1.Balanceado());
  avl1.DefinirNat(3, 60);
  ASSERT(avl1.Balanceado());
  avl1.DefinirNat(4, 50);
  ASSERT(avl1.Balanceado());
  avl1.DefinirNat(5, 40);
  ASSERT(avl1.Balanceado());
  avl1.DefinirNat(6, 30);
  ASSERT(avl1.Balanceado());
  avl1.DefinirNat(7, 20);
  ASSERT(avl1.Balanceado());
  avl1.DefinirNat(8, 10);
  ASSERT(avl1.Balanceado());
  avl1.DefinirNat(9, 5);
  ASSERT(avl1.Balanceado());

  ASSERT(avl1.DefinidoNat(1));
  ASSERT(avl1.DefinidoNat(2));
  ASSERT(avl1.DefinidoNat(3));
  ASSERT(avl1.DefinidoNat(4));
  ASSERT(avl1.DefinidoNat(5));
  ASSERT(avl1.DefinidoNat(6));
  ASSERT(avl1.DefinidoNat(7));
  ASSERT(avl1.DefinidoNat(8));
  ASSERT(avl1.DefinidoNat(9));

  ASSERT_EQ(avl1.SignificadoNat(1), 80);
  ASSERT_EQ(avl1.SignificadoNat(2), 70);
  ASSERT_EQ(avl1.SignificadoNat(3), 60);
  ASSERT_EQ(avl1.SignificadoNat(4), 50);
  ASSERT_EQ(avl1.SignificadoNat(5), 40);
  ASSERT_EQ(avl1.SignificadoNat(6), 30);
  ASSERT_EQ(avl1.SignificadoNat(7), 20);
  ASSERT_EQ(avl1.SignificadoNat(8), 10);
  ASSERT_EQ(avl1.SignificadoNat(9), 5);

  //Avl para probar el caso LL
  avl2.DefinirNat(3, 60);
  ASSERT(avl2.Balanceado());
  avl2.DefinirNat(4, 50);
  ASSERT(avl2.Balanceado());
  avl2.DefinirNat(5, 40);
  ASSERT(avl2.Balanceado());
  avl2.DefinirNat(6, 30);
  ASSERT(avl2.Balanceado());
  avl2.DefinirNat(7, 20);
  ASSERT(avl2.Balanceado());
  avl2.DefinirNat(8, 10);
  ASSERT(avl2.Balanceado());
  avl2.DefinirNat(9, 5);
  ASSERT(avl2.Balanceado());
  avl2.DefinirNat(2, 70);
  ASSERT(avl2.Balanceado());
  avl2.DefinirNat(1, 80);
  ASSERT(avl2.Balanceado());

  ASSERT(avl2.DefinidoNat(1));
  ASSERT(avl2.DefinidoNat(2));
  ASSERT(avl2.DefinidoNat(3));
  ASSERT(avl2.DefinidoNat(4));
  ASSERT(avl2.DefinidoNat(5));
  ASSERT(avl2.DefinidoNat(6));
  ASSERT(avl2.DefinidoNat(7));
  ASSERT(avl2.DefinidoNat(8));
  ASSERT(avl2.DefinidoNat(9));

  ASSERT_EQ(avl2.SignificadoNat(1), 80);
  ASSERT_EQ(avl2.SignificadoNat(2), 70);
  ASSERT_EQ(avl2.SignificadoNat(3), 60);
  ASSERT_EQ(avl2.SignificadoNat(4), 50);
  ASSERT_EQ(avl2.SignificadoNat(5), 40);
  ASSERT_EQ(avl2.SignificadoNat(6), 30);
  ASSERT_EQ(avl2.SignificadoNat(7), 20);
  ASSERT_EQ(avl2.SignificadoNat(8), 10);
  ASSERT_EQ(avl2.SignificadoNat(9), 5);

  //Avl para probar el caso LR
  avl3.DefinirNat(4, 50);
  ASSERT(avl3.Balanceado());
  avl3.DefinirNat(3, 60);
  ASSERT(avl3.Balanceado());
  avl3.DefinirNat(8, 10);
  ASSERT(avl3.Balanceado());
  avl3.DefinirNat(9, 5);
  ASSERT(avl3.Balanceado());
  avl3.DefinirNat(5, 40);
  ASSERT(avl3.Balanceado());
  avl3.DefinirNat(6, 30);
  ASSERT(avl3.Balanceado());
  avl3.DefinirNat(7, 20);
  ASSERT(avl3.Balanceado());
  avl3.DefinirNat(2, 70);
  ASSERT(avl3.Balanceado());
  avl3.DefinirNat(1, 80);
  ASSERT(avl3.Balanceado());

  ASSERT(avl3.DefinidoNat(1));
  ASSERT(avl3.DefinidoNat(2));
  ASSERT(avl3.DefinidoNat(3));
  ASSERT(avl3.DefinidoNat(4));
  ASSERT(avl3.DefinidoNat(5));
  ASSERT(avl3.DefinidoNat(6));
  ASSERT(avl3.DefinidoNat(7));
  ASSERT(avl3.DefinidoNat(8));
  ASSERT(avl3.DefinidoNat(9));

  ASSERT_EQ(avl3.SignificadoNat(1), 80);
  ASSERT_EQ(avl3.SignificadoNat(2), 70);
  ASSERT_EQ(avl3.SignificadoNat(3), 60);
  ASSERT_EQ(avl3.SignificadoNat(4), 50);
  ASSERT_EQ(avl3.SignificadoNat(5), 40);
  ASSERT_EQ(avl3.SignificadoNat(6), 30);
  ASSERT_EQ(avl3.SignificadoNat(7), 20);
  ASSERT_EQ(avl3.SignificadoNat(8), 10);
  ASSERT_EQ(avl3.SignificadoNat(9), 5);

  //Avl para probar el caso RL
  avl4.DefinirNat(6, 30);
  ASSERT(avl4.Balanceado());
  avl4.DefinirNat(5, 40);
  ASSERT(avl4.Balanceado());
  avl4.DefinirNat(4, 50);
  ASSERT(avl4.Balanceado());
  avl4.DefinirNat(3, 60);
  ASSERT(avl4.Balanceado());
  avl4.DefinirNat(8, 10);
  ASSERT(avl4.Balanceado());
  avl4.DefinirNat(9, 5);
  ASSERT(avl4.Balanceado());
  avl4.DefinirNat(7, 20);
  ASSERT(avl4.Balanceado());
  avl4.DefinirNat(2, 70);
  ASSERT(avl4.Balanceado());
  avl4.DefinirNat(1, 80);
  ASSERT(avl4.Balanceado());

  ASSERT(avl4.DefinidoNat(1));
  ASSERT(avl4.DefinidoNat(2));
  ASSERT(avl4.DefinidoNat(3));
  ASSERT(avl4.DefinidoNat(4));
  ASSERT(avl4.DefinidoNat(5));
  ASSERT(avl4.DefinidoNat(6));
  ASSERT(avl4.DefinidoNat(7));
  ASSERT(avl4.DefinidoNat(8));
  ASSERT(avl4.DefinidoNat(9));

  ASSERT_EQ(avl4.SignificadoNat(1), 80);
  ASSERT_EQ(avl4.SignificadoNat(2), 70);
  ASSERT_EQ(avl4.SignificadoNat(3), 60);
  ASSERT_EQ(avl4.SignificadoNat(4), 50);
  ASSERT_EQ(avl4.SignificadoNat(5), 40);
  ASSERT_EQ(avl4.SignificadoNat(6), 30);
  ASSERT_EQ(avl4.SignificadoNat(7), 20);
  ASSERT_EQ(avl4.SignificadoNat(8), 10);
  ASSERT_EQ(avl4.SignificadoNat(9), 5);
}

void dcnet_test(){
  Red r;
  Conj<interfaz> i1;
  i1.Agregar(1);
  i1.Agregar(2);
  compu c1("compu1", i1);
  //c1.hostname = "compu1";
  
  //c1.interfaces = i1;
  //c2.hostname = "compu2";
  Conj<interfaz> i2;
  i2.Agregar(3);
  i2.Agregar(4);
  //c2.interfaces = i2;
  compu c2("compu2", i2);
  
  //c3.hostname = "compu3";
  Conj<interfaz> i3;
  i3.Agregar(5);
  i3.Agregar(6);
  i3.Agregar(7);
  //c3.interfaces = i3;
  compu c3("compu3", i3);
  

  r.AgregarComputadora(c1);
  r.AgregarComputadora(c2);
  r.AgregarComputadora(c3);
  r.Conectar(c1, c2, 1, 3);
  r.Conectar(c2, c3, 4, 6);
  r.Conectar(c1, c3, 2, 5);

  DCNet d1(r);
  paquete p1(c1,c2), p2(c2,c3), p3(c3,c1);
  p1.id = 1;
  p2.id = 2;
  p3.id = 3;

  p1.prioridad = 1;
  p2.prioridad = 2;
  p3.prioridad = 3;

  // p1.origen = c1;
  // p2.origen = c2;
  // p3.origen = c3;

  // p1.destino = c2;
  // p2.destino = c3;
  // p3.destino = c1;



  d1.CrearPaquete(p1);
  ASSERT(d1.PaqueteEnTransito(p1));
  d1.CrearPaquete(p2);
  d1.CrearPaquete(p3);
  d1.AvanzarSegundo();
  ASSERT(!d1.PaqueteEnTransito(p1));
  //ASSERT(!d1.PaqueteEnTransito(p2));
  //ASSERT(!d1.PaqueteEnTransito(p3));
  ASSERT(d1.CantidadEnviados(c1) == 1);
  //ASSERT(d1.CantidadEnviados(c2) == 1);
  //ASSERT(d1.CantidadEnviados(c3) == 1);


 
}

void dcnet2_test(){
  Conj<interfaz> conjIc1;
  Conj<interfaz> conjIc2;
  Conj<interfaz> conjIc3;
  
  conjIc1.Agregar(1);
  conjIc1.Agregar(2);
  conjIc1.Agregar(3);
  
  conjIc2.Agregar(1);
  conjIc2.Agregar(2);
  conjIc2.Agregar(3);
  
  conjIc3.Agregar(1);
  conjIc3.Agregar(2);
  
  string s1 = "dcubaar";
  string s2 = "ubaar";
  string s3 = "dmubaar";

  Red r1;

  compu c4(s1, conjIc1), c5(s2, conjIc2), c6(s3, conjIc3);

  r1.AgregarComputadora(c4);
  r1.AgregarComputadora(c5);
  r1.AgregarComputadora(c6);
  
  // ejemplo - Indexado en 0 
  Nat k = 0;
  typename Conj<interfaz>::const_Iterador interfazIter = c4.interfaces.CrearIt();
  Nat l = k;
  while(l > 0){
      interfazIter.Avanzar();
      l--;
  }
  interfaz i4 = interfazIter.Siguiente();

  k = 2;
  typename Conj<interfaz>::const_Iterador interfazIter2 = c5.interfaces.CrearIt();
  l = k;
  while(l > 0){
      interfazIter2.Avanzar();
      l--;
  }
  interfaz i5 = interfazIter2.Siguiente();

  
  r1.Conectar(c4, c5, i4, i5);

  paquete p(c4, c5);
  p.id = 1;
  p.prioridad = 3;
  DCNet dc(r1);

  dc.CrearPaquete(p);
  //cout << dcnet.driver_dcnet->EnEspera(*(dcnet.CompusPorHostname.obtener(c1))).proximo().id;
  //cout << dcnet.IesimoEnEsperaEn(c1, 0);
  dc.AvanzarSegundo();
}

int main() {
  //RUN_TEST(heap_test);
  //RUN_TEST(avl_test);
  //RUN_TEST(red_test);
  //RUN_TEST(dcnet_test);
  RUN_TEST(dcnet2_test);
  return 0;
}
