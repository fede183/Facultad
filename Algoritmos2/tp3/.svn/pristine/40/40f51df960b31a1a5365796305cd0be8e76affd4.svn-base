#include "Heap.h"
#include "mini_test.h"
//#include "Red.h"
#include "aed2.h"

void heap_test() {
  Heap<paquete> l;
  ASSERT_EQ(l.cantidad(), 0);

  paquete p1, p2, p3, p4, p5, p6, p7;
  p1.id = 1;
  p2.id = 2;
  p3.id = 3;
  p4.id = 4;
  p5.id = 5;
  p6.id = 6;
  p7.id = 7;
  p1.prioridad = 45;
  p2.prioridad = 4;
  p3.prioridad = 48;
  p4.prioridad = 85;
  p5.prioridad = 5;
  p6.prioridad = 28;
  p7.prioridad = 15;

  l.encolar(p1);
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 1);
  ASSERT_EQ(l.proximo().id, 1);
  l.encolar(p2);
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 2);
  ASSERT_EQ(l.proximo().id, 2);
  l.encolar(p3);
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 3);
  ASSERT_EQ(l.proximo().id, 2);
  l.encolar(p4);
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 4);
  ASSERT_EQ(l.proximo().id, 2);
  l.encolar(p5);
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 5);
  ASSERT_EQ(l.proximo().id, 2);
  l.encolar(p6);
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 6);
  ASSERT_EQ(l.proximo().id, 2);
  l.encolar(p7);
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 7);
  ASSERT_EQ(l.proximo().id, 2);
  l.desencolar();
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 6);
  ASSERT_EQ(l.proximo().id, 5);
  l.desencolar();
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 5);
  ASSERT_EQ(l.proximo().id, 7);
  l.desencolar();
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 4);
  ASSERT_EQ(l.proximo().id, 6);
  l.desencolar();
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 3);
  ASSERT_EQ(l.proximo().id, 1);
  l.desencolar();
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 2);
  ASSERT_EQ(l.proximo().id, 3);
  l.desencolar();
  l.mostrar(std::cout);
  std::cout << '\n';
  ASSERT_EQ(l.cantidad(), 1);
  ASSERT_EQ(l.proximo().id, 4);
}


/*void red_test(){
  Red r;
  compu c1;
  c1.hostname = "compu1";
  Conj<interfaz> i1;
  i1.Agregar(1);
  i1.Agregar(2);
  c1.interfaces = i1;

  compu c2;
  c2.hostname = "compu2";
  Conj<interfaz> i2;
  i2.Agregar(1);
  i2.Agregar(2);
  c2.interfaces = i2;

  compu c3;
  c3.hostname = "compu3";
  Conj<interfaz> i3;
  i3.Agregar(1);
  i3.Agregar(2);
  c3.interfaces = i3;

  r.AgregarComputadora(c1);
  r.AgregarComputadora(c2);
  r.AgregarComputadora(c3);
  r.Conectar(c1, c2, 1, 1);
  r.Conectar(c2, c3, 2, 2);
  r.Conectar(c1, c3, 2, 1);
}*/

int main() {
  RUN_TEST(heap_test);
  //RUN_TEST(red_test);

  return 0;
}
