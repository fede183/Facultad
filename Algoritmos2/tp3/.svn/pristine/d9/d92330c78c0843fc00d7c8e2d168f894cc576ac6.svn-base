
#ifndef AED2_INCLUDED_H
#define AED2_INCLUDED_H

/** 
 * Comentando o descomentando la siguiente linea, se deshabilita 
 * o habilita el chequeo de precondiciones al llamar a las funciones 
 * de los modulos basicos. Si se habilita, dichas funciones 
 * ya no cumplir√°n con la complejiad algoritmica especificada 
 * en el apunte correspondiente.
 */
#define DEBUG

#include "aed2/TiposBasicos.h"
#include "aed2/Arreglo.h"
#include "aed2/Lista.h"
#include "aed2/Vector.h"
#include "aed2/Dicc.h"
#include "aed2/Conj.h"
#include "aed2/ConjAcotado.h"
#include "aed2/dicc_trie.h"

using namespace aed2;


typedef int interfaz;
struct compu{
    string hostname;
    Conj<interfaz> interfaces;
    bool operator==(compu &c) const{
    	return (hostname==c.hostname)&&(interfaces == c.interfaces);
    }
    bool operator==(const compu &c) const{
    	return (hostname==c.hostname)&&(interfaces == c.interfaces);
    }
    bool operator!=(compu &c) const{
    	return !(c == (*this));
    }
    bool operator!=(const compu &c) const{
    	return !(c == (*this));
    }
    void operator=(compu &c){
      hostname = c.hostname;
      interfaces = c.interfaces;
    }
};


    struct paquete{
        Nat id;
        Nat prioridad;
        compu origen;
        compu destino;
        bool operator==(const paquete &p) const{
          return (id==p.id)&&(prioridad == p.prioridad) && (origen == p.origen) && (destino == p.destino);
        }
        bool operator!=(const paquete &p) const{
          return !(*this == p);
        }
        //paquete(compu o, compu d)
        //: origen(o), destino(d){}
    };

    struct tupla{
        string prim;
        paquete seg;

        tupla(string s, paquete p)
        : prim(s), seg(p){}
    };

#endif //AED2_INCLUDED_H
