\documentclass[a4paper,10pt]{article}
\usepackage[paper=a4paper, hmargin=1.5cm, bottom=1.5cm, top=3.5cm]{geometry}
\usepackage[latin1]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[spanish]{babel}
\usepackage{xspace}
\usepackage{xargs}
\usepackage{ifthen}
\usepackage{algorithmicx}
\usepackage{algpseudocode}
\usepackage{algorithm}
\usepackage{aed2-tad,aed2-symb,aed2-itef}


\newcommand{\moduloNombre}[1]{\textbf{#1}}

\let\NombreFuncion=\textsc
\let\TipoVariable=\texttt
\let\ModificadorArgumento=\textbf
\newcommand{\res}{$res$\xspace}
\newcommand{\tab}{\hspace*{7mm}}

\newcommandx{\TipoFuncion}[3]{%
  \NombreFuncion{#1}(#2) \ifx#3\empty\else $\to$ \res\,: \TipoVariable{#3}\fi%
}
\newcommand{\In}[2]{\ModificadorArgumento{in} \ensuremath{#1}\,: \TipoVariable{#2}\xspace}
\newcommand{\Out}[2]{\ModificadorArgumento{out} \ensuremath{#1}\,: \TipoVariable{#2}\xspace}
\newcommand{\Inout}[2]{\ModificadorArgumento{in/out} \ensuremath{#1}\,: \TipoVariable{#2}\xspace}
\newcommand{\Aplicar}[2]{\NombreFuncion{#1}(#2)}

\newlength{\IntFuncionLengthA}
\newlength{\IntFuncionLengthB}
\newlength{\IntFuncionLengthC}
%InterfazFuncion(nombre, argumentos, valor retorno, precondicion, postcondicion, complejidad, descripcion, aliasing)
\newcommandx{\InterfazFuncion}[9][4=true,6,7,8,9]{%
  \hangindent=\parindent
  \TipoFuncion{#1}{#2}{#3}\\%
  \textbf{Pre} $\equiv$ \{#4\}\\%
  \textbf{Post} $\equiv$ \{#5\}%
  \ifx#6\empty\else\\\textbf{Complejidad:} #6\fi%
  \ifx#7\empty\else\\\textbf{Descripción:} #7\fi%
  \ifx#8\empty\else\\\textbf{Aliasing:} #8\fi%
  \ifx#9\empty\else\\\textbf{Requiere:} #9\fi%
}

\newenvironment{Interfaz}{%
  \parskip=2ex%
  \noindent\textbf{\Large Interfaz}%
  \par%
}{}

\newenvironment{Representacion}{%
  \vspace*{2ex}%
  \noindent\textbf{\Large Representación}%
  \vspace*{2ex}%
}{}

\newenvironment{Algoritmos}{%
  \vspace*{2ex}%
  \noindent\textbf{\Large Algoritmos}%
  \vspace*{2ex}%
}{}


\newcommand{\Titulo}[1]{
  \vspace*{1ex}\par\noindent\textbf{\large #1}\par
}

\newenvironmentx{Estructura}[2][2={estr}]{%
  \par\vspace*{2ex}%
  \TipoVariable{#1} \textbf{se representa con} \TipoVariable{#2}%
  \par\vspace*{1ex}%
}{%
  \par\vspace*{2ex}%
}%

\newboolean{EstructuraHayItems}
\newlength{\lenTupla}
\newenvironmentx{Tupla}[1][1={estr}]{%
    \settowidth{\lenTupla}{\hspace*{3mm}donde \TipoVariable{#1} es \TipoVariable{tupla}$($}%
    \addtolength{\lenTupla}{\parindent}%
    \hspace*{3mm}donde \TipoVariable{#1} es \TipoVariable{tupla}$($%
    \begin{minipage}[t]{\linewidth-\lenTupla}%
    \setboolean{EstructuraHayItems}{false}%
}{%
    $)$%
    \end{minipage}
}

\newcommandx{\tupItem}[3][1={\ }]{%
    %\hspace*{3mm}%
    \ifthenelse{\boolean{EstructuraHayItems}}{%
        ,#1%
    }{}%
    \emph{#2}: \TipoVariable{#3}%
    \setboolean{EstructuraHayItems}{true}%
}

\newcommandx{\RepFc}[3][1={estr},2={e}]{%
  \tadOperacion{Rep}{#1}{bool}{}%
  \tadAxioma{Rep($#2$)}{#3}%
}%

\newcommandx{\Rep}[3][1={estr},2={e}]{%
  \tadOperacion{Rep}{#1}{bool}{}%
  \tadAxioma{Rep($#2$)}{true \ssi #3}%
}%

\newcommandx{\Abs}[5][1={estr},3={e}]{%
  \tadOperacion{Abs}{#1/#3}{#2}{Rep($#3$)}%
  \settominwidth{\hangindent}{Abs($#3$) \igobs #4: #2 $\mid$ }%
  \addtolength{\hangindent}{\parindent}%
  Abs($#3$) \igobs #4: #2 $\mid$ #5%
}%

\newcommandx{\AbsFc}[4][1={estr},3={e}]{%
  \tadOperacion{Abs}{#1/#3}{#2}{Rep($#3$)}%
  \tadAxioma{Abs($#3$)}{#4}%
}%


\newcommand{\DRef}{\ensuremath{\rightarrow}}

\begin{document}

\section{Módulo Tried(k, $\sigma$)}


\begin{Interfaz}
  
  \textbf{parámetros formales}\hangindent=2\parindent\\
  \parbox{1.7cm}{\textbf{géneros}} k, $\sigma$\\
  \parbox[t]{1.7cm}{\textbf{función}}\parbox[t]{\textwidth-2\parindent-1.7cm}{%
    \InterfazFuncion{$\bullet = \bullet$}{\In{k1}{k}, \In{k2}{k}}{bool}
    {$res \igobs (k1 = k2)$}
    [$\Theta(equal(k1, k2))$]
    [función de comparaci\'on de k's]
    
    \InterfazFuncion{Copiar}{\In{a}{k}}{k}
    {$res \igobs a$}
    [$\Theta(copy(a))$]
    [función de copia de k's]
    
    \InterfazFuncion{Copiar}{\In{s}{$\sigma$}}{$\sigma$}
    {$res \igobs s$}
    [$\Theta(copy(s))$]
    [función de copia de $\sigma$'s]
    
    \InterfazFuncion{Long}{\In{a}{k}}{nat}
    {$res \igobs long(a)$}
    [$\Theta(1)$]
    [función que devuelve el tamaño de k's]
  }

  \textbf{se explica con}: \tadNombre{Diccionario$(k, \sigma)$}.

  \textbf{géneros}: \TipoVariable{tried$(k, \sigma)$}.

  \Titulo{Operaciones básicas de tried}

  \InterfazFuncion{Vac\'io}{}{tried(k,$\sigma)$}%
  {$res \igobs$ vacio}%
  [$\Theta(1)$]
  [genera un tried vac\'io.]

  \InterfazFuncion{Definir}{\Inout{d}{tried(k,$\sigma)$}, \In{k}{k}, \In{s}{$\sigma$} }{}
  [$d \igobs d_0$]
  {$d \igobs definir(d_0, k, s)$}
  [O(long(k) + copy(k))]
  [define la clave k con el significado s en el tried d.]
  
  \InterfazFuncion{Definido?}{\In{d}{tried(k,$\sigma)$}, \In{k}{k}}{bool}
  {$res \igobs def?(d, k)$}
  [O(long(k) + copy(k))]
  [devuelve true si y s\'olo k est\'a definido en el tried.]

  \InterfazFuncion{Significado}{\In{d}{tried(k,$\sigma)$}, \In{k}{k}}{$\sigma$}
  [$def?(d, k)$]
  {$alias(res \igobs obtener(d, k))$}
  [O(long(k) + copy(k))]
  [devuelve el significado de la clave k en el tried d.]
  [res es modificable si y s\'olo si d es modificable.]

  \InterfazFuncion{Borrar}{\Inout{d}{tried(k,$\sigma$)}, \In{k}{k}}{}
  [$d \igobs d_0 \wedge def?(d, k)$]
  {$d \igobs borrar(d_0, k)$}
  [O(Eliminar del conjunto lineal + copy(k) + long(k))]
  [borra la clave k del tried d.]

  \InterfazFuncion{Claves}{\In{d}{tried(k,$\sigma$)}}{conj(k)}
  {$res \igobs claves(d)$}
  [$\Theta(1)$]
  [devuelve las claves del tried.]
  [res es modificable si y s\'olo si d es modificable.]

  \InterfazFuncion{$\#$Claves}{\In{d}{tried(k,$\sigma$)}}{nat}
  {$res \igobs \#(claves(d))$}
  [$\Theta(1)$]
  [devuelve la cantidad de claves del tried.]
 
  
\end{Interfaz}

\begin{Representacion}
  
  \Titulo{Representación de la tried}

  \begin{Estructura}{tried(k,$\sigma$)}[trie]
    \begin{Tupla}[trie]
      \tupItem{diccionario}{lista(nodoTrie)}%
      \tupItem{claves}{conj(k)}%
    \end{Tupla}

    \begin{Tupla}[nodoTrie]
      \tupItem{letra}{k}%
      \tupItem{final}{bool}%
      \tupItem{siguientes}{lista(nodoTrie)}%
      \tupItem{significado}{puntero($\sigma$)}%
    \end{Tupla}
  \end{Estructura}

  \Rep[trie][t]{($\forall i$: nat)((i > 0  $\wedge$ i < Longitud(t.diccionario)) $\impluego$ long(t.diccionario[i].letra) $=$ 1   $\wedge$ $\neg$LetrasReperidas?(t.diccionario) $\wedge$ (t.final $\Rightarrow$ t.significado $\neq$ NULL)}\mbox{}
  

  \tadOperacion{LetrasReperidas?}{lista(nodoTrie)}{bool}{}
  \tadAxioma{LetrasReperidas?(l)}{\IF EsVac\'ia?(l) THEN true ELSE LetrasReperidas?(Fin(l)) $\wedge$ LetrasReperidas?Aux(Fin(l), Primero(l).letra) FI}
  ~      
 \tadOperacion{LetrasReperidas?Aux}{lista(nodoTrie), k}{bool}{}
  \tadAxioma{LetrasReperidas?Aux($l$, $k$)}{\IF(EsVacía?(l)) THEN true ELSE {\IF(Primero(l).letra $=$ k) THEN false ELSE LetrasReperidas?Aux(Fin(l), k) FI} FI}
 
   ~   
  \AbsFc[trie]{tried}[t]{e}{($\forall$ c : k)(def?(e, c) $\Leftrightarrow$ Pertenece?(t.claves, c) $\yluego$ (def?(e, c) $\impluego$ obtener(e, c) $=$ ObtenerDeEstructura(t.diccionario, c)))}
 
   ~ 
  \tadOperacion{ObtenerDeEstructura}{lista(nodoTrie), k}{$\sigma$}{}
  \tadAxioma{ObtenerDeEstructura(l, c)}{\IF Primero(l).letra = prim(k) $\wedge$ vac\'ia?(fin(k)) THEN *Primero(l).significado ELSE {\IF (Primero(l).letra = prim(k)) THEN ObtenerDeEstructura(Primero(l).siguientes, fin(k) ELSE ObtenerDeEstructura(Fin(l), k) FI} FI}
 
\end{Representacion}

\begin{Algoritmos}


\begin{algorithm}[H]{\textbf{iVac\'io}() $\to$ $res$ : trie}
	\begin{algorithmic}
			 \State res $\gets$ <Vac\'ia(), Vac\'io()> 				\Comment $\Theta(1)$
			 \medskip
			  \Statex \underline{Complejidad:} $\Theta(1)$
	
    	\end{algorithmic}
\end{algorithm}

\begin{algorithm}[H]{\textbf{iDefinir}(\Inout{d}{trie}, \In {k}{k}, \In {s}{$\sigma$})}
	\begin{algorithmic}
	
\State AgregarRapido(d.claves, k) 						\Comment O(copy(k))
\State kAux : k $\gets$ copy(k) 						\Comment O(copy(k))
\State recorrido : itLista(nodoTrie) $\gets$ crearIT(d.diccionario) 		\Comment O(1)
\While{$\neg$ vac\'ia?(kAux)} 				 			\Comment O(8 x long(k)) = O(long(k))
	\State encontrado : bool $\gets$ false 			\Comment O(1)
	\While{HaySiguiente(recorrido) $\wedge$ $\neg$ encontrado}          \Comment O(7 x cantidad de elementos asignados a la lista que itera recorrido) pero esto est\'a acotado por constante as\'i que es O(1)
		\If{Siguiente(recorrido) = prim(kAux)} 		\Comment O(2)
		  \State encontrado $\gets$ true 		\Comment O(1)
		\EndIf
		\State Avanzar(recorrido) 		\Comment O(1)
	\EndWhile
	\If{$\neg$encontrado}      \Comment O(5)
		\State nueva : lista(nodoTrie) $\gets$ Vac\'ia() 					\Comment O(1)
		\State *aAgregar : puntero($\sigma$) $\gets$ s 			\Comment O(1)
		\State AgregarComoSiguiente(recorrido, <prim(kAux) , vac\'ia?(fin(kAux)), nueva, aAgregar>) 	 \Comment O(copy(<prim(kAux) , vac\'ia?(fin(kAux)), nueva, s>)) = O(1)
		\State recorrido $\gets$ crearIT(Siguiente(recorrido).Siguiente) 		\Comment O(1)
	\ElsIf {encontrado $\wedge$ vac\'ia?(fin(kAux))} 	\Comment O(5)
		\State Siguiente(recorrido).final $\gets$ true 					\Comment O(1)		
		\State *Siguiente(recorrido).significado $\gets$ s 					\Comment O(1)
	\ElsIf {encontrado} 					\Comment O(2)
		\State recorrido $\gets$ crearIT(Siguiente(recorrido).Siguiente) 		\Comment O(1)
	\EndIf
	\State kAux $\gets$ fin(kAux) 							\Comment O(1)
\EndWhile
	
			 \medskip
			  \Statex \underline{Complejidad:} O(long(k) + copy(k))
			  \Statex \underline{Justificaci\'on:} O(long(k) + 1 + 2xcopy(k)) = O(long(k) + copy(k))
    	\end{algorithmic}
\end{algorithm}

\begin{algorithm}[H]{\textbf{iDefinido?}(\In{d}{trie}, \In {k}{k})$\to$ $res$ : bool}
	\begin{algorithmic}
	
\State kAux : k $\gets$ copy(k) 						\Comment O(copy(k))
\State recorrido : itLista(nodoTrie) $\gets$ crearIT(d.diccionario) 		\Comment O(1)
\State res $\gets$ false 						\Comment O(1)
\While{$\neg$ vac\'ia?(kAux) $\wedge$ $\neg$res $\wedge$ HaySiguiente(recorrido)} 						\Comment O(12 x long(k)) = O(long(k))
	\State encontrado : bool $\gets$ false 		\Comment O(1)
	\While{HaySiguiente(recorrido) $\wedge$ $\neg$ encontrado}          \Comment O(7 x cantidad de elementos asignados a la lista que itera recorrido) pero esto est\'a acotado por constante as\'i que es O(1)
		\If{Siguiente(recorrido) = prim(kAux)} 		\Comment O(2)
		  \State encontrado $\gets$ true 		\Comment O(1)
		\EndIf
		\State Avanzar(recorrido) 		\Comment O(1)
	\EndWhile
	\If{$\neg$ encontrado}      \Comment O(2)
		\State res $\gets$ false 					\Comment O(1)
	\ElsIf {encontrado $\wedge$ vac\'ia?(fin(kAux))} 	\Comment O(4)
		\State res $\gets$ Siguiente(recorrido).final 					\Comment O(1)		
	\ElsIf {encontrado} 					\Comment O(2)
		\State recorrido $\gets$ crearIT(Siguiente(recorrido).Siguiente) 		\Comment O(1)
	\EndIf
	\State kAux $\gets$ fin(kAux) 							\Comment O(1)
\EndWhile
	)
			 \medskip
			 \Statex \underline{Complejidad:} O(copy(k) + long(k))
			  \Statex \underline{Justificaci\'on:} O(copy(k) + long(k) + 2) = O(copy(k) + long(k))
    	\end{algorithmic}
\end{algorithm}

\begin{algorithm}[H]{\textbf{iSignificado}(\In{d}{trie}, \In {k}{k})$\to$ $res$ : $\sigma$}
	\begin{algorithmic}
	
\State kAux : k $\gets$ copy(k) 						\Comment O(copy(k))
\State resultado : puntero($\sigma$) $\gets$ NULL   				\Comment O(1)
\State recorrido : itLista(nodoTrie) $\gets$ crearIT(d.diccionario) 		\Comment O(1)
\While{$\neg$ vac\'ia?(kAux)} 					\Comment O(6 x long(k)) = O(long(k))
	\State encontrado : bool $\gets$ false 		\Comment O(1)
	\While{HaySiguiente(recorrido) $\wedge$ $\neg$ encontrado}          \Comment O(7 x cantidad de elementos asignados a la lista que itera recorrido) pero esto est\'a acotado por constante as\'i que es O(1)
		\If{Siguiente(recorrido) = prim(kAux)} 		\Comment O(2)
		  \State encontrado $\gets$ true 		\Comment O(1)
		\EndIf
		\State Avanzar(recorrido) 		\Comment O(1)
	\EndWhile
	\If {encontrado $\wedge$ vac\'ia?(fin(kAux))} 	\Comment O(3)
		\State resultado $\gets$ Siguiente(recorrido).significado 					\Comment O(1)		
	\Else  					\Comment O(2)
		\State recorrido $\gets$ crearIT(Siguiente(recorrido).Siguiente) 		\Comment O(1)
		
	\EndIf
\State kAux $\gets$ fin(kAux) 							\Comment O(1)
\EndWhile
			\State res $\gets$ *resultado  		\Comment O(1)
			 \medskip
			  \Statex \underline{Complejidad:} O(copy(k) + long(k))
			  \Statex \underline{Justificaci\'on:} O(copy(k) + long(k) + 3) = O(copy(k) + long(k))
    	\end{algorithmic}
\end{algorithm}

\begin{algorithm}[H]{\textbf{iBorrar}(\Inout{d}{trie}, \In {k}{k})}
	\begin{algorithmic}
\State Eliminar(d.claves, k)						\Comment $O(\Sigma_{a' \in d.claves} equal(k,a')))$ %Costo de eliminar en un conjunto.
\State kAux : k $\gets$ copy(k) 						\Comment O(copy(k))
\State recorrido : itLista(nodoTrie) $\gets$ crearIT(d.diccionario) 		\Comment O(1)

\While{$\neg$ vac\'ia?(kAux)} 						\Comment O(4 x long(k)) = O(long(k))
	\State encontrado : bool $\gets$ false 		\Comment O(1)
	\While{HaySiguiente(recorrido) $\wedge$ $\neg$ encontrado}          \Comment O(7 x cantidad de elementos asignados a la lista que itera recorrido) pero esto est\'a acotado por constante as\'i que es O(1)
		\If{Siguiente(recorrido) = prim(kAux)} 		\Comment O(2)
		  \State encontrado $\gets$ true 		\Comment O(1)
		\EndIf
		\State Avanzar(recorrido) 		\Comment O(1)
	\EndWhile
	\If {vac\'ia?(fin(kAux))} 	\Comment O(2)
		\State Siguiente(recorrido).final $\gets$ false 					\Comment O(1)		
	\Else  					\Comment O(2)
		\State recorrido $\gets$ crearIT(Siguiente(recorrido).Siguiente) 		\Comment O(1)
	\EndIf
	\State kAux $\gets$ fin(kAux) 							\Comment O(1)
\EndWhile	

			 \medskip
			  \Statex \underline{Complejidad:} O($\Sigma_{a' \in d.claves} equal(k,a')$ + copy(k) + long(k))
			  \Statex \underline{Justificaci\'on:} O($\Sigma_{a' \in d.claves} equal(k,a')$ + copy(k) + long(k) + 1) = O($\Sigma_{a' \in d.claves} equal(k,a')$ + copy(k) + long(k))
    	\end{algorithmic}
\end{algorithm}

\begin{algorithm}[H]{\textbf{Claves}(\In{d}{trie})$\to$ $res$ : conj(k)}
	\begin{algorithmic}
	  \State res $\gets$ d.claves							\Comment O(1)
			 \medskip
			  \Statex \underline{Complejidad:} O(1)
    	\end{algorithmic}
\end{algorithm}

\begin{algorithm}[H]{\textbf{$\#$Claves}(\In{d}{trie})$\to$ $res$ : nat}
	\begin{algorithmic}
	  \State res $\gets$ Cardinal(d.claves)						\Comment O(1)
			 \medskip
			  \Statex \underline{Complejidad:} O(1)
    	\end{algorithmic}
\end{algorithm}


\end{Algoritmos}
\textbf{Aclaraciones:}
- Varias de las complejidades incluyen copy(k) haciendo referencia al costo de copiar la clave. Como las claves con las que vamos a usar este modulo son hostname, y por ende secuencias de caracteres, el costo de copia es igual a la longitud de la clave. Entonces estas complejidades nos quedan O(long(k) + long(k)) = O(log(k)).
\end{document}
