
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj1 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }


    // The following exception was thrown during execution in test generation
    try {
    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    int i2 = stackAr0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    boolean b8 = stackAr2.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj9 = stackAr2.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    int i4 = stackAr0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)'4');
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stackAr1.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }


    // The following exception was thrown during execution in test generation
    try {
    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b4 = stackAr0.equals((java.lang.Object)(-1));
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr0.equals((java.lang.Object)stackAr4);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj7 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    int i4 = stackAr0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)'4');
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr(1);
    boolean b3 = stackAr1.equals((java.lang.Object)(byte)(-1));
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stackAr1.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isEmpty();
    java.lang.String str8 = stackAr6.toString();
    java.lang.String str9 = stackAr6.toString();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    boolean b12 = stackAr6.equals((java.lang.Object)stackAr10);
    java.lang.String str13 = stackAr6.toString();
    stackAr0.push((java.lang.Object)stackAr6);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj15 = stackAr6.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(short)10);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b4 = stackAr0.equals((java.lang.Object)(-1));
    boolean b5 = stackAr0.isEmpty();
    boolean b6 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj7 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    stackAr4.push((java.lang.Object)10);
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr4);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj11 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b4 = stackAr0.equals((java.lang.Object)(-1));
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }


    // The following exception was thrown during execution in test generation
    try {
    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(short)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b7 = stackAr3.equals((java.lang.Object)(-1));
    boolean b8 = stackAr0.equals((java.lang.Object)stackAr3);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj9 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    boolean b8 = stackAr4.isEmpty();
    stackAr0.push((java.lang.Object)b8);
    java.lang.String str10 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[true]"+ "'", str10.equals("[true]"));

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    int i2 = stackAr0.size();
    int i3 = stackAr0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isFull();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr(1);
    stackAr0.push((java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    stackAr0.push((java.lang.Object)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b3 = stackAr0.equals((java.lang.Object)100);
    java.lang.String str4 = stackAr0.toString();
    boolean b5 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)'4');
    boolean b2 = stackAr1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr1.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int)(byte)100);
    boolean b6 = stackAr5.isEmpty();
    boolean b7 = stackAr0.equals((java.lang.Object)b6);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    java.lang.String str4 = stackAr2.toString();
    boolean b5 = stackAr2.isEmpty();
    boolean b6 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b10 = stackAr7.isEmpty();
    stackAr7.push((java.lang.Object)10);
    java.lang.String str13 = stackAr7.toString();
    stackAr2.push((java.lang.Object)stackAr7);
    stackAr0.push((java.lang.Object)stackAr7);
    boolean b16 = stackAr7.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    int i3 = stackAr0.size();
    boolean b4 = stackAr0.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    boolean b6 = stackAr0.isFull();
    boolean b7 = stackAr0.isEmpty();
    boolean b8 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    int i3 = stackAr0.size();
    int i4 = stackAr0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isFull();
    java.lang.String str8 = stackAr6.toString();
    boolean b9 = stackAr6.isEmpty();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isEmpty();
    java.lang.String str12 = stackAr10.toString();
    java.lang.String str13 = stackAr10.toString();
    int i14 = stackAr10.size();
    stackAr6.push((java.lang.Object)i14);
    java.lang.Object obj16 = stackAr6.top();
    stackAr0.push((java.lang.Object)stackAr6);
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    boolean b22 = stackAr20.isFull();
    boolean b23 = stackAr18.equals((java.lang.Object)b22);
    stackAr6.push((java.lang.Object)b23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str2 = stackAr1.toString();
    boolean b3 = stackAr1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b4 = stackAr0.equals((java.lang.Object)(-1));
    boolean b5 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj6 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    java.lang.String str1 = stackAr0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr(1);
    java.lang.Object obj2 = null;
    stackAr1.push(obj2);
    int i4 = stackAr1.size();
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr(1);
    java.lang.Object obj7 = null;
    stackAr6.push(obj7);
    // The following exception was thrown during execution in test generation
    try {
    stackAr1.push(obj7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr(1);
    java.lang.Object obj2 = null;
    stackAr1.push(obj2);
    int i4 = stackAr1.size();
    int i5 = stackAr1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    int i5 = stackAr0.size();
    int i6 = stackAr0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj7 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b7 = stackAr3.equals((java.lang.Object)(-1));
    boolean b8 = stackAr0.equals((java.lang.Object)stackAr3);
    boolean b9 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj10 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    boolean b2 = stackAr1.isEmpty();
    boolean b3 = stackAr1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stackAr1.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    boolean b13 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isEmpty();
    java.lang.String str16 = stackAr14.toString();
    java.lang.String str17 = stackAr14.toString();
    stackAr14.push((java.lang.Object)(-1.0f));
    stackAr0.push((java.lang.Object)stackAr14);
    boolean b21 = stackAr14.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    boolean b6 = stackAr4.isEmpty();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b11 = stackAr7.equals((java.lang.Object)(-1));
    boolean b12 = stackAr4.equals((java.lang.Object)stackAr7);
    boolean b14 = stackAr7.equals((java.lang.Object)(byte)0);
    stackAr0.push((java.lang.Object)b14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr0.equals((java.lang.Object)stackAr4);
    java.lang.String str7 = stackAr0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    int i6 = stackAr0.size();
    boolean b7 = stackAr0.isFull();
    boolean b8 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str14 = stackAr5.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj15 = stackAr5.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)'a');

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    stackAr0.push((java.lang.Object)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    int i5 = stackAr0.size();
    int i6 = stackAr0.size();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)(byte)10);
    boolean b9 = stackAr0.equals((java.lang.Object)stackAr8);
    java.lang.String str10 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    java.lang.String str30 = stackAr23.toString();
    stackAr17.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    java.lang.String str38 = stackAr36.toString();
    java.lang.String str39 = stackAr36.toString();
    int i40 = stackAr36.size();
    boolean b41 = stackAr34.equals((java.lang.Object)stackAr36);
    stackAr32.push((java.lang.Object)stackAr36);
    int i43 = stackAr32.size();
    stackAr23.push((java.lang.Object)i43);
    boolean b45 = stackAr3.equals((java.lang.Object)stackAr23);
    java.lang.String str46 = stackAr23.toString();
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr(10);
    stackAr23.push((java.lang.Object)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[1]"+ "'", str46.equals("[1]"));

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isEmpty();
    java.lang.String str8 = stackAr6.toString();
    java.lang.String str9 = stackAr6.toString();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    boolean b12 = stackAr6.equals((java.lang.Object)stackAr10);
    java.lang.String str13 = stackAr6.toString();
    stackAr0.push((java.lang.Object)stackAr6);
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    java.lang.String str21 = stackAr19.toString();
    java.lang.String str22 = stackAr19.toString();
    int i23 = stackAr19.size();
    boolean b24 = stackAr17.equals((java.lang.Object)stackAr19);
    stackAr15.push((java.lang.Object)stackAr19);
    int i26 = stackAr15.size();
    stackAr6.push((java.lang.Object)i26);
    boolean b28 = stackAr6.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    int i5 = stackAr0.size();
    boolean b6 = stackAr0.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj7 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)' ');
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    int i8 = stackAr0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj9 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isEmpty();
    java.lang.String str8 = stackAr6.toString();
    java.lang.String str9 = stackAr6.toString();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    boolean b12 = stackAr6.equals((java.lang.Object)stackAr10);
    java.lang.String str13 = stackAr6.toString();
    stackAr0.push((java.lang.Object)stackAr6);
    boolean b15 = stackAr6.isFull();
    boolean b16 = stackAr6.isFull();
    int i17 = stackAr6.size();
    int i18 = stackAr6.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    boolean b5 = stackAr0.isEmpty();
    java.lang.String str6 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)'#');
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stackAr1.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    int i6 = stackAr0.size();
    java.lang.String str7 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    int i6 = stackAr0.size();
    boolean b7 = stackAr0.isFull();
    boolean b9 = stackAr0.equals((java.lang.Object)"[10]");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj10 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    int i5 = stackAr0.size();
    int i6 = stackAr0.size();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)(byte)10);
    boolean b9 = stackAr0.equals((java.lang.Object)stackAr8);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj10 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj6 = stackAr4.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b7 = stackAr3.equals((java.lang.Object)(-1));
    boolean b8 = stackAr0.equals((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str11 = stackAr10.toString();
    stackAr3.push((java.lang.Object)str11);
    boolean b13 = stackAr3.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    boolean b14 = stackAr5.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    int i4 = stackAr0.size();
    boolean b5 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    java.lang.String str7 = stackAr6.toString();
    boolean b8 = stackAr6.isEmpty();
    int i9 = stackAr6.size();
    stackAr0.push((java.lang.Object)i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    boolean b3 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    int i2 = stackAr0.size();
    int i3 = stackAr0.size();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    int i7 = stackAr5.size();
    stackAr0.push((java.lang.Object)i7);
    java.lang.Object obj9 = stackAr0.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 0+ "'", obj9.equals(0));

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str14 = stackAr5.toString();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    java.lang.String str21 = stackAr19.toString();
    java.lang.String str22 = stackAr19.toString();
    int i23 = stackAr19.size();
    boolean b24 = stackAr17.equals((java.lang.Object)stackAr19);
    stackAr15.push((java.lang.Object)stackAr19);
    boolean b26 = stackAr5.equals((java.lang.Object)stackAr19);
    boolean b27 = stackAr5.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj28 = stackAr5.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    java.lang.String str30 = stackAr23.toString();
    stackAr17.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    java.lang.String str38 = stackAr36.toString();
    java.lang.String str39 = stackAr36.toString();
    int i40 = stackAr36.size();
    boolean b41 = stackAr34.equals((java.lang.Object)stackAr36);
    stackAr32.push((java.lang.Object)stackAr36);
    int i43 = stackAr32.size();
    stackAr23.push((java.lang.Object)i43);
    boolean b45 = stackAr3.equals((java.lang.Object)stackAr23);
    java.lang.String str46 = stackAr23.toString();
    boolean b47 = stackAr23.isFull();
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isEmpty();
    java.lang.String str50 = stackAr48.toString();
    java.lang.String str51 = stackAr48.toString();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isFull();
    boolean b54 = stackAr48.equals((java.lang.Object)stackAr52);
    boolean b55 = stackAr48.isFull();
    boolean b56 = stackAr23.equals((java.lang.Object)b55);
    java.lang.String str57 = stackAr23.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[1]"+ "'", str46.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "[]"+ "'", str50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[]"+ "'", str51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[1]"+ "'", str57.equals("[1]"));

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    int i5 = stackAr0.size();
    int i6 = stackAr0.size();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)(byte)10);
    boolean b9 = stackAr0.equals((java.lang.Object)stackAr8);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj10 = stackAr8.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    boolean b4 = stackAr0.equals((java.lang.Object)(byte)0);
    boolean b5 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj6 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str2 = stackAr1.toString();
    boolean b3 = stackAr1.isEmpty();
    java.lang.String str4 = stackAr1.toString();
    java.lang.String str5 = stackAr1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    java.lang.String str2 = stackAr1.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    boolean b15 = stackAr0.equals((java.lang.Object)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    java.lang.String str4 = stackAr2.toString();
    boolean b5 = stackAr2.isEmpty();
    boolean b6 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b10 = stackAr7.isEmpty();
    stackAr7.push((java.lang.Object)10);
    java.lang.String str13 = stackAr7.toString();
    stackAr2.push((java.lang.Object)stackAr7);
    stackAr0.push((java.lang.Object)stackAr7);
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b18 = stackAr16.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    java.lang.String str21 = stackAr19.toString();
    boolean b22 = stackAr19.isEmpty();
    boolean b23 = stackAr19.isEmpty();
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
    boolean b25 = stackAr24.isFull();
    java.lang.String str26 = stackAr24.toString();
    boolean b27 = stackAr24.isEmpty();
    stackAr24.push((java.lang.Object)10);
    java.lang.String str30 = stackAr24.toString();
    stackAr19.push((java.lang.Object)stackAr24);
    stackAr16.push((java.lang.Object)stackAr19);
    org.autotest.StackAr stackAr33 = new org.autotest.StackAr();
    boolean b34 = stackAr33.isEmpty();
    org.autotest.StackAr stackAr35 = new org.autotest.StackAr();
    boolean b36 = stackAr35.isFull();
    boolean b37 = stackAr35.isFull();
    boolean b38 = stackAr33.equals((java.lang.Object)b37);
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isEmpty();
    java.lang.String str41 = stackAr39.toString();
    java.lang.String str42 = stackAr39.toString();
    org.autotest.StackAr stackAr43 = new org.autotest.StackAr();
    boolean b44 = stackAr43.isFull();
    boolean b45 = stackAr39.equals((java.lang.Object)stackAr43);
    java.lang.String str46 = stackAr39.toString();
    stackAr33.push((java.lang.Object)stackAr39);
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isFull();
    org.autotest.StackAr stackAr50 = new org.autotest.StackAr();
    boolean b51 = stackAr50.isEmpty();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isEmpty();
    java.lang.String str54 = stackAr52.toString();
    java.lang.String str55 = stackAr52.toString();
    int i56 = stackAr52.size();
    boolean b57 = stackAr50.equals((java.lang.Object)stackAr52);
    stackAr48.push((java.lang.Object)stackAr52);
    int i59 = stackAr48.size();
    stackAr39.push((java.lang.Object)i59);
    boolean b61 = stackAr19.equals((java.lang.Object)stackAr39);
    java.lang.String str62 = stackAr39.toString();
    boolean b63 = stackAr39.isFull();
    org.autotest.StackAr stackAr64 = new org.autotest.StackAr();
    boolean b65 = stackAr64.isEmpty();
    java.lang.String str66 = stackAr64.toString();
    java.lang.String str67 = stackAr64.toString();
    org.autotest.StackAr stackAr68 = new org.autotest.StackAr();
    boolean b69 = stackAr68.isFull();
    boolean b70 = stackAr64.equals((java.lang.Object)stackAr68);
    boolean b71 = stackAr64.isFull();
    boolean b72 = stackAr39.equals((java.lang.Object)b71);
    stackAr0.push((java.lang.Object)b71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[10]"+ "'", str30.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[]"+ "'", str41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[]"+ "'", str42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[]"+ "'", str46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[]"+ "'", str54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "[]"+ "'", str55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "[1]"+ "'", str62.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[]"+ "'", str66.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]"+ "'", str67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)'4');
    java.lang.String str2 = stackAr1.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b7 = stackAr3.equals((java.lang.Object)(-1));
    boolean b8 = stackAr0.equals((java.lang.Object)stackAr3);
    boolean b10 = stackAr3.equals((java.lang.Object)(byte)0);
    boolean b11 = stackAr3.isEmpty();
    boolean b12 = stackAr3.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj13 = stackAr3.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    boolean b5 = stackAr0.isEmpty();
    int i6 = stackAr0.size();
    java.lang.String str7 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    int i2 = stackAr1.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    java.lang.String str14 = stackAr11.toString();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    boolean b17 = stackAr11.equals((java.lang.Object)stackAr15);
    int i18 = stackAr15.size();
    stackAr8.push((java.lang.Object)stackAr15);
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isEmpty();
    java.lang.String str22 = stackAr20.toString();
    java.lang.String str23 = stackAr20.toString();
    boolean b24 = stackAr20.isEmpty();
    org.autotest.StackAr stackAr25 = new org.autotest.StackAr();
    boolean b26 = stackAr25.isEmpty();
    java.lang.String str27 = stackAr25.toString();
    java.lang.String str28 = stackAr25.toString();
    org.autotest.StackAr stackAr29 = new org.autotest.StackAr();
    boolean b30 = stackAr29.isFull();
    boolean b31 = stackAr25.equals((java.lang.Object)stackAr29);
    boolean b32 = stackAr25.isFull();
    stackAr20.push((java.lang.Object)stackAr25);
    java.lang.String str34 = stackAr25.toString();
    boolean b35 = stackAr15.equals((java.lang.Object)stackAr25);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj36 = stackAr15.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[]"+ "'", str27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[]"+ "'", str34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    boolean b6 = stackAr0.isFull();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b10 = stackAr7.isEmpty();
    stackAr7.push((java.lang.Object)100.0d);
    boolean b13 = stackAr7.isEmpty();
    stackAr0.push((java.lang.Object)stackAr7);
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    boolean b17 = stackAr15.isFull();
    java.lang.String str18 = stackAr15.toString();
    java.lang.String str19 = stackAr15.toString();
    stackAr7.push((java.lang.Object)str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str14 = stackAr5.toString();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    java.lang.String str21 = stackAr19.toString();
    java.lang.String str22 = stackAr19.toString();
    int i23 = stackAr19.size();
    boolean b24 = stackAr17.equals((java.lang.Object)stackAr19);
    stackAr15.push((java.lang.Object)stackAr19);
    boolean b26 = stackAr5.equals((java.lang.Object)stackAr19);
    boolean b27 = stackAr5.isFull();
    java.lang.Object obj28 = null;
    stackAr5.push(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj14 = stackAr5.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isFull();
    boolean b16 = stackAr14.isFull();
    java.lang.String str17 = stackAr14.toString();
    boolean b18 = stackAr14.isEmpty();
    stackAr5.push((java.lang.Object)stackAr14);
    boolean b21 = stackAr5.equals((java.lang.Object)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    int i6 = stackAr0.size();
    java.lang.String str7 = stackAr0.toString();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isFull();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isEmpty();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isEmpty();
    java.lang.String str18 = stackAr16.toString();
    java.lang.String str19 = stackAr16.toString();
    int i20 = stackAr16.size();
    boolean b21 = stackAr14.equals((java.lang.Object)stackAr16);
    stackAr12.push((java.lang.Object)stackAr16);
    boolean b23 = stackAr8.equals((java.lang.Object)stackAr12);
    stackAr0.push((java.lang.Object)b23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b7 = stackAr3.equals((java.lang.Object)(-1));
    boolean b8 = stackAr0.equals((java.lang.Object)stackAr3);
    boolean b9 = stackAr0.isEmpty();
    boolean b10 = stackAr0.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj11 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str2 = stackAr1.toString();
    boolean b3 = stackAr1.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr4.isFull();
    boolean b8 = stackAr4.equals((java.lang.Object)10.0f);
    int i9 = stackAr4.size();
    boolean b10 = stackAr4.isFull();
    boolean b11 = stackAr1.equals((java.lang.Object)stackAr4);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj12 = stackAr4.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    boolean b11 = stackAr8.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj12 = stackAr8.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str8 = stackAr7.toString();
    stackAr0.push((java.lang.Object)str8);
    java.lang.String str10 = stackAr0.toString();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    boolean b13 = stackAr11.isEmpty();
    int i14 = stackAr11.size();
    boolean b15 = stackAr0.equals((java.lang.Object)i14);
    boolean b16 = stackAr0.isEmpty();
    java.lang.String str17 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[[]]"+ "'", str10.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[[]]"+ "'", str17.equals("[[]]"));

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    int i6 = stackAr0.size();
    boolean b7 = stackAr0.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)0);
    int i2 = stackAr1.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr1.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str2 = stackAr1.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str8 = stackAr7.toString();
    stackAr0.push((java.lang.Object)str8);
    java.lang.String str10 = stackAr0.toString();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    boolean b13 = stackAr11.isEmpty();
    int i14 = stackAr11.size();
    boolean b15 = stackAr0.equals((java.lang.Object)i14);
    boolean b16 = stackAr0.isEmpty();
    boolean b17 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[[]]"+ "'", str10.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    int i8 = stackAr0.size();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isEmpty();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isFull();
    boolean b13 = stackAr11.isFull();
    boolean b14 = stackAr9.equals((java.lang.Object)b13);
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    java.lang.String str17 = stackAr15.toString();
    java.lang.String str18 = stackAr15.toString();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr15.equals((java.lang.Object)stackAr19);
    java.lang.String str22 = stackAr15.toString();
    stackAr9.push((java.lang.Object)stackAr15);
    boolean b24 = stackAr0.equals((java.lang.Object)stackAr9);
    boolean b25 = stackAr9.isEmpty();
    java.lang.String str26 = stackAr9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[[]]"+ "'", str26.equals("[[]]"));

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isFull();
    boolean b16 = stackAr14.isFull();
    java.lang.String str17 = stackAr14.toString();
    boolean b18 = stackAr14.isEmpty();
    stackAr5.push((java.lang.Object)stackAr14);
    boolean b20 = stackAr14.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj21 = stackAr14.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    int i3 = stackAr0.size();
    int i4 = stackAr0.size();
    int i5 = stackAr0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj6 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b4 = stackAr0.equals((java.lang.Object)(-1));
    boolean b5 = stackAr0.isEmpty();
    boolean b6 = stackAr0.isEmpty();
    java.lang.String str7 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isFull();
    java.lang.String str8 = stackAr6.toString();
    boolean b9 = stackAr6.isEmpty();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isEmpty();
    java.lang.String str12 = stackAr10.toString();
    java.lang.String str13 = stackAr10.toString();
    int i14 = stackAr10.size();
    stackAr6.push((java.lang.Object)i14);
    java.lang.Object obj16 = stackAr6.top();
    stackAr0.push((java.lang.Object)stackAr6);
    int i18 = stackAr0.size();
    int i19 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    java.lang.String str11 = stackAr4.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj12 = stackAr4.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isFull();
    boolean b3 = stackAr0.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int)(byte)100);
    boolean b6 = stackAr5.isEmpty();
    boolean b7 = stackAr0.equals((java.lang.Object)b6);
    java.lang.String str8 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    java.lang.String str2 = stackAr1.toString();
    java.lang.String str3 = stackAr1.toString();
    boolean b4 = stackAr1.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b3 = stackAr0.equals((java.lang.Object)100);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    int i6 = stackAr0.size();
    boolean b7 = stackAr0.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    java.lang.String str30 = stackAr23.toString();
    stackAr17.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    java.lang.String str38 = stackAr36.toString();
    java.lang.String str39 = stackAr36.toString();
    int i40 = stackAr36.size();
    boolean b41 = stackAr34.equals((java.lang.Object)stackAr36);
    stackAr32.push((java.lang.Object)stackAr36);
    int i43 = stackAr32.size();
    stackAr23.push((java.lang.Object)i43);
    boolean b45 = stackAr3.equals((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int)'4');
    stackAr23.push((java.lang.Object)'4');
    java.lang.Object obj49 = null;
    boolean b50 = stackAr23.equals(obj49);
    java.lang.String str51 = stackAr23.toString();
    java.lang.Object obj52 = stackAr23.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[1,4]"+ "'", str51.equals("[1,4]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + '4'+ "'", obj52.equals('4'));

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    java.lang.String str6 = stackAr0.toString();
    java.lang.String str7 = stackAr0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    boolean b17 = stackAr0.isFull();
    java.lang.String str18 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[[[10]]]"+ "'", str18.equals("[[[10]]]"));

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b3 = stackAr0.equals((java.lang.Object)100);
    boolean b4 = stackAr0.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b3 = stackAr0.equals((java.lang.Object)100);
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int)(byte)100);
    boolean b6 = stackAr5.isEmpty();
    stackAr0.push((java.lang.Object)stackAr5);
    boolean b9 = stackAr5.equals((java.lang.Object)10.0f);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj10 = stackAr5.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b3 = stackAr0.equals((java.lang.Object)100);
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int)(byte)100);
    boolean b6 = stackAr5.isEmpty();
    stackAr0.push((java.lang.Object)stackAr5);
    boolean b8 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)1);
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    java.lang.String str4 = stackAr2.toString();
    boolean b5 = stackAr2.isEmpty();
    boolean b6 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b10 = stackAr7.isEmpty();
    stackAr7.push((java.lang.Object)10);
    java.lang.String str13 = stackAr7.toString();
    stackAr2.push((java.lang.Object)stackAr7);
    boolean b15 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isEmpty();
    java.lang.String str18 = stackAr16.toString();
    java.lang.String str19 = stackAr16.toString();
    stackAr16.push((java.lang.Object)(-1.0f));
    stackAr2.push((java.lang.Object)stackAr16);
    boolean b23 = stackAr2.isFull();
    stackAr1.push((java.lang.Object)b23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    stackAr4.push((java.lang.Object)10);
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isFull();
    java.lang.String str13 = stackAr11.toString();
    boolean b14 = stackAr11.isEmpty();
    boolean b15 = stackAr4.equals((java.lang.Object)stackAr11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    int i14 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    boolean b8 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b4 = stackAr0.equals((java.lang.Object)(-1));
    boolean b5 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj6 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)' ');
    boolean b2 = stackAr1.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)0);
    boolean b2 = stackAr1.isEmpty();
    boolean b4 = stackAr1.equals((java.lang.Object)100);
    boolean b5 = stackAr1.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr0.equals((java.lang.Object)stackAr4);
    boolean b7 = stackAr0.isFull();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr(1);
    boolean b10 = stackAr0.equals((java.lang.Object)1);
    boolean b11 = stackAr0.isFull();
    boolean b12 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str2 = stackAr1.toString();
    boolean b3 = stackAr1.isEmpty();
    boolean b4 = stackAr1.isEmpty();
    boolean b5 = stackAr1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    int i3 = stackAr0.size();
    boolean b4 = stackAr0.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str2 = stackAr1.toString();
    boolean b3 = stackAr1.isEmpty();
    boolean b4 = stackAr1.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    boolean b7 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b12 = stackAr8.equals((java.lang.Object)(-1));
    boolean b13 = stackAr5.equals((java.lang.Object)stackAr8);
    boolean b15 = stackAr8.equals((java.lang.Object)(byte)0);
    boolean b16 = stackAr1.equals((java.lang.Object)b15);
    int i17 = stackAr1.size();
    java.lang.String str18 = stackAr1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isFull();
    java.lang.String str8 = stackAr6.toString();
    boolean b9 = stackAr6.isEmpty();
    stackAr6.push((java.lang.Object)10);
    java.lang.String str12 = stackAr6.toString();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isEmpty();
    java.lang.String str15 = stackAr13.toString();
    java.lang.String str16 = stackAr13.toString();
    boolean b17 = stackAr13.isEmpty();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    java.lang.String str20 = stackAr18.toString();
    java.lang.String str21 = stackAr18.toString();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    boolean b24 = stackAr18.equals((java.lang.Object)stackAr22);
    boolean b25 = stackAr18.isFull();
    stackAr13.push((java.lang.Object)stackAr18);
    boolean b27 = stackAr6.equals((java.lang.Object)stackAr13);
    boolean b28 = stackAr0.equals((java.lang.Object)stackAr13);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj29 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[10]"+ "'", str12.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    java.lang.String str2 = stackAr1.toString();
    int i3 = stackAr1.size();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    boolean b14 = stackAr4.equals((java.lang.Object)stackAr8);
    java.lang.Object obj15 = stackAr8.top();
    boolean b16 = stackAr1.equals(obj15);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj17 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 10+ "'", obj15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    stackAr0.push((java.lang.Object)i8);
    int i10 = stackAr0.size();
    boolean b11 = stackAr0.isFull();
    java.lang.Object obj12 = stackAr0.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 0+ "'", obj12.equals(0));

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    boolean b8 = stackAr4.isEmpty();
    stackAr0.push((java.lang.Object)b8);
    boolean b10 = stackAr0.isFull();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    int i14 = stackAr11.size();
    stackAr0.push((java.lang.Object)i14);
    java.lang.String str16 = stackAr0.toString();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isFull();
    java.lang.String str19 = stackAr17.toString();
    boolean b20 = stackAr17.isEmpty();
    boolean b21 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    java.lang.String str24 = stackAr22.toString();
    boolean b25 = stackAr22.isEmpty();
    stackAr22.push((java.lang.Object)10);
    java.lang.String str28 = stackAr22.toString();
    stackAr17.push((java.lang.Object)stackAr22);
    java.lang.String str30 = stackAr22.toString();
    org.autotest.StackAr stackAr31 = new org.autotest.StackAr();
    boolean b32 = stackAr31.isFull();
    boolean b33 = stackAr31.isFull();
    java.lang.String str34 = stackAr31.toString();
    boolean b35 = stackAr31.isEmpty();
    stackAr22.push((java.lang.Object)stackAr31);
    stackAr0.push((java.lang.Object)stackAr22);
    int i38 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[true,0]"+ "'", str16.equals("[true,0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[10]"+ "'", str28.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[10]"+ "'", str30.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[]"+ "'", str34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 3);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str8 = stackAr7.toString();
    stackAr0.push((java.lang.Object)str8);
    java.lang.String str10 = stackAr0.toString();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isEmpty();
    java.lang.String str15 = stackAr13.toString();
    java.lang.String str16 = stackAr13.toString();
    int i17 = stackAr13.size();
    boolean b18 = stackAr11.equals((java.lang.Object)stackAr13);
    stackAr0.push((java.lang.Object)stackAr11);
    boolean b20 = stackAr11.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[[]]"+ "'", str10.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    java.lang.String str30 = stackAr23.toString();
    stackAr17.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    java.lang.String str38 = stackAr36.toString();
    java.lang.String str39 = stackAr36.toString();
    int i40 = stackAr36.size();
    boolean b41 = stackAr34.equals((java.lang.Object)stackAr36);
    stackAr32.push((java.lang.Object)stackAr36);
    int i43 = stackAr32.size();
    stackAr23.push((java.lang.Object)i43);
    boolean b45 = stackAr3.equals((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int)'4');
    stackAr23.push((java.lang.Object)'4');
    java.lang.Object obj49 = null;
    boolean b50 = stackAr23.equals(obj49);
    java.lang.String str51 = stackAr23.toString();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isFull();
    java.lang.String str54 = stackAr52.toString();
    java.lang.Object obj55 = null;
    boolean b56 = stackAr52.equals(obj55);
    stackAr23.push((java.lang.Object)b56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[1,4]"+ "'", str51.equals("[1,4]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[]"+ "'", str54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr(2);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    stackAr4.push((java.lang.Object)10);
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    boolean b13 = stackAr11.isEmpty();
    int i14 = stackAr11.size();
    boolean b15 = stackAr11.isEmpty();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isEmpty();
    boolean b18 = stackAr16.isEmpty();
    int i19 = stackAr16.size();
    stackAr11.push((java.lang.Object)i19);
    boolean b21 = stackAr0.equals((java.lang.Object)i19);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj22 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    java.lang.Object obj14 = stackAr5.top();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    java.lang.String str17 = stackAr15.toString();
    java.lang.String str18 = stackAr15.toString();
    int i19 = stackAr15.size();
    boolean b20 = stackAr15.isEmpty();
    int i21 = stackAr15.size();
    stackAr5.push((java.lang.Object)stackAr15);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj23 = stackAr15.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10+ "'", obj14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    stackAr4.push((java.lang.Object)10);
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr4);
    java.lang.Object obj11 = stackAr4.top();
    java.lang.String str12 = stackAr4.toString();
    java.lang.Object obj13 = stackAr4.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 10+ "'", obj11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[10]"+ "'", str12.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 10+ "'", obj13.equals(10));

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    java.lang.String str1 = stackAr0.toString();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    boolean b7 = stackAr5.isFull();
    boolean b8 = stackAr3.equals((java.lang.Object)b7);
    int i9 = stackAr3.size();
    stackAr0.push((java.lang.Object)i9);
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int)(byte)100);
    java.lang.String str13 = stackAr12.toString();
    boolean b14 = stackAr12.isFull();
    int i15 = stackAr12.size();
    boolean b16 = stackAr0.equals((java.lang.Object)i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str2 = stackAr1.toString();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isEmpty();
    java.lang.String str5 = stackAr3.toString();
    java.lang.String str6 = stackAr3.toString();
    stackAr3.push((java.lang.Object)(-1.0f));
    java.lang.String str9 = stackAr3.toString();
    boolean b10 = stackAr1.equals((java.lang.Object)str9);
    int i11 = stackAr1.size();
    java.lang.String str12 = stackAr1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[-1.0]"+ "'", str9.equals("[-1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.String str6 = stackAr0.toString();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isEmpty();
    java.lang.String str9 = stackAr7.toString();
    java.lang.String str10 = stackAr7.toString();
    boolean b11 = stackAr7.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isEmpty();
    java.lang.String str14 = stackAr12.toString();
    java.lang.String str15 = stackAr12.toString();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isFull();
    boolean b18 = stackAr12.equals((java.lang.Object)stackAr16);
    boolean b19 = stackAr12.isFull();
    stackAr7.push((java.lang.Object)stackAr12);
    boolean b21 = stackAr0.equals((java.lang.Object)stackAr7);
    int i22 = stackAr0.size();
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    int i30 = stackAr27.size();
    stackAr0.push((java.lang.Object)i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[10]"+ "'", str6.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    java.lang.String str30 = stackAr23.toString();
    stackAr17.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    java.lang.String str38 = stackAr36.toString();
    java.lang.String str39 = stackAr36.toString();
    int i40 = stackAr36.size();
    boolean b41 = stackAr34.equals((java.lang.Object)stackAr36);
    stackAr32.push((java.lang.Object)stackAr36);
    int i43 = stackAr32.size();
    stackAr23.push((java.lang.Object)i43);
    boolean b45 = stackAr3.equals((java.lang.Object)stackAr23);
    java.lang.String str46 = stackAr23.toString();
    boolean b47 = stackAr23.isFull();
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isEmpty();
    java.lang.String str50 = stackAr48.toString();
    java.lang.String str51 = stackAr48.toString();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isFull();
    boolean b54 = stackAr48.equals((java.lang.Object)stackAr52);
    boolean b55 = stackAr48.isFull();
    boolean b56 = stackAr23.equals((java.lang.Object)b55);
    java.lang.Object obj57 = stackAr23.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[1]"+ "'", str46.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "[]"+ "'", str50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[]"+ "'", str51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj57 + "' != '" + 1+ "'", obj57.equals(1));

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    boolean b13 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isEmpty();
    java.lang.String str16 = stackAr14.toString();
    java.lang.String str17 = stackAr14.toString();
    stackAr14.push((java.lang.Object)(-1.0f));
    stackAr0.push((java.lang.Object)stackAr14);
    int i21 = stackAr14.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    int i2 = stackAr1.size();
    int i3 = stackAr1.size();
    int i4 = stackAr1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr(1);
    boolean b3 = stackAr1.equals((java.lang.Object)(byte)(-1));
    boolean b4 = stackAr1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    int i2 = stackAr1.size();
    int i3 = stackAr1.size();
    java.lang.String str4 = stackAr1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    boolean b7 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    stackAr0.push((java.lang.Object)i8);
    int i10 = stackAr0.size();
    boolean b11 = stackAr0.isFull();
    boolean b12 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    java.lang.String str2 = stackAr1.toString();
    boolean b3 = stackAr1.isFull();
    int i4 = stackAr1.size();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b7 = stackAr5.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    boolean b12 = stackAr8.isEmpty();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isFull();
    java.lang.String str15 = stackAr13.toString();
    boolean b16 = stackAr13.isEmpty();
    stackAr13.push((java.lang.Object)10);
    java.lang.String str19 = stackAr13.toString();
    stackAr8.push((java.lang.Object)stackAr13);
    stackAr5.push((java.lang.Object)stackAr8);
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isEmpty();
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
    boolean b25 = stackAr24.isFull();
    boolean b26 = stackAr24.isFull();
    boolean b27 = stackAr22.equals((java.lang.Object)b26);
    org.autotest.StackAr stackAr28 = new org.autotest.StackAr();
    boolean b29 = stackAr28.isEmpty();
    java.lang.String str30 = stackAr28.toString();
    java.lang.String str31 = stackAr28.toString();
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    boolean b34 = stackAr28.equals((java.lang.Object)stackAr32);
    java.lang.String str35 = stackAr28.toString();
    stackAr22.push((java.lang.Object)stackAr28);
    org.autotest.StackAr stackAr37 = new org.autotest.StackAr();
    boolean b38 = stackAr37.isFull();
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isEmpty();
    org.autotest.StackAr stackAr41 = new org.autotest.StackAr();
    boolean b42 = stackAr41.isEmpty();
    java.lang.String str43 = stackAr41.toString();
    java.lang.String str44 = stackAr41.toString();
    int i45 = stackAr41.size();
    boolean b46 = stackAr39.equals((java.lang.Object)stackAr41);
    stackAr37.push((java.lang.Object)stackAr41);
    int i48 = stackAr37.size();
    stackAr28.push((java.lang.Object)i48);
    boolean b50 = stackAr8.equals((java.lang.Object)stackAr28);
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr((int)'4');
    stackAr28.push((java.lang.Object)'4');
    java.lang.Object obj54 = null;
    boolean b55 = stackAr28.equals(obj54);
    java.lang.String str56 = stackAr28.toString();
    boolean b57 = stackAr1.equals((java.lang.Object)str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[10]"+ "'", str19.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[]"+ "'", str31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[]"+ "'", str35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[]"+ "'", str43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "[]"+ "'", str44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "[1,4]"+ "'", str56.equals("[1,4]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    boolean b11 = stackAr8.isFull();
    int i12 = stackAr8.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj13 = stackAr8.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    boolean b11 = stackAr0.isFull();
    boolean b12 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    boolean b11 = stackAr0.isEmpty();
    boolean b12 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    boolean b8 = stackAr4.isEmpty();
    stackAr0.push((java.lang.Object)b8);
    boolean b10 = stackAr0.isFull();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    int i14 = stackAr11.size();
    stackAr0.push((java.lang.Object)i14);
    java.lang.String str16 = stackAr0.toString();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isFull();
    java.lang.String str19 = stackAr17.toString();
    boolean b20 = stackAr17.isEmpty();
    boolean b21 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    java.lang.String str24 = stackAr22.toString();
    boolean b25 = stackAr22.isEmpty();
    stackAr22.push((java.lang.Object)10);
    java.lang.String str28 = stackAr22.toString();
    stackAr17.push((java.lang.Object)stackAr22);
    java.lang.String str30 = stackAr22.toString();
    org.autotest.StackAr stackAr31 = new org.autotest.StackAr();
    boolean b32 = stackAr31.isFull();
    boolean b33 = stackAr31.isFull();
    java.lang.String str34 = stackAr31.toString();
    boolean b35 = stackAr31.isEmpty();
    stackAr22.push((java.lang.Object)stackAr31);
    stackAr0.push((java.lang.Object)stackAr22);
    org.autotest.StackAr stackAr38 = new org.autotest.StackAr();
    boolean b39 = stackAr38.isFull();
    java.lang.String str40 = stackAr38.toString();
    boolean b41 = stackAr38.isEmpty();
    stackAr38.push((java.lang.Object)10);
    java.lang.Object obj44 = stackAr38.top();
    org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int)'4');
    boolean b47 = stackAr46.isFull();
    boolean b48 = stackAr38.equals((java.lang.Object)stackAr46);
    boolean b49 = stackAr46.isFull();
    boolean b50 = stackAr0.equals((java.lang.Object)stackAr46);
    int i51 = stackAr46.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[true,0]"+ "'", str16.equals("[true,0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[10]"+ "'", str28.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[10]"+ "'", str30.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[]"+ "'", str34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[]"+ "'", str40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 10+ "'", obj44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    int i8 = stackAr0.size();
    boolean b9 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str2 = stackAr1.toString();
    boolean b3 = stackAr1.isEmpty();
    java.lang.String str4 = stackAr1.toString();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isEmpty();
    java.lang.String str9 = stackAr7.toString();
    java.lang.String str10 = stackAr7.toString();
    int i11 = stackAr7.size();
    boolean b12 = stackAr5.equals((java.lang.Object)stackAr7);
    int i13 = stackAr5.size();
    boolean b15 = stackAr5.equals((java.lang.Object)(-1));
    stackAr1.push((java.lang.Object)stackAr5);
    boolean b17 = stackAr5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    int i6 = stackAr0.size();
    boolean b7 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr(0);
    boolean b2 = stackAr1.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    int i9 = stackAr5.size();
    boolean b10 = stackAr3.equals((java.lang.Object)stackAr5);
    int i11 = stackAr3.size();
    boolean b12 = stackAr3.isEmpty();
    boolean b13 = stackAr3.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    stackAr1.push((java.lang.Object)b13);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b7 = stackAr3.equals((java.lang.Object)(-1));
    boolean b8 = stackAr0.equals((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str11 = stackAr10.toString();
    stackAr3.push((java.lang.Object)str11);
    java.lang.Object obj13 = null;
    boolean b14 = stackAr3.equals(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    stackAr0.push((java.lang.Object)(-1.0f));
    java.lang.Object obj6 = stackAr0.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (-1.0f)+ "'", obj6.equals((-1.0f)));

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b3 = stackAr0.equals((java.lang.Object)100);
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int)(byte)100);
    boolean b6 = stackAr5.isEmpty();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str8 = stackAr0.toString();
    java.lang.String str9 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[[]]"+ "'", str8.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[[]]"+ "'", str9.equals("[[]]"));

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)"[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isFull();
    int i4 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b3 = stackAr0.equals((java.lang.Object)100);
    java.lang.String str4 = stackAr0.toString();
    java.lang.String str5 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    boolean b6 = stackAr0.isFull();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b10 = stackAr7.isEmpty();
    stackAr7.push((java.lang.Object)100.0d);
    boolean b13 = stackAr7.isEmpty();
    stackAr0.push((java.lang.Object)stackAr7);
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    java.lang.String str17 = stackAr15.toString();
    int i18 = stackAr15.size();
    boolean b19 = stackAr15.isFull();
    boolean b20 = stackAr7.equals((java.lang.Object)b19);
    boolean b21 = stackAr7.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    int i3 = stackAr0.size();
    boolean b4 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b3 = stackAr0.equals((java.lang.Object)100);
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int)(byte)100);
    boolean b6 = stackAr5.isEmpty();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.Object obj8 = stackAr0.top();
    boolean b9 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str14 = stackAr5.toString();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    java.lang.String str21 = stackAr19.toString();
    java.lang.String str22 = stackAr19.toString();
    int i23 = stackAr19.size();
    boolean b24 = stackAr17.equals((java.lang.Object)stackAr19);
    stackAr15.push((java.lang.Object)stackAr19);
    boolean b26 = stackAr5.equals((java.lang.Object)stackAr19);
    boolean b27 = stackAr19.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj28 = stackAr19.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    java.lang.String str11 = stackAr4.toString();
    boolean b12 = stackAr4.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isFull();
    java.lang.String str13 = stackAr11.toString();
    boolean b14 = stackAr11.isEmpty();
    stackAr11.push((java.lang.Object)10);
    java.lang.String str17 = stackAr11.toString();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    java.lang.String str20 = stackAr18.toString();
    java.lang.String str21 = stackAr18.toString();
    boolean b22 = stackAr18.isEmpty();
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    boolean b30 = stackAr23.isFull();
    stackAr18.push((java.lang.Object)stackAr23);
    boolean b32 = stackAr11.equals((java.lang.Object)stackAr18);
    int i33 = stackAr11.size();
    boolean b34 = stackAr8.equals((java.lang.Object)stackAr11);
    int i35 = stackAr8.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[10]"+ "'", str17.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b10 = stackAr7.isEmpty();
    boolean b11 = stackAr7.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isFull();
    java.lang.String str14 = stackAr12.toString();
    boolean b15 = stackAr12.isEmpty();
    stackAr12.push((java.lang.Object)10);
    java.lang.String str18 = stackAr12.toString();
    stackAr7.push((java.lang.Object)stackAr12);
    stackAr5.push((java.lang.Object)stackAr12);
    boolean b21 = stackAr0.equals((java.lang.Object)stackAr5);
    java.lang.String str22 = stackAr5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[10]"+ "'", str18.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[[10]]"+ "'", str22.equals("[[10]]"));

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str14 = stackAr5.toString();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    java.lang.String str21 = stackAr19.toString();
    java.lang.String str22 = stackAr19.toString();
    int i23 = stackAr19.size();
    boolean b24 = stackAr17.equals((java.lang.Object)stackAr19);
    stackAr15.push((java.lang.Object)stackAr19);
    boolean b26 = stackAr5.equals((java.lang.Object)stackAr19);
    boolean b27 = stackAr5.isFull();
    boolean b28 = stackAr5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr0.equals((java.lang.Object)stackAr4);
    boolean b7 = stackAr0.isFull();
    boolean b8 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)0);
    int i2 = stackAr1.size();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b5 = stackAr3.equals((java.lang.Object)0);
    boolean b7 = stackAr3.equals((java.lang.Object)(byte)0);
    boolean b8 = stackAr3.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    stackAr1.push((java.lang.Object)stackAr3);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    java.lang.String str30 = stackAr23.toString();
    stackAr17.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    java.lang.String str38 = stackAr36.toString();
    java.lang.String str39 = stackAr36.toString();
    int i40 = stackAr36.size();
    boolean b41 = stackAr34.equals((java.lang.Object)stackAr36);
    stackAr32.push((java.lang.Object)stackAr36);
    int i43 = stackAr32.size();
    stackAr23.push((java.lang.Object)i43);
    boolean b45 = stackAr3.equals((java.lang.Object)stackAr23);
    java.lang.String str46 = stackAr23.toString();
    boolean b47 = stackAr23.isFull();
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isEmpty();
    java.lang.String str50 = stackAr48.toString();
    java.lang.String str51 = stackAr48.toString();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isFull();
    boolean b54 = stackAr48.equals((java.lang.Object)stackAr52);
    boolean b55 = stackAr48.isFull();
    boolean b56 = stackAr23.equals((java.lang.Object)b55);
    boolean b57 = stackAr23.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[1]"+ "'", str46.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "[]"+ "'", str50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[]"+ "'", str51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    stackAr4.push((java.lang.Object)10);
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    boolean b13 = stackAr11.isEmpty();
    int i14 = stackAr11.size();
    boolean b15 = stackAr11.isEmpty();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isEmpty();
    boolean b18 = stackAr16.isEmpty();
    int i19 = stackAr16.size();
    stackAr11.push((java.lang.Object)i19);
    boolean b21 = stackAr0.equals((java.lang.Object)i19);
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isEmpty();
    java.lang.String str24 = stackAr22.toString();
    java.lang.String str25 = stackAr22.toString();
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isFull();
    java.lang.String str28 = stackAr26.toString();
    boolean b29 = stackAr26.isEmpty();
    boolean b30 = stackAr26.isEmpty();
    stackAr22.push((java.lang.Object)b30);
    boolean b32 = stackAr22.isFull();
    org.autotest.StackAr stackAr33 = new org.autotest.StackAr();
    boolean b34 = stackAr33.isEmpty();
    java.lang.String str35 = stackAr33.toString();
    int i36 = stackAr33.size();
    stackAr22.push((java.lang.Object)i36);
    java.lang.String str38 = stackAr22.toString();
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isFull();
    java.lang.String str41 = stackAr39.toString();
    boolean b42 = stackAr39.isEmpty();
    boolean b43 = stackAr39.isEmpty();
    org.autotest.StackAr stackAr44 = new org.autotest.StackAr();
    boolean b45 = stackAr44.isFull();
    java.lang.String str46 = stackAr44.toString();
    boolean b47 = stackAr44.isEmpty();
    stackAr44.push((java.lang.Object)10);
    java.lang.String str50 = stackAr44.toString();
    stackAr39.push((java.lang.Object)stackAr44);
    java.lang.String str52 = stackAr44.toString();
    org.autotest.StackAr stackAr53 = new org.autotest.StackAr();
    boolean b54 = stackAr53.isFull();
    boolean b55 = stackAr53.isFull();
    java.lang.String str56 = stackAr53.toString();
    boolean b57 = stackAr53.isEmpty();
    stackAr44.push((java.lang.Object)stackAr53);
    stackAr22.push((java.lang.Object)stackAr44);
    org.autotest.StackAr stackAr60 = new org.autotest.StackAr();
    boolean b61 = stackAr60.isFull();
    org.autotest.StackAr stackAr62 = new org.autotest.StackAr();
    boolean b63 = stackAr62.isEmpty();
    org.autotest.StackAr stackAr64 = new org.autotest.StackAr();
    boolean b65 = stackAr64.isEmpty();
    java.lang.String str66 = stackAr64.toString();
    java.lang.String str67 = stackAr64.toString();
    int i68 = stackAr64.size();
    boolean b69 = stackAr62.equals((java.lang.Object)stackAr64);
    stackAr60.push((java.lang.Object)stackAr64);
    boolean b71 = stackAr44.equals((java.lang.Object)stackAr60);
    stackAr0.push((java.lang.Object)stackAr44);
    java.lang.String str73 = stackAr44.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[]"+ "'", str35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[true,0]"+ "'", str38.equals("[true,0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[]"+ "'", str41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[]"+ "'", str46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "[10]"+ "'", str50.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "[10]"+ "'", str52.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "[]"+ "'", str56.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[]"+ "'", str66.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]"+ "'", str67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "[10,[]]"+ "'", str73.equals("[10,[]]"));

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr0.equals((java.lang.Object)stackAr4);
    boolean b7 = stackAr4.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stackAr4.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    int i11 = stackAr0.size();
    java.lang.Object obj12 = stackAr0.top();
    boolean b13 = stackAr0.isEmpty();
    boolean b14 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str14 = stackAr5.toString();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    java.lang.String str21 = stackAr19.toString();
    java.lang.String str22 = stackAr19.toString();
    int i23 = stackAr19.size();
    boolean b24 = stackAr17.equals((java.lang.Object)stackAr19);
    stackAr15.push((java.lang.Object)stackAr19);
    boolean b26 = stackAr5.equals((java.lang.Object)stackAr19);
    java.lang.String str27 = stackAr5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[]"+ "'", str27.equals("[]"));

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    stackAr0.push((java.lang.Object)1L);
    int i16 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    java.lang.String str30 = stackAr23.toString();
    stackAr17.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    java.lang.String str38 = stackAr36.toString();
    java.lang.String str39 = stackAr36.toString();
    int i40 = stackAr36.size();
    boolean b41 = stackAr34.equals((java.lang.Object)stackAr36);
    stackAr32.push((java.lang.Object)stackAr36);
    int i43 = stackAr32.size();
    stackAr23.push((java.lang.Object)i43);
    boolean b45 = stackAr3.equals((java.lang.Object)stackAr23);
    java.lang.String str46 = stackAr3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[[10]]"+ "'", str46.equals("[[10]]"));

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isFull();
    java.lang.String str16 = stackAr14.toString();
    boolean b17 = stackAr14.isFull();
    boolean b18 = stackAr5.equals((java.lang.Object)b17);
    boolean b19 = stackAr5.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    boolean b11 = stackAr8.isFull();
    java.lang.String str12 = stackAr8.toString();
    boolean b13 = stackAr8.isFull();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str16 = stackAr15.toString();
    boolean b17 = stackAr15.isEmpty();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isFull();
    boolean b20 = stackAr18.isFull();
    boolean b22 = stackAr18.equals((java.lang.Object)10.0f);
    int i23 = stackAr18.size();
    boolean b24 = stackAr18.isFull();
    boolean b25 = stackAr15.equals((java.lang.Object)stackAr18);
    stackAr8.push((java.lang.Object)stackAr18);
    boolean b27 = stackAr18.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr0.equals((java.lang.Object)stackAr4);
    int i7 = stackAr4.size();
    int i8 = stackAr4.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj9 = stackAr4.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    boolean b8 = stackAr4.isEmpty();
    stackAr0.push((java.lang.Object)b8);
    boolean b10 = stackAr0.isFull();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    int i14 = stackAr11.size();
    stackAr0.push((java.lang.Object)i14);
    int i16 = stackAr0.size();
    stackAr0.push((java.lang.Object)"[[]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    java.lang.String str30 = stackAr23.toString();
    stackAr17.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    java.lang.String str38 = stackAr36.toString();
    java.lang.String str39 = stackAr36.toString();
    int i40 = stackAr36.size();
    boolean b41 = stackAr34.equals((java.lang.Object)stackAr36);
    stackAr32.push((java.lang.Object)stackAr36);
    int i43 = stackAr32.size();
    stackAr23.push((java.lang.Object)i43);
    boolean b45 = stackAr3.equals((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int)'4');
    stackAr23.push((java.lang.Object)'4');
    java.lang.Object obj49 = null;
    boolean b50 = stackAr23.equals(obj49);
    java.lang.String str51 = stackAr23.toString();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isEmpty();
    boolean b54 = stackAr52.isEmpty();
    org.autotest.StackAr stackAr55 = new org.autotest.StackAr();
    boolean b56 = stackAr55.isFull();
    java.lang.String str57 = stackAr55.toString();
    boolean b59 = stackAr55.equals((java.lang.Object)(-1));
    boolean b60 = stackAr52.equals((java.lang.Object)stackAr55);
    org.autotest.StackAr stackAr62 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str63 = stackAr62.toString();
    stackAr55.push((java.lang.Object)str63);
    org.autotest.StackAr stackAr65 = new org.autotest.StackAr();
    boolean b66 = stackAr65.isFull();
    java.lang.String str67 = stackAr65.toString();
    boolean b68 = stackAr65.isEmpty();
    boolean b69 = stackAr65.isEmpty();
    org.autotest.StackAr stackAr70 = new org.autotest.StackAr();
    boolean b71 = stackAr70.isFull();
    java.lang.String str72 = stackAr70.toString();
    boolean b73 = stackAr70.isEmpty();
    stackAr70.push((java.lang.Object)10);
    java.lang.String str76 = stackAr70.toString();
    stackAr65.push((java.lang.Object)stackAr70);
    java.lang.String str78 = stackAr70.toString();
    org.autotest.StackAr stackAr79 = new org.autotest.StackAr();
    boolean b80 = stackAr79.isFull();
    boolean b81 = stackAr79.isFull();
    java.lang.String str82 = stackAr79.toString();
    boolean b83 = stackAr79.isEmpty();
    stackAr70.push((java.lang.Object)stackAr79);
    org.autotest.StackAr stackAr86 = new org.autotest.StackAr((int)' ');
    boolean b87 = stackAr86.isEmpty();
    stackAr70.push((java.lang.Object)stackAr86);
    boolean b89 = stackAr55.equals((java.lang.Object)stackAr70);
    boolean b90 = stackAr70.isEmpty();
    stackAr23.push((java.lang.Object)stackAr70);
    java.lang.String str92 = stackAr23.toString();
    int i93 = stackAr23.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[1,4]"+ "'", str51.equals("[1,4]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[]"+ "'", str57.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "[]"+ "'", str63.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]"+ "'", str67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "[]"+ "'", str72.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "[10]"+ "'", str76.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "[10]"+ "'", str78.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "[]"+ "'", str82.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "[1,4,[10,[],[]]]"+ "'", str92.equals("[1,4,[10,[],[]]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 3);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    boolean b11 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b14 = stackAr12.equals((java.lang.Object)0);
    boolean b15 = stackAr12.isEmpty();
    stackAr0.push((java.lang.Object)stackAr12);
    int i17 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    int i11 = stackAr0.size();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isFull();
    boolean b14 = stackAr12.isFull();
    boolean b16 = stackAr12.equals((java.lang.Object)10.0f);
    int i17 = stackAr12.size();
    java.lang.String str18 = stackAr12.toString();
    boolean b19 = stackAr12.isEmpty();
    boolean b20 = stackAr0.equals((java.lang.Object)stackAr12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr(1);
    int i2 = stackAr1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    boolean b11 = stackAr8.isFull();
    java.lang.String str12 = stackAr8.toString();
    boolean b13 = stackAr8.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str2 = stackAr1.toString();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isEmpty();
    java.lang.String str5 = stackAr3.toString();
    java.lang.String str6 = stackAr3.toString();
    stackAr3.push((java.lang.Object)(-1.0f));
    java.lang.String str9 = stackAr3.toString();
    boolean b10 = stackAr1.equals((java.lang.Object)str9);
    int i11 = stackAr1.size();
    boolean b12 = stackAr1.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[-1.0]"+ "'", str9.equals("[-1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    int i4 = stackAr0.size();
    java.lang.String str5 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    int i5 = stackAr0.size();
    int i6 = stackAr0.size();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)(byte)10);
    boolean b9 = stackAr0.equals((java.lang.Object)stackAr8);
    boolean b10 = stackAr8.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj11 = stackAr8.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isEmpty();
    java.lang.String str8 = stackAr6.toString();
    java.lang.String str9 = stackAr6.toString();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    boolean b12 = stackAr6.equals((java.lang.Object)stackAr10);
    boolean b13 = stackAr0.equals((java.lang.Object)stackAr6);
    java.lang.Object obj14 = null;
    boolean b15 = stackAr6.equals(obj14);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj16 = stackAr6.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isFull();
    java.lang.String str13 = stackAr11.toString();
    boolean b14 = stackAr11.isEmpty();
    stackAr11.push((java.lang.Object)10);
    java.lang.String str17 = stackAr11.toString();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    java.lang.String str20 = stackAr18.toString();
    java.lang.String str21 = stackAr18.toString();
    boolean b22 = stackAr18.isEmpty();
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    boolean b30 = stackAr23.isFull();
    stackAr18.push((java.lang.Object)stackAr23);
    boolean b32 = stackAr11.equals((java.lang.Object)stackAr18);
    int i33 = stackAr11.size();
    boolean b34 = stackAr8.equals((java.lang.Object)stackAr11);
    java.lang.String str35 = stackAr11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[10]"+ "'", str17.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[10]"+ "'", str35.equals("[10]"));

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b7 = stackAr3.equals((java.lang.Object)(-1));
    boolean b8 = stackAr0.equals((java.lang.Object)stackAr3);
    boolean b10 = stackAr3.equals((java.lang.Object)(byte)0);
    boolean b11 = stackAr3.isEmpty();
    java.lang.String str12 = stackAr3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(short)0);
    int i2 = stackAr1.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr1.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str8 = stackAr7.toString();
    stackAr0.push((java.lang.Object)str8);
    java.lang.String str10 = stackAr0.toString();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    boolean b13 = stackAr11.isEmpty();
    int i14 = stackAr11.size();
    boolean b15 = stackAr0.equals((java.lang.Object)i14);
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isEmpty();
    java.lang.String str18 = stackAr16.toString();
    java.lang.String str19 = stackAr16.toString();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    boolean b22 = stackAr16.equals((java.lang.Object)stackAr20);
    int i23 = stackAr20.size();
    int i24 = stackAr20.size();
    boolean b25 = stackAr0.equals((java.lang.Object)i24);
    boolean b26 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[[]]"+ "'", str10.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)1);
    boolean b2 = stackAr1.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr0.equals((java.lang.Object)stackAr4);
    boolean b7 = stackAr0.isFull();
    int i8 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)' ');
    boolean b2 = stackAr1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    boolean b11 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b14 = stackAr12.equals((java.lang.Object)0);
    boolean b15 = stackAr12.isEmpty();
    stackAr0.push((java.lang.Object)stackAr12);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj17 = stackAr12.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    int i8 = stackAr0.size();
    boolean b9 = stackAr0.isEmpty();
    boolean b10 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isFull();
    boolean b15 = stackAr13.isFull();
    boolean b16 = stackAr11.equals((java.lang.Object)b15);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isFull();
    java.lang.String str19 = stackAr17.toString();
    boolean b20 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b22 = stackAr21.isEmpty();
    java.lang.String str23 = stackAr21.toString();
    java.lang.String str24 = stackAr21.toString();
    int i25 = stackAr21.size();
    stackAr17.push((java.lang.Object)i25);
    java.lang.Object obj27 = stackAr17.top();
    stackAr11.push((java.lang.Object)stackAr17);
    org.autotest.StackAr stackAr29 = new org.autotest.StackAr();
    boolean b31 = stackAr29.equals((java.lang.Object)0);
    stackAr29.push((java.lang.Object)"[]");
    stackAr17.push((java.lang.Object)"[]");
    java.lang.Object obj35 = stackAr17.top();
    boolean b36 = stackAr0.equals((java.lang.Object)stackAr17);
    java.lang.String str37 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 0+ "'", obj27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "[]"+ "'", obj35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[]"+ "'", str37.equals("[]"));

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    int i8 = stackAr0.size();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isEmpty();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isFull();
    boolean b13 = stackAr11.isFull();
    boolean b14 = stackAr9.equals((java.lang.Object)b13);
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    java.lang.String str17 = stackAr15.toString();
    java.lang.String str18 = stackAr15.toString();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr15.equals((java.lang.Object)stackAr19);
    java.lang.String str22 = stackAr15.toString();
    stackAr9.push((java.lang.Object)stackAr15);
    boolean b24 = stackAr0.equals((java.lang.Object)stackAr9);
    org.autotest.StackAr stackAr25 = new org.autotest.StackAr();
    boolean b26 = stackAr25.isEmpty();
    boolean b27 = stackAr25.isEmpty();
    org.autotest.StackAr stackAr28 = new org.autotest.StackAr();
    boolean b29 = stackAr28.isFull();
    java.lang.String str30 = stackAr28.toString();
    boolean b32 = stackAr28.equals((java.lang.Object)(-1));
    boolean b33 = stackAr25.equals((java.lang.Object)stackAr28);
    org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str36 = stackAr35.toString();
    stackAr28.push((java.lang.Object)str36);
    org.autotest.StackAr stackAr38 = new org.autotest.StackAr();
    boolean b39 = stackAr38.isFull();
    java.lang.String str40 = stackAr38.toString();
    boolean b41 = stackAr38.isEmpty();
    boolean b42 = stackAr38.isEmpty();
    org.autotest.StackAr stackAr43 = new org.autotest.StackAr();
    boolean b44 = stackAr43.isFull();
    java.lang.String str45 = stackAr43.toString();
    boolean b46 = stackAr43.isEmpty();
    stackAr43.push((java.lang.Object)10);
    java.lang.String str49 = stackAr43.toString();
    stackAr38.push((java.lang.Object)stackAr43);
    java.lang.String str51 = stackAr43.toString();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isFull();
    boolean b54 = stackAr52.isFull();
    java.lang.String str55 = stackAr52.toString();
    boolean b56 = stackAr52.isEmpty();
    stackAr43.push((java.lang.Object)stackAr52);
    org.autotest.StackAr stackAr59 = new org.autotest.StackAr((int)' ');
    boolean b60 = stackAr59.isEmpty();
    stackAr43.push((java.lang.Object)stackAr59);
    boolean b62 = stackAr28.equals((java.lang.Object)stackAr43);
    boolean b63 = stackAr9.equals((java.lang.Object)stackAr43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[]"+ "'", str36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[]"+ "'", str40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[]"+ "'", str45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[10]"+ "'", str49.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[10]"+ "'", str51.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "[]"+ "'", str55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)'4');
    boolean b2 = stackAr1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    java.lang.String str1 = stackAr0.toString();
    boolean b2 = stackAr0.isEmpty();
    int i3 = stackAr0.size();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int)(byte)100);
    boolean b6 = stackAr5.isEmpty();
    boolean b7 = stackAr5.isEmpty();
    boolean b9 = stackAr5.equals((java.lang.Object)(-1));
    int i10 = stackAr5.size();
    stackAr5.push((java.lang.Object)"hi!");
    int i13 = stackAr5.size();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    java.lang.String str15 = stackAr14.toString();
    boolean b16 = stackAr14.isEmpty();
    int i17 = stackAr14.size();
    boolean b18 = stackAr5.equals((java.lang.Object)i17);
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b22 = stackAr21.isFull();
    boolean b23 = stackAr21.isFull();
    boolean b24 = stackAr19.equals((java.lang.Object)b23);
    boolean b25 = stackAr5.equals((java.lang.Object)b24);
    java.lang.Object obj26 = stackAr5.top();
    boolean b27 = stackAr0.equals(obj26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "hi!"+ "'", obj26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)' ');
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stackAr1.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj14 = stackAr5.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    int i3 = stackAr0.size();
    int i4 = stackAr0.size();
    int i5 = stackAr0.size();
    boolean b6 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr(10);
    java.lang.String str2 = stackAr1.toString();
    boolean b3 = stackAr1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.String str6 = stackAr0.toString();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isEmpty();
    java.lang.String str9 = stackAr7.toString();
    java.lang.String str10 = stackAr7.toString();
    boolean b11 = stackAr7.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isEmpty();
    java.lang.String str14 = stackAr12.toString();
    java.lang.String str15 = stackAr12.toString();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isFull();
    boolean b18 = stackAr12.equals((java.lang.Object)stackAr16);
    boolean b19 = stackAr12.isFull();
    stackAr7.push((java.lang.Object)stackAr12);
    boolean b21 = stackAr0.equals((java.lang.Object)stackAr7);
    int i22 = stackAr7.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[10]"+ "'", str6.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr0.equals((java.lang.Object)stackAr4);
    int i7 = stackAr4.size();
    boolean b9 = stackAr4.equals((java.lang.Object)10);
    int i10 = stackAr4.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    java.lang.String str6 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    java.lang.String str30 = stackAr23.toString();
    stackAr17.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    java.lang.String str38 = stackAr36.toString();
    java.lang.String str39 = stackAr36.toString();
    int i40 = stackAr36.size();
    boolean b41 = stackAr34.equals((java.lang.Object)stackAr36);
    stackAr32.push((java.lang.Object)stackAr36);
    int i43 = stackAr32.size();
    stackAr23.push((java.lang.Object)i43);
    boolean b45 = stackAr3.equals((java.lang.Object)stackAr23);
    java.lang.String str46 = stackAr23.toString();
    boolean b47 = stackAr23.isFull();
    java.lang.Object obj48 = stackAr23.top();
    java.lang.String str49 = stackAr23.toString();
    java.lang.String str50 = stackAr23.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[1]"+ "'", str46.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 1+ "'", obj48.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[1]"+ "'", str49.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "[1]"+ "'", str50.equals("[1]"));

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(short)0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isEmpty();
    java.lang.String str8 = stackAr6.toString();
    java.lang.String str9 = stackAr6.toString();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    boolean b12 = stackAr6.equals((java.lang.Object)stackAr10);
    java.lang.String str13 = stackAr6.toString();
    stackAr0.push((java.lang.Object)stackAr6);
    boolean b15 = stackAr6.isFull();
    boolean b16 = stackAr6.isEmpty();
    java.lang.String str17 = stackAr6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    boolean b11 = stackAr8.isFull();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b14 = stackAr12.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    java.lang.String str17 = stackAr15.toString();
    boolean b18 = stackAr15.isEmpty();
    boolean b19 = stackAr15.isEmpty();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    java.lang.String str22 = stackAr20.toString();
    boolean b23 = stackAr20.isEmpty();
    stackAr20.push((java.lang.Object)10);
    java.lang.String str26 = stackAr20.toString();
    stackAr15.push((java.lang.Object)stackAr20);
    stackAr12.push((java.lang.Object)stackAr15);
    org.autotest.StackAr stackAr29 = new org.autotest.StackAr();
    boolean b30 = stackAr29.isEmpty();
    org.autotest.StackAr stackAr31 = new org.autotest.StackAr();
    boolean b32 = stackAr31.isFull();
    boolean b33 = stackAr31.isFull();
    boolean b34 = stackAr29.equals((java.lang.Object)b33);
    org.autotest.StackAr stackAr35 = new org.autotest.StackAr();
    boolean b36 = stackAr35.isEmpty();
    java.lang.String str37 = stackAr35.toString();
    java.lang.String str38 = stackAr35.toString();
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isFull();
    boolean b41 = stackAr35.equals((java.lang.Object)stackAr39);
    java.lang.String str42 = stackAr35.toString();
    stackAr29.push((java.lang.Object)stackAr35);
    org.autotest.StackAr stackAr44 = new org.autotest.StackAr();
    boolean b45 = stackAr44.isFull();
    org.autotest.StackAr stackAr46 = new org.autotest.StackAr();
    boolean b47 = stackAr46.isEmpty();
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isEmpty();
    java.lang.String str50 = stackAr48.toString();
    java.lang.String str51 = stackAr48.toString();
    int i52 = stackAr48.size();
    boolean b53 = stackAr46.equals((java.lang.Object)stackAr48);
    stackAr44.push((java.lang.Object)stackAr48);
    int i55 = stackAr44.size();
    stackAr35.push((java.lang.Object)i55);
    boolean b57 = stackAr15.equals((java.lang.Object)stackAr35);
    org.autotest.StackAr stackAr59 = new org.autotest.StackAr((int)'4');
    stackAr35.push((java.lang.Object)'4');
    java.lang.Object obj61 = null;
    boolean b62 = stackAr35.equals(obj61);
    stackAr8.push(obj61);
    java.lang.Object obj64 = stackAr8.pop();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[10]"+ "'", str26.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[]"+ "'", str37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[]"+ "'", str42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "[]"+ "'", str50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[]"+ "'", str51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj64);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    int i11 = stackAr0.size();
    boolean b12 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isFull();
    java.lang.String str8 = stackAr6.toString();
    boolean b9 = stackAr6.isEmpty();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isEmpty();
    java.lang.String str12 = stackAr10.toString();
    java.lang.String str13 = stackAr10.toString();
    int i14 = stackAr10.size();
    stackAr6.push((java.lang.Object)i14);
    java.lang.Object obj16 = stackAr6.top();
    stackAr0.push((java.lang.Object)stackAr6);
    int i18 = stackAr0.size();
    java.lang.Object obj19 = stackAr0.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    int i4 = stackAr0.size();
    int i5 = stackAr0.size();
    boolean b6 = stackAr0.isFull();
    boolean b7 = stackAr0.isFull();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int)(byte)100);
    java.lang.String str10 = stackAr9.toString();
    java.lang.String str11 = stackAr9.toString();
    java.lang.Object obj12 = null;
    boolean b13 = stackAr9.equals(obj12);
    stackAr0.push((java.lang.Object)stackAr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)100.0d);
    boolean b6 = stackAr0.isEmpty();
    java.lang.String str7 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[100.0]"+ "'", str7.equals("[100.0]"));

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    java.lang.String str1 = stackAr0.toString();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    boolean b7 = stackAr5.isFull();
    boolean b8 = stackAr3.equals((java.lang.Object)b7);
    int i9 = stackAr3.size();
    stackAr0.push((java.lang.Object)i9);
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int)'4');
    int i13 = stackAr12.size();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isEmpty();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isFull();
    boolean b18 = stackAr16.isFull();
    boolean b19 = stackAr14.equals((java.lang.Object)b18);
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    java.lang.String str22 = stackAr20.toString();
    boolean b23 = stackAr20.isEmpty();
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
    boolean b25 = stackAr24.isEmpty();
    java.lang.String str26 = stackAr24.toString();
    java.lang.String str27 = stackAr24.toString();
    int i28 = stackAr24.size();
    stackAr20.push((java.lang.Object)i28);
    java.lang.Object obj30 = stackAr20.top();
    stackAr14.push((java.lang.Object)stackAr20);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b34 = stackAr32.equals((java.lang.Object)0);
    stackAr32.push((java.lang.Object)"[]");
    stackAr20.push((java.lang.Object)"[]");
    stackAr12.push((java.lang.Object)stackAr20);
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isEmpty();
    java.lang.String str41 = stackAr39.toString();
    org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int)(byte)100);
    boolean b44 = stackAr39.equals((java.lang.Object)stackAr43);
    org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str47 = stackAr46.toString();
    stackAr39.push((java.lang.Object)str47);
    java.lang.String str49 = stackAr39.toString();
    org.autotest.StackAr stackAr50 = new org.autotest.StackAr();
    boolean b51 = stackAr50.isEmpty();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isEmpty();
    java.lang.String str54 = stackAr52.toString();
    java.lang.String str55 = stackAr52.toString();
    int i56 = stackAr52.size();
    boolean b57 = stackAr50.equals((java.lang.Object)stackAr52);
    stackAr39.push((java.lang.Object)stackAr50);
    stackAr12.push((java.lang.Object)stackAr50);
    stackAr0.push((java.lang.Object)stackAr12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[]"+ "'", str27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 0+ "'", obj30.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[]"+ "'", str41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "[]"+ "'", str47.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[[]]"+ "'", str49.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[]"+ "'", str54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "[]"+ "'", str55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(short)100);
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr4.isFull();
    boolean b7 = stackAr2.equals((java.lang.Object)b6);
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isEmpty();
    java.lang.String str10 = stackAr8.toString();
    java.lang.String str11 = stackAr8.toString();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isFull();
    boolean b14 = stackAr8.equals((java.lang.Object)stackAr12);
    java.lang.String str15 = stackAr8.toString();
    stackAr2.push((java.lang.Object)stackAr8);
    boolean b17 = stackAr8.isFull();
    boolean b18 = stackAr8.isFull();
    stackAr1.push((java.lang.Object)stackAr8);
    boolean b20 = stackAr1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    stackAr4.push((java.lang.Object)10);
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr4);
    java.lang.Object obj11 = stackAr4.top();
    boolean b12 = stackAr4.isEmpty();
    boolean b13 = stackAr4.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 10+ "'", obj11.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    boolean b2 = stackAr1.isEmpty();
    boolean b3 = stackAr1.isEmpty();
    boolean b5 = stackAr1.equals((java.lang.Object)(-1));
    int i6 = stackAr1.size();
    stackAr1.push((java.lang.Object)"hi!");
    int i9 = stackAr1.size();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    java.lang.String str11 = stackAr10.toString();
    boolean b12 = stackAr10.isEmpty();
    int i13 = stackAr10.size();
    boolean b14 = stackAr1.equals((java.lang.Object)i13);
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isFull();
    boolean b19 = stackAr17.isFull();
    boolean b20 = stackAr15.equals((java.lang.Object)b19);
    boolean b21 = stackAr1.equals((java.lang.Object)b20);
    java.lang.Object obj22 = stackAr1.top();
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    stackAr23.push((java.lang.Object)(-1.0f));
    stackAr1.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr30 = new org.autotest.StackAr();
    boolean b31 = stackAr30.isEmpty();
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    boolean b34 = stackAr32.isFull();
    boolean b35 = stackAr30.equals((java.lang.Object)b34);
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    java.lang.String str38 = stackAr36.toString();
    java.lang.String str39 = stackAr36.toString();
    org.autotest.StackAr stackAr40 = new org.autotest.StackAr();
    boolean b41 = stackAr40.isFull();
    boolean b42 = stackAr36.equals((java.lang.Object)stackAr40);
    java.lang.String str43 = stackAr36.toString();
    stackAr30.push((java.lang.Object)stackAr36);
    boolean b45 = stackAr36.isFull();
    boolean b46 = stackAr36.isFull();
    stackAr1.push((java.lang.Object)b46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "hi!"+ "'", obj22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[]"+ "'", str43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isEmpty();
    java.lang.String str8 = stackAr6.toString();
    java.lang.String str9 = stackAr6.toString();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    boolean b12 = stackAr6.equals((java.lang.Object)stackAr10);
    java.lang.String str13 = stackAr6.toString();
    stackAr0.push((java.lang.Object)stackAr6);
    boolean b15 = stackAr6.isFull();
    boolean b16 = stackAr6.isFull();
    int i17 = stackAr6.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj18 = stackAr6.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)100.0d);
    boolean b6 = stackAr0.isEmpty();
    java.lang.Object obj7 = stackAr0.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 100.0d+ "'", obj7.equals(100.0d));

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str2 = stackAr1.toString();
    boolean b3 = stackAr1.isEmpty();
    boolean b4 = stackAr1.isEmpty();
    java.lang.String str5 = stackAr1.toString();
    int i6 = stackAr1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b7 = stackAr3.equals((java.lang.Object)(-1));
    boolean b8 = stackAr0.equals((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str11 = stackAr10.toString();
    stackAr3.push((java.lang.Object)str11);
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isFull();
    java.lang.String str15 = stackAr13.toString();
    boolean b16 = stackAr13.isEmpty();
    boolean b17 = stackAr13.isEmpty();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isFull();
    java.lang.String str20 = stackAr18.toString();
    boolean b21 = stackAr18.isEmpty();
    stackAr18.push((java.lang.Object)10);
    java.lang.String str24 = stackAr18.toString();
    stackAr13.push((java.lang.Object)stackAr18);
    java.lang.String str26 = stackAr18.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr27.isFull();
    java.lang.String str30 = stackAr27.toString();
    boolean b31 = stackAr27.isEmpty();
    stackAr18.push((java.lang.Object)stackAr27);
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int)' ');
    boolean b35 = stackAr34.isEmpty();
    stackAr18.push((java.lang.Object)stackAr34);
    boolean b37 = stackAr3.equals((java.lang.Object)stackAr18);
    boolean b38 = stackAr18.isEmpty();
    int i39 = stackAr18.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[10]"+ "'", str24.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[10]"+ "'", str26.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 3);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    java.lang.String str17 = stackAr3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[[10]]"+ "'", str17.equals("[[10]]"));

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    stackAr0.push((java.lang.Object)i8);
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isEmpty();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isEmpty();
    java.lang.String str16 = stackAr14.toString();
    java.lang.String str17 = stackAr14.toString();
    int i18 = stackAr14.size();
    boolean b19 = stackAr12.equals((java.lang.Object)stackAr14);
    stackAr10.push((java.lang.Object)stackAr14);
    boolean b21 = stackAr10.isEmpty();
    boolean b22 = stackAr0.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    org.autotest.StackAr stackAr25 = new org.autotest.StackAr();
    boolean b26 = stackAr25.isEmpty();
    java.lang.String str27 = stackAr25.toString();
    java.lang.String str28 = stackAr25.toString();
    int i29 = stackAr25.size();
    boolean b30 = stackAr23.equals((java.lang.Object)stackAr25);
    int i31 = stackAr23.size();
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isEmpty();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isFull();
    boolean b36 = stackAr34.isFull();
    boolean b37 = stackAr32.equals((java.lang.Object)b36);
    org.autotest.StackAr stackAr38 = new org.autotest.StackAr();
    boolean b39 = stackAr38.isEmpty();
    java.lang.String str40 = stackAr38.toString();
    java.lang.String str41 = stackAr38.toString();
    org.autotest.StackAr stackAr42 = new org.autotest.StackAr();
    boolean b43 = stackAr42.isFull();
    boolean b44 = stackAr38.equals((java.lang.Object)stackAr42);
    java.lang.String str45 = stackAr38.toString();
    stackAr32.push((java.lang.Object)stackAr38);
    boolean b47 = stackAr23.equals((java.lang.Object)stackAr32);
    stackAr0.push((java.lang.Object)stackAr32);
    boolean b49 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[]"+ "'", str27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[]"+ "'", str40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[]"+ "'", str41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[]"+ "'", str45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    boolean b8 = stackAr4.isEmpty();
    stackAr0.push((java.lang.Object)b8);
    boolean b10 = stackAr0.isFull();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    int i14 = stackAr11.size();
    stackAr0.push((java.lang.Object)i14);
    int i16 = stackAr0.size();
    boolean b17 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.String str6 = stackAr0.toString();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b9 = stackAr7.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    java.lang.String str12 = stackAr10.toString();
    boolean b13 = stackAr10.isEmpty();
    boolean b14 = stackAr10.isEmpty();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    java.lang.String str17 = stackAr15.toString();
    boolean b18 = stackAr15.isEmpty();
    stackAr15.push((java.lang.Object)10);
    java.lang.String str21 = stackAr15.toString();
    stackAr10.push((java.lang.Object)stackAr15);
    stackAr7.push((java.lang.Object)stackAr10);
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
    boolean b25 = stackAr24.isEmpty();
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isFull();
    boolean b28 = stackAr26.isFull();
    boolean b29 = stackAr24.equals((java.lang.Object)b28);
    org.autotest.StackAr stackAr30 = new org.autotest.StackAr();
    boolean b31 = stackAr30.isEmpty();
    java.lang.String str32 = stackAr30.toString();
    java.lang.String str33 = stackAr30.toString();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isFull();
    boolean b36 = stackAr30.equals((java.lang.Object)stackAr34);
    java.lang.String str37 = stackAr30.toString();
    stackAr24.push((java.lang.Object)stackAr30);
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isFull();
    org.autotest.StackAr stackAr41 = new org.autotest.StackAr();
    boolean b42 = stackAr41.isEmpty();
    org.autotest.StackAr stackAr43 = new org.autotest.StackAr();
    boolean b44 = stackAr43.isEmpty();
    java.lang.String str45 = stackAr43.toString();
    java.lang.String str46 = stackAr43.toString();
    int i47 = stackAr43.size();
    boolean b48 = stackAr41.equals((java.lang.Object)stackAr43);
    stackAr39.push((java.lang.Object)stackAr43);
    int i50 = stackAr39.size();
    stackAr30.push((java.lang.Object)i50);
    boolean b52 = stackAr10.equals((java.lang.Object)stackAr30);
    org.autotest.StackAr stackAr54 = new org.autotest.StackAr((int)'4');
    stackAr30.push((java.lang.Object)'4');
    boolean b56 = stackAr0.equals((java.lang.Object)'4');
    org.autotest.StackAr stackAr57 = new org.autotest.StackAr();
    boolean b58 = stackAr57.isFull();
    java.lang.String str59 = stackAr57.toString();
    boolean b60 = stackAr57.isEmpty();
    boolean b61 = stackAr57.isEmpty();
    org.autotest.StackAr stackAr62 = new org.autotest.StackAr();
    boolean b63 = stackAr62.isFull();
    java.lang.String str64 = stackAr62.toString();
    boolean b65 = stackAr62.isEmpty();
    stackAr62.push((java.lang.Object)10);
    java.lang.String str68 = stackAr62.toString();
    stackAr57.push((java.lang.Object)stackAr62);
    boolean b70 = stackAr57.isEmpty();
    org.autotest.StackAr stackAr71 = new org.autotest.StackAr();
    boolean b72 = stackAr71.isEmpty();
    java.lang.String str73 = stackAr71.toString();
    java.lang.String str74 = stackAr71.toString();
    stackAr71.push((java.lang.Object)(-1.0f));
    stackAr57.push((java.lang.Object)stackAr71);
    boolean b78 = stackAr71.isEmpty();
    java.lang.String str79 = stackAr71.toString();
    org.autotest.StackAr stackAr81 = new org.autotest.StackAr((int)' ');
    stackAr71.push((java.lang.Object)' ');
    boolean b83 = stackAr0.equals((java.lang.Object)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[10]"+ "'", str6.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[10]"+ "'", str21.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[]"+ "'", str32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[]"+ "'", str33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[]"+ "'", str37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[]"+ "'", str45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[]"+ "'", str46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[]"+ "'", str59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "[]"+ "'", str64.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "[10]"+ "'", str68.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "[]"+ "'", str73.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "[]"+ "'", str74.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "[-1.0]"+ "'", str79.equals("[-1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    int i14 = stackAr5.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj5 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    boolean b3 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)'4');
    int i2 = stackAr1.size();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    boolean b7 = stackAr5.isFull();
    boolean b8 = stackAr3.equals((java.lang.Object)b7);
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    java.lang.String str11 = stackAr9.toString();
    boolean b12 = stackAr9.isEmpty();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isEmpty();
    java.lang.String str15 = stackAr13.toString();
    java.lang.String str16 = stackAr13.toString();
    int i17 = stackAr13.size();
    stackAr9.push((java.lang.Object)i17);
    java.lang.Object obj19 = stackAr9.top();
    stackAr3.push((java.lang.Object)stackAr9);
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b23 = stackAr21.equals((java.lang.Object)0);
    stackAr21.push((java.lang.Object)"[]");
    stackAr9.push((java.lang.Object)"[]");
    stackAr1.push((java.lang.Object)stackAr9);
    java.lang.String str28 = stackAr9.toString();
    org.autotest.StackAr stackAr29 = new org.autotest.StackAr();
    boolean b30 = stackAr29.isEmpty();
    java.lang.String str31 = stackAr29.toString();
    org.autotest.StackAr stackAr33 = new org.autotest.StackAr((int)(byte)100);
    boolean b34 = stackAr29.equals((java.lang.Object)stackAr33);
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str37 = stackAr36.toString();
    stackAr29.push((java.lang.Object)str37);
    java.lang.String str39 = stackAr29.toString();
    boolean b40 = stackAr9.equals((java.lang.Object)stackAr29);
    boolean b41 = stackAr29.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 0+ "'", obj19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[0,[]]"+ "'", str28.equals("[0,[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[]"+ "'", str31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[]"+ "'", str37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[[]]"+ "'", str39.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isFull();
    java.lang.String str8 = stackAr6.toString();
    boolean b9 = stackAr6.isEmpty();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isEmpty();
    java.lang.String str12 = stackAr10.toString();
    java.lang.String str13 = stackAr10.toString();
    int i14 = stackAr10.size();
    stackAr6.push((java.lang.Object)i14);
    java.lang.Object obj16 = stackAr6.top();
    stackAr0.push((java.lang.Object)stackAr6);
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isFull();
    java.lang.String str20 = stackAr18.toString();
    boolean b21 = stackAr18.isEmpty();
    boolean b22 = stackAr18.isEmpty();
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isFull();
    java.lang.String str25 = stackAr23.toString();
    boolean b26 = stackAr23.isEmpty();
    stackAr23.push((java.lang.Object)10);
    java.lang.String str29 = stackAr23.toString();
    stackAr18.push((java.lang.Object)stackAr23);
    boolean b31 = stackAr18.isEmpty();
    boolean b32 = stackAr6.equals((java.lang.Object)b31);
    boolean b33 = stackAr6.isFull();
    boolean b34 = stackAr6.isEmpty();
    org.autotest.StackAr stackAr35 = new org.autotest.StackAr();
    boolean b36 = stackAr35.isFull();
    org.autotest.StackAr stackAr37 = new org.autotest.StackAr();
    boolean b38 = stackAr37.isEmpty();
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isEmpty();
    java.lang.String str41 = stackAr39.toString();
    java.lang.String str42 = stackAr39.toString();
    int i43 = stackAr39.size();
    boolean b44 = stackAr37.equals((java.lang.Object)stackAr39);
    stackAr35.push((java.lang.Object)stackAr39);
    int i46 = stackAr35.size();
    java.lang.Object obj47 = stackAr35.top();
    java.lang.String str48 = stackAr35.toString();
    boolean b49 = stackAr35.isFull();
    boolean b50 = stackAr6.equals((java.lang.Object)b49);
    java.lang.String str51 = stackAr6.toString();
    java.lang.Object obj52 = stackAr6.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[10]"+ "'", str29.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[]"+ "'", str41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[]"+ "'", str42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "[[]]"+ "'", str48.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[0]"+ "'", str51.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + 0+ "'", obj52.equals(0));

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    boolean b13 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isEmpty();
    java.lang.String str16 = stackAr14.toString();
    java.lang.String str17 = stackAr14.toString();
    stackAr14.push((java.lang.Object)(-1.0f));
    stackAr0.push((java.lang.Object)stackAr14);
    java.lang.Object obj21 = stackAr0.top();
    int i22 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 2);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    java.lang.String str14 = stackAr11.toString();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    boolean b17 = stackAr11.equals((java.lang.Object)stackAr15);
    int i18 = stackAr15.size();
    stackAr8.push((java.lang.Object)stackAr15);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj20 = stackAr15.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isFull();
    java.lang.String str8 = stackAr6.toString();
    boolean b9 = stackAr6.isEmpty();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isEmpty();
    java.lang.String str12 = stackAr10.toString();
    java.lang.String str13 = stackAr10.toString();
    int i14 = stackAr10.size();
    stackAr6.push((java.lang.Object)i14);
    java.lang.Object obj16 = stackAr6.top();
    stackAr0.push((java.lang.Object)stackAr6);
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b20 = stackAr18.equals((java.lang.Object)0);
    stackAr18.push((java.lang.Object)"[]");
    stackAr6.push((java.lang.Object)"[]");
    java.lang.Object obj24 = stackAr6.top();
    boolean b25 = stackAr6.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "[]"+ "'", obj24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isFull();
    boolean b16 = stackAr14.isFull();
    java.lang.String str17 = stackAr14.toString();
    boolean b18 = stackAr14.isEmpty();
    stackAr5.push((java.lang.Object)stackAr14);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj20 = stackAr14.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    stackAr0.push((java.lang.Object)i8);
    int i10 = stackAr0.size();
    int i11 = stackAr0.size();
    java.lang.Object obj12 = stackAr0.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 0+ "'", obj12.equals(0));

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    boolean b6 = stackAr0.isFull();
    java.lang.String str7 = stackAr0.toString();
    boolean b8 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10]"+ "'", str7.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr(3);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    int i4 = stackAr0.size();
    boolean b5 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    java.lang.Object obj6 = null;
    boolean b7 = stackAr0.equals(obj6);
    java.lang.String str8 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    java.lang.String str1 = stackAr0.toString();
    boolean b2 = stackAr0.isEmpty();
    java.lang.String str3 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    int i3 = stackAr0.size();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    boolean b7 = stackAr5.isEmpty();
    int i8 = stackAr5.size();
    stackAr0.push((java.lang.Object)i8);
    java.lang.String str10 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[0]"+ "'", str10.equals("[0]"));

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b10 = stackAr7.isEmpty();
    stackAr7.push((java.lang.Object)10);
    java.lang.Object obj13 = stackAr7.top();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int)'4');
    boolean b16 = stackAr15.isFull();
    boolean b17 = stackAr7.equals((java.lang.Object)stackAr15);
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    java.lang.String str20 = stackAr18.toString();
    java.lang.String str21 = stackAr18.toString();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    boolean b24 = stackAr18.equals((java.lang.Object)stackAr22);
    int i25 = stackAr22.size();
    stackAr15.push((java.lang.Object)stackAr22);
    stackAr0.push((java.lang.Object)stackAr22);
    org.autotest.StackAr stackAr28 = new org.autotest.StackAr();
    boolean b29 = stackAr28.isFull();
    java.lang.String str30 = stackAr28.toString();
    boolean b31 = stackAr28.isEmpty();
    boolean b32 = stackAr28.isEmpty();
    boolean b33 = stackAr28.isEmpty();
    int i34 = stackAr28.size();
    int i35 = stackAr28.size();
    stackAr22.push((java.lang.Object)stackAr28);
    org.autotest.StackAr stackAr37 = new org.autotest.StackAr();
    boolean b38 = stackAr37.isEmpty();
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isFull();
    boolean b41 = stackAr39.isFull();
    boolean b42 = stackAr37.equals((java.lang.Object)b41);
    org.autotest.StackAr stackAr43 = new org.autotest.StackAr();
    boolean b44 = stackAr43.isEmpty();
    java.lang.String str45 = stackAr43.toString();
    java.lang.String str46 = stackAr43.toString();
    org.autotest.StackAr stackAr47 = new org.autotest.StackAr();
    boolean b48 = stackAr47.isFull();
    boolean b49 = stackAr43.equals((java.lang.Object)stackAr47);
    boolean b50 = stackAr37.equals((java.lang.Object)stackAr43);
    int i51 = stackAr43.size();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isEmpty();
    java.lang.String str54 = stackAr52.toString();
    int i55 = stackAr52.size();
    boolean b56 = stackAr52.isFull();
    boolean b57 = stackAr43.equals((java.lang.Object)stackAr52);
    java.lang.String str58 = stackAr43.toString();
    stackAr28.push((java.lang.Object)str58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 10+ "'", obj13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[]"+ "'", str45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[]"+ "'", str46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[]"+ "'", str54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "[]"+ "'", str58.equals("[]"));

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b7 = stackAr3.equals((java.lang.Object)(-1));
    boolean b8 = stackAr0.equals((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isEmpty();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isFull();
    boolean b13 = stackAr11.isFull();
    boolean b14 = stackAr9.equals((java.lang.Object)b13);
    int i15 = stackAr9.size();
    boolean b16 = stackAr9.isEmpty();
    stackAr3.push((java.lang.Object)stackAr9);
    boolean b18 = stackAr9.isEmpty();
    java.lang.String str19 = stackAr9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    int i8 = stackAr0.size();
    boolean b9 = stackAr0.isEmpty();
    boolean b10 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isFull();
    boolean b15 = stackAr13.isFull();
    boolean b16 = stackAr11.equals((java.lang.Object)b15);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isFull();
    java.lang.String str19 = stackAr17.toString();
    boolean b20 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b22 = stackAr21.isEmpty();
    java.lang.String str23 = stackAr21.toString();
    java.lang.String str24 = stackAr21.toString();
    int i25 = stackAr21.size();
    stackAr17.push((java.lang.Object)i25);
    java.lang.Object obj27 = stackAr17.top();
    stackAr11.push((java.lang.Object)stackAr17);
    org.autotest.StackAr stackAr29 = new org.autotest.StackAr();
    boolean b31 = stackAr29.equals((java.lang.Object)0);
    stackAr29.push((java.lang.Object)"[]");
    stackAr17.push((java.lang.Object)"[]");
    java.lang.Object obj35 = stackAr17.top();
    boolean b36 = stackAr0.equals((java.lang.Object)stackAr17);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj37 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 0+ "'", obj27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "[]"+ "'", obj35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    int i2 = stackAr0.size();
    int i3 = stackAr0.size();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    int i7 = stackAr5.size();
    stackAr0.push((java.lang.Object)i7);
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int)(byte)100);
    boolean b11 = stackAr10.isEmpty();
    stackAr0.push((java.lang.Object)stackAr10);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj13 = stackAr10.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    int i5 = stackAr0.size();
    int i6 = stackAr0.size();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)(byte)10);
    boolean b9 = stackAr0.equals((java.lang.Object)stackAr8);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr(1);
    java.lang.Object obj12 = null;
    stackAr11.push(obj12);
    boolean b14 = stackAr0.equals((java.lang.Object)stackAr11);
    boolean b15 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj16 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isEmpty();
    java.lang.String str8 = stackAr6.toString();
    java.lang.String str9 = stackAr6.toString();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    boolean b12 = stackAr6.equals((java.lang.Object)stackAr10);
    boolean b13 = stackAr0.equals((java.lang.Object)stackAr6);
    boolean b14 = stackAr6.isEmpty();
    boolean b15 = stackAr6.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    boolean b5 = stackAr0.isEmpty();
    int i6 = stackAr0.size();
    int i7 = stackAr0.size();
    boolean b8 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    java.lang.Object obj14 = stackAr5.top();
    java.lang.Object obj15 = stackAr5.top();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isEmpty();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    java.lang.String str20 = stackAr18.toString();
    java.lang.String str21 = stackAr18.toString();
    int i22 = stackAr18.size();
    boolean b23 = stackAr16.equals((java.lang.Object)stackAr18);
    boolean b24 = stackAr18.isFull();
    int i25 = stackAr18.size();
    stackAr5.push((java.lang.Object)i25);
    java.lang.Object obj27 = stackAr5.top();
    boolean b28 = stackAr5.isFull();
    org.autotest.StackAr stackAr29 = new org.autotest.StackAr();
    boolean b30 = stackAr29.isEmpty();
    boolean b31 = stackAr29.isEmpty();
    boolean b32 = stackAr5.equals((java.lang.Object)b31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10+ "'", obj14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 10+ "'", obj15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 0+ "'", obj27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    int i6 = stackAr0.size();
    boolean b7 = stackAr0.isFull();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isEmpty();
    java.lang.String str10 = stackAr8.toString();
    java.lang.String str11 = stackAr8.toString();
    boolean b12 = stackAr8.isEmpty();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isEmpty();
    java.lang.String str15 = stackAr13.toString();
    java.lang.String str16 = stackAr13.toString();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isFull();
    boolean b19 = stackAr13.equals((java.lang.Object)stackAr17);
    boolean b20 = stackAr13.isFull();
    stackAr8.push((java.lang.Object)stackAr13);
    stackAr0.push((java.lang.Object)stackAr13);
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int)(short)10);
    boolean b25 = stackAr24.isEmpty();
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isFull();
    boolean b28 = stackAr26.isFull();
    boolean b30 = stackAr26.equals((java.lang.Object)10.0f);
    int i31 = stackAr26.size();
    int i32 = stackAr26.size();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int)(byte)10);
    boolean b35 = stackAr26.equals((java.lang.Object)stackAr34);
    stackAr24.push((java.lang.Object)b35);
    boolean b37 = stackAr24.isEmpty();
    stackAr13.push((java.lang.Object)stackAr24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)'4');
    int i2 = stackAr1.size();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    boolean b7 = stackAr5.isFull();
    boolean b8 = stackAr3.equals((java.lang.Object)b7);
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    java.lang.String str11 = stackAr9.toString();
    boolean b12 = stackAr9.isEmpty();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isEmpty();
    java.lang.String str15 = stackAr13.toString();
    java.lang.String str16 = stackAr13.toString();
    int i17 = stackAr13.size();
    stackAr9.push((java.lang.Object)i17);
    java.lang.Object obj19 = stackAr9.top();
    stackAr3.push((java.lang.Object)stackAr9);
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b23 = stackAr21.equals((java.lang.Object)0);
    stackAr21.push((java.lang.Object)"[]");
    stackAr9.push((java.lang.Object)"[]");
    stackAr1.push((java.lang.Object)stackAr9);
    org.autotest.StackAr stackAr28 = new org.autotest.StackAr();
    boolean b29 = stackAr28.isEmpty();
    java.lang.String str30 = stackAr28.toString();
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int)(byte)100);
    boolean b33 = stackAr28.equals((java.lang.Object)stackAr32);
    org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str36 = stackAr35.toString();
    stackAr28.push((java.lang.Object)str36);
    java.lang.String str38 = stackAr28.toString();
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isEmpty();
    org.autotest.StackAr stackAr41 = new org.autotest.StackAr();
    boolean b42 = stackAr41.isEmpty();
    java.lang.String str43 = stackAr41.toString();
    java.lang.String str44 = stackAr41.toString();
    int i45 = stackAr41.size();
    boolean b46 = stackAr39.equals((java.lang.Object)stackAr41);
    stackAr28.push((java.lang.Object)stackAr39);
    stackAr1.push((java.lang.Object)stackAr39);
    org.autotest.StackAr stackAr49 = new org.autotest.StackAr();
    boolean b50 = stackAr49.isEmpty();
    java.lang.String str51 = stackAr49.toString();
    org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int)(byte)100);
    boolean b54 = stackAr49.equals((java.lang.Object)stackAr53);
    org.autotest.StackAr stackAr56 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str57 = stackAr56.toString();
    stackAr49.push((java.lang.Object)str57);
    java.lang.String str59 = stackAr49.toString();
    org.autotest.StackAr stackAr60 = new org.autotest.StackAr();
    boolean b61 = stackAr60.isEmpty();
    boolean b62 = stackAr60.isEmpty();
    int i63 = stackAr60.size();
    boolean b64 = stackAr49.equals((java.lang.Object)i63);
    java.lang.Object obj65 = stackAr49.top();
    boolean b66 = stackAr49.isFull();
    java.lang.Object obj67 = stackAr49.top();
    org.autotest.StackAr stackAr68 = new org.autotest.StackAr();
    boolean b69 = stackAr68.isFull();
    java.lang.String str70 = stackAr68.toString();
    java.lang.Object obj71 = null;
    boolean b72 = stackAr68.equals(obj71);
    stackAr49.push((java.lang.Object)b72);
    stackAr39.push((java.lang.Object)stackAr49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 0+ "'", obj19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[]"+ "'", str36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[[]]"+ "'", str38.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[]"+ "'", str43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "[]"+ "'", str44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[]"+ "'", str51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[]"+ "'", str57.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[[]]"+ "'", str59.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj65 + "' != '" + "[]"+ "'", obj65.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj67 + "' != '" + "[]"+ "'", obj67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "[]"+ "'", str70.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.String str6 = stackAr0.toString();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isEmpty();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    java.lang.String str14 = stackAr11.toString();
    int i15 = stackAr11.size();
    boolean b16 = stackAr9.equals((java.lang.Object)stackAr11);
    stackAr7.push((java.lang.Object)stackAr11);
    int i18 = stackAr7.size();
    java.lang.Object obj19 = stackAr7.top();
    stackAr0.push((java.lang.Object)stackAr7);
    int i21 = stackAr7.size();
    int i22 = stackAr7.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[10]"+ "'", str6.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int)(byte)100);
    java.lang.String str10 = stackAr9.toString();
    stackAr0.push((java.lang.Object)str10);
    java.lang.String str12 = stackAr0.toString();
    boolean b13 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[[]]"+ "'", str12.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    boolean b13 = stackAr0.isEmpty();
    boolean b14 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(short)100);
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    java.lang.String str4 = stackAr2.toString();
    boolean b5 = stackAr2.isEmpty();
    stackAr2.push((java.lang.Object)100.0d);
    java.lang.String str8 = stackAr2.toString();
    stackAr1.push((java.lang.Object)str8);
    int i10 = stackAr1.size();
    boolean b11 = stackAr1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[100.0]"+ "'", str8.equals("[100.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    boolean b14 = stackAr5.equals((java.lang.Object)(byte)10);
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    boolean b17 = stackAr15.isEmpty();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isFull();
    java.lang.String str20 = stackAr18.toString();
    boolean b22 = stackAr18.equals((java.lang.Object)(-1));
    boolean b23 = stackAr15.equals((java.lang.Object)stackAr18);
    org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str26 = stackAr25.toString();
    stackAr18.push((java.lang.Object)str26);
    org.autotest.StackAr stackAr28 = new org.autotest.StackAr();
    boolean b29 = stackAr28.isFull();
    java.lang.String str30 = stackAr28.toString();
    boolean b31 = stackAr28.isEmpty();
    boolean b32 = stackAr28.isEmpty();
    org.autotest.StackAr stackAr33 = new org.autotest.StackAr();
    boolean b34 = stackAr33.isFull();
    java.lang.String str35 = stackAr33.toString();
    boolean b36 = stackAr33.isEmpty();
    stackAr33.push((java.lang.Object)10);
    java.lang.String str39 = stackAr33.toString();
    stackAr28.push((java.lang.Object)stackAr33);
    java.lang.String str41 = stackAr33.toString();
    org.autotest.StackAr stackAr42 = new org.autotest.StackAr();
    boolean b43 = stackAr42.isFull();
    boolean b44 = stackAr42.isFull();
    java.lang.String str45 = stackAr42.toString();
    boolean b46 = stackAr42.isEmpty();
    stackAr33.push((java.lang.Object)stackAr42);
    org.autotest.StackAr stackAr49 = new org.autotest.StackAr((int)' ');
    boolean b50 = stackAr49.isEmpty();
    stackAr33.push((java.lang.Object)stackAr49);
    boolean b52 = stackAr18.equals((java.lang.Object)stackAr33);
    java.lang.String str53 = stackAr18.toString();
    boolean b54 = stackAr18.isFull();
    boolean b55 = stackAr5.equals((java.lang.Object)b54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[]"+ "'", str35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[10]"+ "'", str39.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[10]"+ "'", str41.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[]"+ "'", str45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[[]]"+ "'", str53.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str2 = stackAr1.toString();
    boolean b3 = stackAr1.isEmpty();
    java.lang.String str4 = stackAr1.toString();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isEmpty();
    java.lang.String str9 = stackAr7.toString();
    java.lang.String str10 = stackAr7.toString();
    int i11 = stackAr7.size();
    boolean b12 = stackAr5.equals((java.lang.Object)stackAr7);
    int i13 = stackAr5.size();
    boolean b15 = stackAr5.equals((java.lang.Object)(-1));
    stackAr1.push((java.lang.Object)stackAr5);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    boolean b30 = stackAr17.equals((java.lang.Object)stackAr23);
    int i31 = stackAr23.size();
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isEmpty();
    java.lang.String str34 = stackAr32.toString();
    int i35 = stackAr32.size();
    boolean b36 = stackAr32.isFull();
    boolean b37 = stackAr23.equals((java.lang.Object)stackAr32);
    boolean b38 = stackAr1.equals((java.lang.Object)stackAr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[]"+ "'", str34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isEmpty();
    java.lang.String str8 = stackAr6.toString();
    java.lang.String str9 = stackAr6.toString();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    boolean b12 = stackAr6.equals((java.lang.Object)stackAr10);
    java.lang.String str13 = stackAr6.toString();
    stackAr0.push((java.lang.Object)stackAr6);
    boolean b15 = stackAr6.isFull();
    int i16 = stackAr6.size();
    boolean b18 = stackAr6.equals((java.lang.Object)1L);
    int i19 = stackAr6.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    int i3 = stackAr0.size();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    boolean b9 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    java.lang.String str12 = stackAr10.toString();
    boolean b13 = stackAr10.isEmpty();
    stackAr10.push((java.lang.Object)10);
    java.lang.String str16 = stackAr10.toString();
    stackAr5.push((java.lang.Object)stackAr10);
    boolean b18 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    java.lang.String str21 = stackAr19.toString();
    java.lang.String str22 = stackAr19.toString();
    stackAr19.push((java.lang.Object)(-1.0f));
    stackAr5.push((java.lang.Object)stackAr19);
    java.lang.Object obj26 = stackAr5.top();
    boolean b27 = stackAr0.equals(obj26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[10]"+ "'", str16.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b3 = stackAr0.equals((java.lang.Object)100);
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int)(byte)100);
    boolean b6 = stackAr5.isEmpty();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.Object obj8 = stackAr0.top();
    java.lang.String str9 = stackAr0.toString();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b12 = stackAr10.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isFull();
    java.lang.String str15 = stackAr13.toString();
    boolean b16 = stackAr13.isEmpty();
    boolean b17 = stackAr13.isEmpty();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isFull();
    java.lang.String str20 = stackAr18.toString();
    boolean b21 = stackAr18.isEmpty();
    stackAr18.push((java.lang.Object)10);
    java.lang.String str24 = stackAr18.toString();
    stackAr13.push((java.lang.Object)stackAr18);
    stackAr10.push((java.lang.Object)stackAr13);
    java.lang.Object obj27 = null;
    stackAr13.push(obj27);
    boolean b29 = stackAr0.equals((java.lang.Object)stackAr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[[]]"+ "'", str9.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[10]"+ "'", str24.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr(0);
    boolean b2 = stackAr1.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b7 = stackAr3.equals((java.lang.Object)(-1));
    boolean b8 = stackAr0.equals((java.lang.Object)stackAr3);
    boolean b9 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj10 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str2 = stackAr1.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr1.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b10 = stackAr7.isEmpty();
    stackAr7.push((java.lang.Object)10);
    java.lang.Object obj13 = stackAr7.top();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int)'4');
    boolean b16 = stackAr15.isFull();
    boolean b17 = stackAr7.equals((java.lang.Object)stackAr15);
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    java.lang.String str20 = stackAr18.toString();
    java.lang.String str21 = stackAr18.toString();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    boolean b24 = stackAr18.equals((java.lang.Object)stackAr22);
    int i25 = stackAr22.size();
    stackAr15.push((java.lang.Object)stackAr22);
    stackAr0.push((java.lang.Object)stackAr22);
    java.lang.String str28 = stackAr0.toString();
    boolean b29 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 10+ "'", obj13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[10,[]]"+ "'", str28.equals("[10,[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    boolean b11 = stackAr8.isFull();
    java.lang.String str12 = stackAr8.toString();
    boolean b13 = stackAr8.isFull();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b16 = stackAr14.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isFull();
    java.lang.String str19 = stackAr17.toString();
    boolean b20 = stackAr17.isEmpty();
    boolean b21 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    java.lang.String str24 = stackAr22.toString();
    boolean b25 = stackAr22.isEmpty();
    stackAr22.push((java.lang.Object)10);
    java.lang.String str28 = stackAr22.toString();
    stackAr17.push((java.lang.Object)stackAr22);
    stackAr14.push((java.lang.Object)stackAr17);
    org.autotest.StackAr stackAr31 = new org.autotest.StackAr();
    boolean b32 = stackAr31.isEmpty();
    org.autotest.StackAr stackAr33 = new org.autotest.StackAr();
    boolean b34 = stackAr33.isFull();
    boolean b35 = stackAr33.isFull();
    boolean b36 = stackAr31.equals((java.lang.Object)b35);
    org.autotest.StackAr stackAr37 = new org.autotest.StackAr();
    boolean b38 = stackAr37.isEmpty();
    java.lang.String str39 = stackAr37.toString();
    java.lang.String str40 = stackAr37.toString();
    org.autotest.StackAr stackAr41 = new org.autotest.StackAr();
    boolean b42 = stackAr41.isFull();
    boolean b43 = stackAr37.equals((java.lang.Object)stackAr41);
    java.lang.String str44 = stackAr37.toString();
    stackAr31.push((java.lang.Object)stackAr37);
    org.autotest.StackAr stackAr46 = new org.autotest.StackAr();
    boolean b47 = stackAr46.isFull();
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isEmpty();
    org.autotest.StackAr stackAr50 = new org.autotest.StackAr();
    boolean b51 = stackAr50.isEmpty();
    java.lang.String str52 = stackAr50.toString();
    java.lang.String str53 = stackAr50.toString();
    int i54 = stackAr50.size();
    boolean b55 = stackAr48.equals((java.lang.Object)stackAr50);
    stackAr46.push((java.lang.Object)stackAr50);
    int i57 = stackAr46.size();
    stackAr37.push((java.lang.Object)i57);
    boolean b59 = stackAr17.equals((java.lang.Object)stackAr37);
    org.autotest.StackAr stackAr61 = new org.autotest.StackAr((int)'4');
    stackAr37.push((java.lang.Object)'4');
    java.lang.Object obj63 = null;
    boolean b64 = stackAr37.equals(obj63);
    java.lang.String str65 = stackAr37.toString();
    boolean b66 = stackAr8.equals((java.lang.Object)stackAr37);
    java.lang.String str67 = stackAr37.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[10]"+ "'", str28.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[]"+ "'", str40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "[]"+ "'", str44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "[]"+ "'", str52.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[]"+ "'", str53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "[1,4]"+ "'", str65.equals("[1,4]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[1,4]"+ "'", str67.equals("[1,4]"));

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str8 = stackAr7.toString();
    stackAr0.push((java.lang.Object)str8);
    java.lang.String str10 = stackAr0.toString();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    boolean b13 = stackAr11.isEmpty();
    int i14 = stackAr11.size();
    boolean b15 = stackAr0.equals((java.lang.Object)i14);
    boolean b16 = stackAr0.isFull();
    boolean b17 = stackAr0.isEmpty();
    boolean b18 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[[]]"+ "'", str10.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isFull();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)(byte)100);
    boolean b9 = stackAr4.equals((java.lang.Object)stackAr8);
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    java.lang.String str12 = stackAr10.toString();
    boolean b13 = stackAr10.isEmpty();
    stackAr10.push((java.lang.Object)10);
    java.lang.String str16 = stackAr10.toString();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    java.lang.String str19 = stackAr17.toString();
    java.lang.String str20 = stackAr17.toString();
    boolean b21 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isEmpty();
    java.lang.String str24 = stackAr22.toString();
    java.lang.String str25 = stackAr22.toString();
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isFull();
    boolean b28 = stackAr22.equals((java.lang.Object)stackAr26);
    boolean b29 = stackAr22.isFull();
    stackAr17.push((java.lang.Object)stackAr22);
    boolean b31 = stackAr10.equals((java.lang.Object)stackAr17);
    boolean b32 = stackAr4.equals((java.lang.Object)stackAr17);
    stackAr0.push((java.lang.Object)b32);
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    java.lang.String str36 = stackAr34.toString();
    java.lang.String str37 = stackAr34.toString();
    stackAr34.push((java.lang.Object)(-1.0f));
    java.lang.String str40 = stackAr34.toString();
    boolean b41 = stackAr0.equals((java.lang.Object)stackAr34);
    org.autotest.StackAr stackAr42 = new org.autotest.StackAr();
    boolean b43 = stackAr42.isEmpty();
    org.autotest.StackAr stackAr44 = new org.autotest.StackAr();
    boolean b45 = stackAr44.isFull();
    boolean b46 = stackAr44.isFull();
    boolean b47 = stackAr42.equals((java.lang.Object)b46);
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isFull();
    java.lang.String str50 = stackAr48.toString();
    boolean b51 = stackAr48.isEmpty();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isEmpty();
    java.lang.String str54 = stackAr52.toString();
    java.lang.String str55 = stackAr52.toString();
    int i56 = stackAr52.size();
    stackAr48.push((java.lang.Object)i56);
    java.lang.Object obj58 = stackAr48.top();
    stackAr42.push((java.lang.Object)stackAr48);
    org.autotest.StackAr stackAr60 = new org.autotest.StackAr();
    boolean b61 = stackAr60.isFull();
    java.lang.String str62 = stackAr60.toString();
    boolean b63 = stackAr60.isEmpty();
    boolean b64 = stackAr60.isEmpty();
    org.autotest.StackAr stackAr65 = new org.autotest.StackAr();
    boolean b66 = stackAr65.isFull();
    java.lang.String str67 = stackAr65.toString();
    boolean b68 = stackAr65.isEmpty();
    stackAr65.push((java.lang.Object)10);
    java.lang.String str71 = stackAr65.toString();
    stackAr60.push((java.lang.Object)stackAr65);
    boolean b73 = stackAr60.isEmpty();
    boolean b74 = stackAr48.equals((java.lang.Object)b73);
    org.autotest.StackAr stackAr75 = new org.autotest.StackAr();
    boolean b76 = stackAr75.isEmpty();
    org.autotest.StackAr stackAr77 = new org.autotest.StackAr();
    boolean b78 = stackAr77.isFull();
    java.lang.String str79 = stackAr77.toString();
    boolean b80 = stackAr77.isEmpty();
    boolean b81 = stackAr77.isEmpty();
    org.autotest.StackAr stackAr82 = new org.autotest.StackAr();
    boolean b83 = stackAr82.isFull();
    java.lang.String str84 = stackAr82.toString();
    boolean b85 = stackAr82.isEmpty();
    stackAr82.push((java.lang.Object)10);
    java.lang.String str88 = stackAr82.toString();
    stackAr77.push((java.lang.Object)stackAr82);
    stackAr75.push((java.lang.Object)stackAr82);
    boolean b91 = stackAr75.isEmpty();
    stackAr48.push((java.lang.Object)b91);
    stackAr34.push((java.lang.Object)stackAr48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[10]"+ "'", str16.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[]"+ "'", str36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[]"+ "'", str37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[-1.0]"+ "'", str40.equals("[-1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "[]"+ "'", str50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[]"+ "'", str54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "[]"+ "'", str55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj58 + "' != '" + 0+ "'", obj58.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "[]"+ "'", str62.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]"+ "'", str67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "[10]"+ "'", str71.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "[]"+ "'", str79.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "[]"+ "'", str84.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "[10]"+ "'", str88.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    int i8 = stackAr0.size();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isEmpty();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isFull();
    boolean b13 = stackAr11.isFull();
    boolean b14 = stackAr9.equals((java.lang.Object)b13);
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    java.lang.String str17 = stackAr15.toString();
    java.lang.String str18 = stackAr15.toString();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr15.equals((java.lang.Object)stackAr19);
    java.lang.String str22 = stackAr15.toString();
    stackAr9.push((java.lang.Object)stackAr15);
    boolean b24 = stackAr0.equals((java.lang.Object)stackAr9);
    boolean b25 = stackAr9.isEmpty();
    int i26 = stackAr9.size();
    java.lang.String str27 = stackAr9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[[]]"+ "'", str27.equals("[[]]"));

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    int i3 = stackAr0.size();
    int i4 = stackAr0.size();
    int i5 = stackAr0.size();
    int i6 = stackAr0.size();
    java.lang.String str7 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    java.lang.Object obj17 = stackAr3.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)'4');
    java.lang.String str2 = stackAr1.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)'4');
    boolean b5 = stackAr4.isEmpty();
    boolean b6 = stackAr4.isFull();
    boolean b7 = stackAr1.equals((java.lang.Object)b6);
    boolean b8 = stackAr1.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    boolean b2 = stackAr1.isEmpty();
    boolean b3 = stackAr1.isEmpty();
    boolean b5 = stackAr1.equals((java.lang.Object)(-1));
    int i6 = stackAr1.size();
    stackAr1.push((java.lang.Object)"hi!");
    int i9 = stackAr1.size();
    boolean b10 = stackAr1.isFull();
    java.lang.Object obj11 = null;
    boolean b12 = stackAr1.equals(obj11);
    int i13 = stackAr1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    boolean b8 = stackAr2.isFull();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int)'4');
    java.lang.String str11 = stackAr10.toString();
    boolean b12 = stackAr2.equals((java.lang.Object)str11);
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isFull();
    java.lang.String str15 = stackAr13.toString();
    boolean b16 = stackAr13.isEmpty();
    stackAr13.push((java.lang.Object)10);
    boolean b19 = stackAr13.isFull();
    boolean b20 = stackAr13.isEmpty();
    stackAr2.push((java.lang.Object)stackAr13);
    boolean b22 = stackAr13.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr(10);
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int)(byte)100);
    boolean b7 = stackAr2.equals((java.lang.Object)stackAr6);
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str10 = stackAr9.toString();
    stackAr2.push((java.lang.Object)str10);
    java.lang.Object obj12 = stackAr2.top();
    boolean b13 = stackAr2.isFull();
    int i14 = stackAr2.size();
    boolean b15 = stackAr1.equals((java.lang.Object)stackAr2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + "[]"+ "'", obj12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.String str6 = stackAr0.toString();
    java.lang.Object obj7 = stackAr0.top();
    java.lang.Object obj8 = stackAr0.top();
    boolean b9 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[10]"+ "'", str6.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 10+ "'", obj7.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10+ "'", obj8.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b7 = stackAr3.equals((java.lang.Object)(-1));
    boolean b8 = stackAr0.equals((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str11 = stackAr10.toString();
    stackAr3.push((java.lang.Object)str11);
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isFull();
    java.lang.String str15 = stackAr13.toString();
    boolean b16 = stackAr13.isEmpty();
    boolean b17 = stackAr13.isEmpty();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isFull();
    java.lang.String str20 = stackAr18.toString();
    boolean b21 = stackAr18.isEmpty();
    stackAr18.push((java.lang.Object)10);
    java.lang.String str24 = stackAr18.toString();
    stackAr13.push((java.lang.Object)stackAr18);
    java.lang.String str26 = stackAr18.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr27.isFull();
    java.lang.String str30 = stackAr27.toString();
    boolean b31 = stackAr27.isEmpty();
    stackAr18.push((java.lang.Object)stackAr27);
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int)' ');
    boolean b35 = stackAr34.isEmpty();
    stackAr18.push((java.lang.Object)stackAr34);
    boolean b37 = stackAr3.equals((java.lang.Object)stackAr18);
    boolean b38 = stackAr18.isEmpty();
    org.autotest.StackAr stackAr40 = new org.autotest.StackAr((int)'4');
    int i41 = stackAr40.size();
    org.autotest.StackAr stackAr42 = new org.autotest.StackAr();
    boolean b43 = stackAr42.isEmpty();
    org.autotest.StackAr stackAr44 = new org.autotest.StackAr();
    boolean b45 = stackAr44.isFull();
    boolean b46 = stackAr44.isFull();
    boolean b47 = stackAr42.equals((java.lang.Object)b46);
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isFull();
    java.lang.String str50 = stackAr48.toString();
    boolean b51 = stackAr48.isEmpty();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isEmpty();
    java.lang.String str54 = stackAr52.toString();
    java.lang.String str55 = stackAr52.toString();
    int i56 = stackAr52.size();
    stackAr48.push((java.lang.Object)i56);
    java.lang.Object obj58 = stackAr48.top();
    stackAr42.push((java.lang.Object)stackAr48);
    org.autotest.StackAr stackAr60 = new org.autotest.StackAr();
    boolean b62 = stackAr60.equals((java.lang.Object)0);
    stackAr60.push((java.lang.Object)"[]");
    stackAr48.push((java.lang.Object)"[]");
    stackAr40.push((java.lang.Object)stackAr48);
    boolean b67 = stackAr18.equals((java.lang.Object)stackAr48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[10]"+ "'", str24.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[10]"+ "'", str26.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "[]"+ "'", str50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[]"+ "'", str54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "[]"+ "'", str55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj58 + "' != '" + 0+ "'", obj58.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj6 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    java.lang.String str30 = stackAr23.toString();
    stackAr17.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    java.lang.String str38 = stackAr36.toString();
    java.lang.String str39 = stackAr36.toString();
    int i40 = stackAr36.size();
    boolean b41 = stackAr34.equals((java.lang.Object)stackAr36);
    stackAr32.push((java.lang.Object)stackAr36);
    int i43 = stackAr32.size();
    stackAr23.push((java.lang.Object)i43);
    boolean b45 = stackAr3.equals((java.lang.Object)stackAr23);
    java.lang.String str46 = stackAr23.toString();
    boolean b47 = stackAr23.isFull();
    java.lang.Object obj48 = stackAr23.top();
    java.lang.String str49 = stackAr23.toString();
    boolean b50 = stackAr23.isEmpty();
    boolean b51 = stackAr23.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[1]"+ "'", str46.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 1+ "'", obj48.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[1]"+ "'", str49.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b3 = stackAr0.equals((java.lang.Object)100);
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int)(byte)100);
    boolean b6 = stackAr5.isEmpty();
    stackAr0.push((java.lang.Object)stackAr5);
    boolean b9 = stackAr5.equals((java.lang.Object)10.0f);
    boolean b10 = stackAr5.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)'4');
    int i2 = stackAr1.size();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isEmpty();
    java.lang.String str5 = stackAr3.toString();
    java.lang.String str6 = stackAr3.toString();
    int i7 = stackAr3.size();
    stackAr1.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    java.lang.String str11 = stackAr9.toString();
    boolean b12 = stackAr9.isEmpty();
    stackAr9.push((java.lang.Object)10);
    java.lang.Object obj15 = stackAr9.top();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int)'4');
    boolean b18 = stackAr17.isFull();
    boolean b19 = stackAr9.equals((java.lang.Object)stackAr17);
    boolean b20 = stackAr17.isFull();
    int i21 = stackAr17.size();
    int i22 = stackAr17.size();
    boolean b23 = stackAr3.equals((java.lang.Object)stackAr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 10+ "'", obj15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str14 = stackAr5.toString();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    java.lang.String str21 = stackAr19.toString();
    java.lang.String str22 = stackAr19.toString();
    int i23 = stackAr19.size();
    boolean b24 = stackAr17.equals((java.lang.Object)stackAr19);
    stackAr15.push((java.lang.Object)stackAr19);
    boolean b26 = stackAr5.equals((java.lang.Object)stackAr19);
    boolean b27 = stackAr19.isEmpty();
    boolean b28 = stackAr19.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr0.equals((java.lang.Object)stackAr4);
    boolean b7 = stackAr0.isFull();
    boolean b8 = stackAr0.isEmpty();
    int i9 = stackAr0.size();
    boolean b10 = stackAr0.isFull();
    int i11 = stackAr0.size();
    boolean b13 = stackAr0.equals((java.lang.Object)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str8 = stackAr7.toString();
    stackAr0.push((java.lang.Object)str8);
    java.lang.String str10 = stackAr0.toString();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    boolean b13 = stackAr11.isEmpty();
    int i14 = stackAr11.size();
    boolean b15 = stackAr0.equals((java.lang.Object)i14);
    boolean b16 = stackAr0.isFull();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int)'4');
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b22 = stackAr21.isEmpty();
    java.lang.String str23 = stackAr21.toString();
    java.lang.String str24 = stackAr21.toString();
    int i25 = stackAr21.size();
    boolean b26 = stackAr19.equals((java.lang.Object)stackAr21);
    int i27 = stackAr19.size();
    boolean b29 = stackAr19.equals((java.lang.Object)(-1));
    stackAr18.push((java.lang.Object)b29);
    java.lang.String str31 = stackAr18.toString();
    boolean b32 = stackAr0.equals((java.lang.Object)str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[[]]"+ "'", str10.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[false]"+ "'", str31.equals("[false]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    int i4 = stackAr0.size();
    java.lang.String str5 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    boolean b2 = stackAr1.isEmpty();
    boolean b3 = stackAr1.isEmpty();
    boolean b5 = stackAr1.equals((java.lang.Object)(-1));
    int i6 = stackAr1.size();
    stackAr1.push((java.lang.Object)"hi!");
    int i9 = stackAr1.size();
    boolean b10 = stackAr1.isFull();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int)(byte)100);
    boolean b13 = stackAr12.isEmpty();
    boolean b14 = stackAr12.isEmpty();
    int i15 = stackAr12.size();
    boolean b16 = stackAr12.isFull();
    boolean b17 = stackAr1.equals((java.lang.Object)b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isFull();
    java.lang.String str8 = stackAr6.toString();
    boolean b9 = stackAr6.isEmpty();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isEmpty();
    java.lang.String str12 = stackAr10.toString();
    java.lang.String str13 = stackAr10.toString();
    int i14 = stackAr10.size();
    stackAr6.push((java.lang.Object)i14);
    java.lang.Object obj16 = stackAr6.top();
    stackAr0.push((java.lang.Object)stackAr6);
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isFull();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isEmpty();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isEmpty();
    java.lang.String str24 = stackAr22.toString();
    java.lang.String str25 = stackAr22.toString();
    int i26 = stackAr22.size();
    boolean b27 = stackAr20.equals((java.lang.Object)stackAr22);
    stackAr18.push((java.lang.Object)stackAr22);
    int i29 = stackAr18.size();
    stackAr0.push((java.lang.Object)i29);
    java.lang.Object obj31 = stackAr0.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 1+ "'", obj31.equals(1));

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    boolean b8 = stackAr2.isFull();
    int i9 = stackAr2.size();
    int i10 = stackAr2.size();
    boolean b11 = stackAr2.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj12 = stackAr2.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(short)10);
    boolean b2 = stackAr1.isEmpty();
    boolean b3 = stackAr1.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    boolean b11 = stackAr8.isFull();
    java.lang.String str12 = stackAr8.toString();
    boolean b13 = stackAr8.isFull();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b16 = stackAr14.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isFull();
    java.lang.String str19 = stackAr17.toString();
    boolean b20 = stackAr17.isEmpty();
    boolean b21 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    java.lang.String str24 = stackAr22.toString();
    boolean b25 = stackAr22.isEmpty();
    stackAr22.push((java.lang.Object)10);
    java.lang.String str28 = stackAr22.toString();
    stackAr17.push((java.lang.Object)stackAr22);
    stackAr14.push((java.lang.Object)stackAr17);
    org.autotest.StackAr stackAr31 = new org.autotest.StackAr();
    boolean b32 = stackAr31.isEmpty();
    org.autotest.StackAr stackAr33 = new org.autotest.StackAr();
    boolean b34 = stackAr33.isFull();
    boolean b35 = stackAr33.isFull();
    boolean b36 = stackAr31.equals((java.lang.Object)b35);
    org.autotest.StackAr stackAr37 = new org.autotest.StackAr();
    boolean b38 = stackAr37.isEmpty();
    java.lang.String str39 = stackAr37.toString();
    java.lang.String str40 = stackAr37.toString();
    org.autotest.StackAr stackAr41 = new org.autotest.StackAr();
    boolean b42 = stackAr41.isFull();
    boolean b43 = stackAr37.equals((java.lang.Object)stackAr41);
    java.lang.String str44 = stackAr37.toString();
    stackAr31.push((java.lang.Object)stackAr37);
    org.autotest.StackAr stackAr46 = new org.autotest.StackAr();
    boolean b47 = stackAr46.isFull();
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isEmpty();
    org.autotest.StackAr stackAr50 = new org.autotest.StackAr();
    boolean b51 = stackAr50.isEmpty();
    java.lang.String str52 = stackAr50.toString();
    java.lang.String str53 = stackAr50.toString();
    int i54 = stackAr50.size();
    boolean b55 = stackAr48.equals((java.lang.Object)stackAr50);
    stackAr46.push((java.lang.Object)stackAr50);
    int i57 = stackAr46.size();
    stackAr37.push((java.lang.Object)i57);
    boolean b59 = stackAr17.equals((java.lang.Object)stackAr37);
    org.autotest.StackAr stackAr61 = new org.autotest.StackAr((int)'4');
    stackAr37.push((java.lang.Object)'4');
    java.lang.Object obj63 = null;
    boolean b64 = stackAr37.equals(obj63);
    java.lang.String str65 = stackAr37.toString();
    boolean b66 = stackAr8.equals((java.lang.Object)stackAr37);
    boolean b67 = stackAr8.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[10]"+ "'", str28.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[]"+ "'", str40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "[]"+ "'", str44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "[]"+ "'", str52.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[]"+ "'", str53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "[1,4]"+ "'", str65.equals("[1,4]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    boolean b11 = stackAr0.isEmpty();
    boolean b12 = stackAr0.isEmpty();
    java.lang.Object obj13 = stackAr0.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    boolean b8 = stackAr4.isEmpty();
    stackAr0.push((java.lang.Object)b8);
    boolean b10 = stackAr0.isFull();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    int i14 = stackAr11.size();
    stackAr0.push((java.lang.Object)i14);
    int i16 = stackAr0.size();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    java.lang.String str19 = stackAr17.toString();
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int)(byte)100);
    boolean b22 = stackAr17.equals((java.lang.Object)stackAr21);
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str25 = stackAr24.toString();
    stackAr17.push((java.lang.Object)str25);
    stackAr0.push((java.lang.Object)str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int)(byte)100);
    boolean b13 = stackAr12.isEmpty();
    boolean b14 = stackAr12.isEmpty();
    int i15 = stackAr12.size();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isFull();
    java.lang.String str18 = stackAr16.toString();
    boolean b19 = stackAr16.isEmpty();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isEmpty();
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
    boolean b25 = stackAr24.isEmpty();
    java.lang.String str26 = stackAr24.toString();
    java.lang.String str27 = stackAr24.toString();
    int i28 = stackAr24.size();
    boolean b29 = stackAr22.equals((java.lang.Object)stackAr24);
    stackAr20.push((java.lang.Object)stackAr24);
    boolean b31 = stackAr16.equals((java.lang.Object)stackAr20);
    stackAr12.push((java.lang.Object)b31);
    stackAr8.push((java.lang.Object)stackAr12);
    java.lang.String str34 = stackAr8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[]"+ "'", str27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[[false]]"+ "'", str34.equals("[[false]]"));

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr(1);
    boolean b2 = stackAr1.isEmpty();
    int i3 = stackAr1.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stackAr1.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isFull();
    boolean b16 = stackAr14.isFull();
    java.lang.String str17 = stackAr14.toString();
    boolean b18 = stackAr14.isEmpty();
    stackAr5.push((java.lang.Object)stackAr14);
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isEmpty();
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
    boolean b25 = stackAr24.isEmpty();
    java.lang.String str26 = stackAr24.toString();
    java.lang.String str27 = stackAr24.toString();
    int i28 = stackAr24.size();
    boolean b29 = stackAr22.equals((java.lang.Object)stackAr24);
    stackAr20.push((java.lang.Object)stackAr24);
    boolean b31 = stackAr20.isEmpty();
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b34 = stackAr32.equals((java.lang.Object)0);
    boolean b35 = stackAr32.isEmpty();
    stackAr20.push((java.lang.Object)stackAr32);
    stackAr5.push((java.lang.Object)stackAr32);
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int)(byte)100);
    boolean b40 = stackAr39.isEmpty();
    boolean b41 = stackAr39.isEmpty();
    boolean b43 = stackAr39.equals((java.lang.Object)(-1));
    int i44 = stackAr39.size();
    stackAr39.push((java.lang.Object)"hi!");
    int i47 = stackAr39.size();
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    java.lang.String str49 = stackAr48.toString();
    boolean b50 = stackAr48.isEmpty();
    int i51 = stackAr48.size();
    boolean b52 = stackAr39.equals((java.lang.Object)i51);
    stackAr32.push((java.lang.Object)stackAr39);
    org.autotest.StackAr stackAr54 = new org.autotest.StackAr();
    boolean b55 = stackAr54.isEmpty();
    boolean b56 = stackAr54.isEmpty();
    org.autotest.StackAr stackAr57 = new org.autotest.StackAr();
    boolean b58 = stackAr57.isFull();
    java.lang.String str59 = stackAr57.toString();
    boolean b61 = stackAr57.equals((java.lang.Object)(-1));
    boolean b62 = stackAr54.equals((java.lang.Object)stackAr57);
    org.autotest.StackAr stackAr63 = new org.autotest.StackAr();
    boolean b64 = stackAr63.isEmpty();
    org.autotest.StackAr stackAr65 = new org.autotest.StackAr();
    boolean b66 = stackAr65.isFull();
    boolean b67 = stackAr65.isFull();
    boolean b68 = stackAr63.equals((java.lang.Object)b67);
    int i69 = stackAr63.size();
    boolean b70 = stackAr63.isEmpty();
    stackAr57.push((java.lang.Object)stackAr63);
    boolean b72 = stackAr39.equals((java.lang.Object)stackAr63);
    org.autotest.StackAr stackAr73 = new org.autotest.StackAr();
    boolean b74 = stackAr73.isEmpty();
    boolean b76 = stackAr73.equals((java.lang.Object)100);
    org.autotest.StackAr stackAr78 = new org.autotest.StackAr((int)(byte)100);
    boolean b79 = stackAr78.isEmpty();
    stackAr73.push((java.lang.Object)stackAr78);
    org.autotest.StackAr stackAr81 = new org.autotest.StackAr();
    boolean b82 = stackAr81.isFull();
    java.lang.String str83 = stackAr81.toString();
    boolean b84 = stackAr81.isEmpty();
    boolean b85 = stackAr81.isEmpty();
    boolean b86 = stackAr81.isEmpty();
    int i87 = stackAr81.size();
    int i88 = stackAr81.size();
    java.lang.String str89 = stackAr81.toString();
    boolean b90 = stackAr78.equals((java.lang.Object)stackAr81);
    boolean b91 = stackAr39.equals((java.lang.Object)stackAr78);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj92 = stackAr78.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[]"+ "'", str27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[]"+ "'", str49.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[]"+ "'", str59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "[]"+ "'", str83.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "[]"+ "'", str89.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isFull();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)(byte)100);
    boolean b9 = stackAr4.equals((java.lang.Object)stackAr8);
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    java.lang.String str12 = stackAr10.toString();
    boolean b13 = stackAr10.isEmpty();
    stackAr10.push((java.lang.Object)10);
    java.lang.String str16 = stackAr10.toString();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    java.lang.String str19 = stackAr17.toString();
    java.lang.String str20 = stackAr17.toString();
    boolean b21 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isEmpty();
    java.lang.String str24 = stackAr22.toString();
    java.lang.String str25 = stackAr22.toString();
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isFull();
    boolean b28 = stackAr22.equals((java.lang.Object)stackAr26);
    boolean b29 = stackAr22.isFull();
    stackAr17.push((java.lang.Object)stackAr22);
    boolean b31 = stackAr10.equals((java.lang.Object)stackAr17);
    boolean b32 = stackAr4.equals((java.lang.Object)stackAr17);
    stackAr0.push((java.lang.Object)b32);
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    java.lang.String str36 = stackAr34.toString();
    java.lang.String str37 = stackAr34.toString();
    stackAr34.push((java.lang.Object)(-1.0f));
    java.lang.String str40 = stackAr34.toString();
    boolean b41 = stackAr0.equals((java.lang.Object)stackAr34);
    org.autotest.StackAr stackAr42 = new org.autotest.StackAr();
    boolean b43 = stackAr42.isEmpty();
    org.autotest.StackAr stackAr44 = new org.autotest.StackAr();
    boolean b45 = stackAr44.isFull();
    boolean b46 = stackAr44.isFull();
    boolean b47 = stackAr42.equals((java.lang.Object)b46);
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isFull();
    java.lang.String str50 = stackAr48.toString();
    boolean b51 = stackAr48.isEmpty();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isEmpty();
    java.lang.String str54 = stackAr52.toString();
    java.lang.String str55 = stackAr52.toString();
    int i56 = stackAr52.size();
    stackAr48.push((java.lang.Object)i56);
    java.lang.Object obj58 = stackAr48.top();
    stackAr42.push((java.lang.Object)stackAr48);
    org.autotest.StackAr stackAr60 = new org.autotest.StackAr();
    boolean b61 = stackAr60.isFull();
    java.lang.String str62 = stackAr60.toString();
    boolean b63 = stackAr60.isEmpty();
    boolean b64 = stackAr60.isEmpty();
    org.autotest.StackAr stackAr65 = new org.autotest.StackAr();
    boolean b66 = stackAr65.isFull();
    java.lang.String str67 = stackAr65.toString();
    boolean b68 = stackAr65.isEmpty();
    stackAr65.push((java.lang.Object)10);
    java.lang.String str71 = stackAr65.toString();
    stackAr60.push((java.lang.Object)stackAr65);
    boolean b73 = stackAr60.isEmpty();
    boolean b74 = stackAr48.equals((java.lang.Object)b73);
    boolean b75 = stackAr34.equals((java.lang.Object)b73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[10]"+ "'", str16.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[]"+ "'", str36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[]"+ "'", str37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[-1.0]"+ "'", str40.equals("[-1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "[]"+ "'", str50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[]"+ "'", str54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "[]"+ "'", str55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj58 + "' != '" + 0+ "'", obj58.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "[]"+ "'", str62.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]"+ "'", str67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "[10]"+ "'", str71.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    boolean b2 = stackAr1.isEmpty();
    boolean b3 = stackAr1.isEmpty();
    int i4 = stackAr1.size();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    boolean b9 = stackAr7.isFull();
    boolean b10 = stackAr5.equals((java.lang.Object)b9);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    java.lang.String str14 = stackAr11.toString();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    boolean b17 = stackAr11.equals((java.lang.Object)stackAr15);
    boolean b18 = stackAr5.equals((java.lang.Object)stackAr11);
    int i19 = stackAr11.size();
    stackAr1.push((java.lang.Object)i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    int i5 = stackAr0.size();
    java.lang.String str6 = stackAr0.toString();
    boolean b7 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isEmpty();
    java.lang.String str8 = stackAr6.toString();
    java.lang.String str9 = stackAr6.toString();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    boolean b12 = stackAr6.equals((java.lang.Object)stackAr10);
    boolean b13 = stackAr0.equals((java.lang.Object)stackAr6);
    int i14 = stackAr6.size();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    java.lang.String str17 = stackAr15.toString();
    int i18 = stackAr15.size();
    boolean b19 = stackAr15.isFull();
    boolean b20 = stackAr6.equals((java.lang.Object)stackAr15);
    java.lang.String str21 = stackAr6.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj22 = stackAr6.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    boolean b13 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int)(byte)100);
    java.lang.String str16 = stackAr15.toString();
    boolean b17 = stackAr0.equals((java.lang.Object)stackAr15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.String str6 = stackAr0.toString();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isEmpty();
    java.lang.String str9 = stackAr7.toString();
    java.lang.String str10 = stackAr7.toString();
    boolean b11 = stackAr7.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isEmpty();
    java.lang.String str14 = stackAr12.toString();
    java.lang.String str15 = stackAr12.toString();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isFull();
    boolean b18 = stackAr12.equals((java.lang.Object)stackAr16);
    boolean b19 = stackAr12.isFull();
    stackAr7.push((java.lang.Object)stackAr12);
    boolean b21 = stackAr0.equals((java.lang.Object)stackAr7);
    int i22 = stackAr0.size();
    java.lang.Object obj23 = stackAr0.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[10]"+ "'", str6.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 10+ "'", obj23.equals(10));

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    int i6 = stackAr0.size();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)(byte)100);
    java.lang.String str9 = stackAr8.toString();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj11 = stackAr8.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)0);
    // The following exception was thrown during execution in test generation
    try {
    stackAr1.push((java.lang.Object)"[true,0]");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int)(byte)100);
    boolean b6 = stackAr5.isEmpty();
    boolean b7 = stackAr0.equals((java.lang.Object)b6);
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isEmpty();
    java.lang.String str14 = stackAr12.toString();
    java.lang.String str15 = stackAr12.toString();
    int i16 = stackAr12.size();
    stackAr8.push((java.lang.Object)i16);
    int i18 = stackAr8.size();
    boolean b19 = stackAr8.isFull();
    stackAr0.push((java.lang.Object)b19);
    int i21 = stackAr0.size();
    java.lang.Object obj22 = stackAr0.top();
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int)(byte)100);
    boolean b28 = stackAr23.equals((java.lang.Object)stackAr27);
    org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str31 = stackAr30.toString();
    stackAr23.push((java.lang.Object)str31);
    java.lang.String str33 = stackAr23.toString();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    boolean b36 = stackAr34.isEmpty();
    int i37 = stackAr34.size();
    boolean b38 = stackAr23.equals((java.lang.Object)i37);
    boolean b39 = stackAr23.isFull();
    boolean b40 = stackAr23.isEmpty();
    int i41 = stackAr23.size();
    boolean b42 = stackAr23.isEmpty();
    boolean b43 = stackAr0.equals((java.lang.Object)b42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + false+ "'", obj22.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[]"+ "'", str31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[[]]"+ "'", str33.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    boolean b11 = stackAr8.isFull();
    java.lang.String str12 = stackAr8.toString();
    boolean b13 = stackAr8.isFull();
    boolean b14 = stackAr8.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isFull();
    java.lang.String str8 = stackAr6.toString();
    boolean b9 = stackAr6.isEmpty();
    stackAr6.push((java.lang.Object)10);
    java.lang.String str12 = stackAr6.toString();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isEmpty();
    java.lang.String str15 = stackAr13.toString();
    java.lang.String str16 = stackAr13.toString();
    boolean b17 = stackAr13.isEmpty();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    java.lang.String str20 = stackAr18.toString();
    java.lang.String str21 = stackAr18.toString();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    boolean b24 = stackAr18.equals((java.lang.Object)stackAr22);
    boolean b25 = stackAr18.isFull();
    stackAr13.push((java.lang.Object)stackAr18);
    boolean b27 = stackAr6.equals((java.lang.Object)stackAr13);
    boolean b28 = stackAr0.equals((java.lang.Object)stackAr13);
    org.autotest.StackAr stackAr29 = new org.autotest.StackAr();
    boolean b30 = stackAr29.isFull();
    java.lang.String str31 = stackAr29.toString();
    boolean b32 = stackAr29.isEmpty();
    stackAr29.push((java.lang.Object)10);
    java.lang.Object obj35 = stackAr29.top();
    org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int)'4');
    boolean b38 = stackAr37.isFull();
    boolean b39 = stackAr29.equals((java.lang.Object)stackAr37);
    org.autotest.StackAr stackAr40 = new org.autotest.StackAr();
    boolean b41 = stackAr40.isFull();
    java.lang.String str42 = stackAr40.toString();
    boolean b43 = stackAr40.isEmpty();
    stackAr40.push((java.lang.Object)10);
    java.lang.String str46 = stackAr40.toString();
    org.autotest.StackAr stackAr47 = new org.autotest.StackAr();
    boolean b48 = stackAr47.isEmpty();
    java.lang.String str49 = stackAr47.toString();
    java.lang.String str50 = stackAr47.toString();
    boolean b51 = stackAr47.isEmpty();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isEmpty();
    java.lang.String str54 = stackAr52.toString();
    java.lang.String str55 = stackAr52.toString();
    org.autotest.StackAr stackAr56 = new org.autotest.StackAr();
    boolean b57 = stackAr56.isFull();
    boolean b58 = stackAr52.equals((java.lang.Object)stackAr56);
    boolean b59 = stackAr52.isFull();
    stackAr47.push((java.lang.Object)stackAr52);
    boolean b61 = stackAr40.equals((java.lang.Object)stackAr47);
    int i62 = stackAr40.size();
    boolean b63 = stackAr37.equals((java.lang.Object)stackAr40);
    org.autotest.StackAr stackAr64 = new org.autotest.StackAr();
    boolean b65 = stackAr64.isEmpty();
    java.lang.String str66 = stackAr64.toString();
    java.lang.String str67 = stackAr64.toString();
    org.autotest.StackAr stackAr68 = new org.autotest.StackAr();
    boolean b69 = stackAr68.isFull();
    boolean b70 = stackAr64.equals((java.lang.Object)stackAr68);
    int i71 = stackAr68.size();
    int i72 = stackAr68.size();
    org.autotest.StackAr stackAr73 = new org.autotest.StackAr();
    boolean b74 = stackAr73.isFull();
    stackAr68.push((java.lang.Object)stackAr73);
    boolean b76 = stackAr40.equals((java.lang.Object)stackAr68);
    stackAr0.push((java.lang.Object)b76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[10]"+ "'", str12.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[]"+ "'", str31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 10+ "'", obj35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[]"+ "'", str42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[10]"+ "'", str46.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[]"+ "'", str49.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "[]"+ "'", str50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[]"+ "'", str54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "[]"+ "'", str55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[]"+ "'", str66.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]"+ "'", str67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isFull();
    boolean b16 = stackAr14.isFull();
    java.lang.String str17 = stackAr14.toString();
    boolean b18 = stackAr14.isEmpty();
    stackAr5.push((java.lang.Object)stackAr14);
    int i20 = stackAr5.size();
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b22 = stackAr21.isFull();
    java.lang.String str23 = stackAr21.toString();
    boolean b24 = stackAr21.isEmpty();
    stackAr21.push((java.lang.Object)10);
    java.lang.Object obj27 = stackAr21.top();
    stackAr5.push((java.lang.Object)stackAr21);
    org.autotest.StackAr stackAr29 = new org.autotest.StackAr();
    boolean b30 = stackAr29.isEmpty();
    java.lang.String str31 = stackAr29.toString();
    boolean b32 = stackAr29.isFull();
    boolean b33 = stackAr21.equals((java.lang.Object)b32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10+ "'", obj27.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[]"+ "'", str31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    int i3 = stackAr0.size();
    int i4 = stackAr0.size();
    int i5 = stackAr0.size();
    java.lang.String str6 = stackAr0.toString();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b10 = stackAr7.isEmpty();
    stackAr7.push((java.lang.Object)10);
    java.lang.Object obj13 = stackAr7.top();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int)'4');
    boolean b16 = stackAr15.isFull();
    boolean b17 = stackAr7.equals((java.lang.Object)stackAr15);
    boolean b18 = stackAr15.isFull();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b21 = stackAr19.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    java.lang.String str24 = stackAr22.toString();
    boolean b25 = stackAr22.isEmpty();
    boolean b26 = stackAr22.isEmpty();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    java.lang.String str29 = stackAr27.toString();
    boolean b30 = stackAr27.isEmpty();
    stackAr27.push((java.lang.Object)10);
    java.lang.String str33 = stackAr27.toString();
    stackAr22.push((java.lang.Object)stackAr27);
    stackAr19.push((java.lang.Object)stackAr22);
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    org.autotest.StackAr stackAr38 = new org.autotest.StackAr();
    boolean b39 = stackAr38.isFull();
    boolean b40 = stackAr38.isFull();
    boolean b41 = stackAr36.equals((java.lang.Object)b40);
    org.autotest.StackAr stackAr42 = new org.autotest.StackAr();
    boolean b43 = stackAr42.isEmpty();
    java.lang.String str44 = stackAr42.toString();
    java.lang.String str45 = stackAr42.toString();
    org.autotest.StackAr stackAr46 = new org.autotest.StackAr();
    boolean b47 = stackAr46.isFull();
    boolean b48 = stackAr42.equals((java.lang.Object)stackAr46);
    java.lang.String str49 = stackAr42.toString();
    stackAr36.push((java.lang.Object)stackAr42);
    org.autotest.StackAr stackAr51 = new org.autotest.StackAr();
    boolean b52 = stackAr51.isFull();
    org.autotest.StackAr stackAr53 = new org.autotest.StackAr();
    boolean b54 = stackAr53.isEmpty();
    org.autotest.StackAr stackAr55 = new org.autotest.StackAr();
    boolean b56 = stackAr55.isEmpty();
    java.lang.String str57 = stackAr55.toString();
    java.lang.String str58 = stackAr55.toString();
    int i59 = stackAr55.size();
    boolean b60 = stackAr53.equals((java.lang.Object)stackAr55);
    stackAr51.push((java.lang.Object)stackAr55);
    int i62 = stackAr51.size();
    stackAr42.push((java.lang.Object)i62);
    boolean b64 = stackAr22.equals((java.lang.Object)stackAr42);
    org.autotest.StackAr stackAr66 = new org.autotest.StackAr((int)'4');
    stackAr42.push((java.lang.Object)'4');
    java.lang.Object obj68 = null;
    boolean b69 = stackAr42.equals(obj68);
    stackAr15.push(obj68);
    stackAr0.push((java.lang.Object)stackAr15);
    java.lang.String str72 = stackAr0.toString();
    java.lang.String str73 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 10+ "'", obj13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[]"+ "'", str29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[10]"+ "'", str33.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "[]"+ "'", str44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[]"+ "'", str45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[]"+ "'", str49.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[]"+ "'", str57.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "[]"+ "'", str58.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "[[null]]"+ "'", str72.equals("[[null]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "[[null]]"+ "'", str73.equals("[[null]]"));

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    int i4 = stackAr0.size();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    boolean b9 = stackAr7.isFull();
    boolean b10 = stackAr5.equals((java.lang.Object)b9);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    java.lang.String str14 = stackAr11.toString();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    boolean b17 = stackAr11.equals((java.lang.Object)stackAr15);
    boolean b18 = stackAr5.equals((java.lang.Object)stackAr11);
    int i19 = stackAr11.size();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isEmpty();
    java.lang.String str22 = stackAr20.toString();
    int i23 = stackAr20.size();
    boolean b24 = stackAr20.isFull();
    boolean b25 = stackAr11.equals((java.lang.Object)stackAr20);
    boolean b26 = stackAr0.equals((java.lang.Object)stackAr11);
    int i27 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    int i8 = stackAr0.size();
    boolean b9 = stackAr0.isEmpty();
    boolean b10 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isFull();
    boolean b15 = stackAr13.isFull();
    boolean b16 = stackAr11.equals((java.lang.Object)b15);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isFull();
    java.lang.String str19 = stackAr17.toString();
    boolean b20 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b22 = stackAr21.isEmpty();
    java.lang.String str23 = stackAr21.toString();
    java.lang.String str24 = stackAr21.toString();
    int i25 = stackAr21.size();
    stackAr17.push((java.lang.Object)i25);
    java.lang.Object obj27 = stackAr17.top();
    stackAr11.push((java.lang.Object)stackAr17);
    org.autotest.StackAr stackAr29 = new org.autotest.StackAr();
    boolean b31 = stackAr29.equals((java.lang.Object)0);
    stackAr29.push((java.lang.Object)"[]");
    stackAr17.push((java.lang.Object)"[]");
    java.lang.Object obj35 = stackAr17.top();
    boolean b36 = stackAr0.equals((java.lang.Object)stackAr17);
    org.autotest.StackAr stackAr37 = new org.autotest.StackAr();
    boolean b38 = stackAr37.isEmpty();
    java.lang.String str39 = stackAr37.toString();
    org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int)(byte)100);
    boolean b42 = stackAr37.equals((java.lang.Object)stackAr41);
    org.autotest.StackAr stackAr44 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str45 = stackAr44.toString();
    stackAr37.push((java.lang.Object)str45);
    java.lang.String str47 = stackAr37.toString();
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isEmpty();
    boolean b50 = stackAr48.isEmpty();
    int i51 = stackAr48.size();
    boolean b52 = stackAr37.equals((java.lang.Object)i51);
    boolean b53 = stackAr37.isFull();
    stackAr0.push((java.lang.Object)stackAr37);
    java.lang.String str55 = stackAr37.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 0+ "'", obj27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "[]"+ "'", obj35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[]"+ "'", str45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "[[]]"+ "'", str47.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "[[]]"+ "'", str55.equals("[[]]"));

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    stackAr0.push((java.lang.Object)i8);
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isEmpty();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isEmpty();
    java.lang.String str16 = stackAr14.toString();
    java.lang.String str17 = stackAr14.toString();
    int i18 = stackAr14.size();
    boolean b19 = stackAr12.equals((java.lang.Object)stackAr14);
    stackAr10.push((java.lang.Object)stackAr14);
    boolean b21 = stackAr10.isEmpty();
    boolean b22 = stackAr0.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    org.autotest.StackAr stackAr25 = new org.autotest.StackAr();
    boolean b26 = stackAr25.isEmpty();
    java.lang.String str27 = stackAr25.toString();
    java.lang.String str28 = stackAr25.toString();
    int i29 = stackAr25.size();
    boolean b30 = stackAr23.equals((java.lang.Object)stackAr25);
    int i31 = stackAr23.size();
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isEmpty();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isFull();
    boolean b36 = stackAr34.isFull();
    boolean b37 = stackAr32.equals((java.lang.Object)b36);
    org.autotest.StackAr stackAr38 = new org.autotest.StackAr();
    boolean b39 = stackAr38.isEmpty();
    java.lang.String str40 = stackAr38.toString();
    java.lang.String str41 = stackAr38.toString();
    org.autotest.StackAr stackAr42 = new org.autotest.StackAr();
    boolean b43 = stackAr42.isFull();
    boolean b44 = stackAr38.equals((java.lang.Object)stackAr42);
    java.lang.String str45 = stackAr38.toString();
    stackAr32.push((java.lang.Object)stackAr38);
    boolean b47 = stackAr23.equals((java.lang.Object)stackAr32);
    stackAr0.push((java.lang.Object)stackAr32);
    boolean b49 = stackAr32.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[]"+ "'", str27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[]"+ "'", str40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[]"+ "'", str41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[]"+ "'", str45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr0.equals((java.lang.Object)stackAr4);
    boolean b7 = stackAr0.isFull();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr(1);
    boolean b10 = stackAr0.equals((java.lang.Object)1);
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int)'4');
    int i13 = stackAr12.size();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isEmpty();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isFull();
    boolean b18 = stackAr16.isFull();
    boolean b19 = stackAr14.equals((java.lang.Object)b18);
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    java.lang.String str22 = stackAr20.toString();
    boolean b23 = stackAr20.isEmpty();
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
    boolean b25 = stackAr24.isEmpty();
    java.lang.String str26 = stackAr24.toString();
    java.lang.String str27 = stackAr24.toString();
    int i28 = stackAr24.size();
    stackAr20.push((java.lang.Object)i28);
    java.lang.Object obj30 = stackAr20.top();
    stackAr14.push((java.lang.Object)stackAr20);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b34 = stackAr32.equals((java.lang.Object)0);
    stackAr32.push((java.lang.Object)"[]");
    stackAr20.push((java.lang.Object)"[]");
    stackAr12.push((java.lang.Object)stackAr20);
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isEmpty();
    java.lang.String str41 = stackAr39.toString();
    org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int)(byte)100);
    boolean b44 = stackAr39.equals((java.lang.Object)stackAr43);
    org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str47 = stackAr46.toString();
    stackAr39.push((java.lang.Object)str47);
    java.lang.String str49 = stackAr39.toString();
    org.autotest.StackAr stackAr50 = new org.autotest.StackAr();
    boolean b51 = stackAr50.isEmpty();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isEmpty();
    java.lang.String str54 = stackAr52.toString();
    java.lang.String str55 = stackAr52.toString();
    int i56 = stackAr52.size();
    boolean b57 = stackAr50.equals((java.lang.Object)stackAr52);
    stackAr39.push((java.lang.Object)stackAr50);
    stackAr12.push((java.lang.Object)stackAr50);
    boolean b60 = stackAr50.isEmpty();
    boolean b61 = stackAr0.equals((java.lang.Object)b60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[]"+ "'", str27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 0+ "'", obj30.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[]"+ "'", str41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "[]"+ "'", str47.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[[]]"+ "'", str49.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[]"+ "'", str54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "[]"+ "'", str55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isFull();
    java.lang.String str8 = stackAr6.toString();
    boolean b9 = stackAr6.isEmpty();
    stackAr6.push((java.lang.Object)10);
    java.lang.String str12 = stackAr6.toString();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isEmpty();
    java.lang.String str15 = stackAr13.toString();
    java.lang.String str16 = stackAr13.toString();
    boolean b17 = stackAr13.isEmpty();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    java.lang.String str20 = stackAr18.toString();
    java.lang.String str21 = stackAr18.toString();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    boolean b24 = stackAr18.equals((java.lang.Object)stackAr22);
    boolean b25 = stackAr18.isFull();
    stackAr13.push((java.lang.Object)stackAr18);
    boolean b27 = stackAr6.equals((java.lang.Object)stackAr13);
    boolean b28 = stackAr0.equals((java.lang.Object)stackAr13);
    int i29 = stackAr0.size();
    java.lang.String str30 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[10]"+ "'", str12.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    java.lang.Object obj11 = null;
    boolean b12 = stackAr4.equals(obj11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    java.lang.String str30 = stackAr23.toString();
    stackAr17.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    java.lang.String str38 = stackAr36.toString();
    java.lang.String str39 = stackAr36.toString();
    int i40 = stackAr36.size();
    boolean b41 = stackAr34.equals((java.lang.Object)stackAr36);
    stackAr32.push((java.lang.Object)stackAr36);
    int i43 = stackAr32.size();
    stackAr23.push((java.lang.Object)i43);
    boolean b45 = stackAr3.equals((java.lang.Object)stackAr23);
    java.lang.Object obj46 = stackAr23.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 1+ "'", obj46.equals(1));

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr0.equals((java.lang.Object)stackAr4);
    boolean b7 = stackAr0.isFull();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr(1);
    boolean b10 = stackAr0.equals((java.lang.Object)1);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    boolean b13 = stackAr11.isEmpty();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isFull();
    java.lang.String str16 = stackAr14.toString();
    boolean b18 = stackAr14.equals((java.lang.Object)(-1));
    boolean b19 = stackAr11.equals((java.lang.Object)stackAr14);
    boolean b20 = stackAr0.equals((java.lang.Object)stackAr11);
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b22 = stackAr21.isFull();
    java.lang.String str23 = stackAr21.toString();
    boolean b24 = stackAr21.isEmpty();
    boolean b25 = stackAr21.isEmpty();
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isFull();
    java.lang.String str28 = stackAr26.toString();
    boolean b29 = stackAr26.isEmpty();
    stackAr26.push((java.lang.Object)10);
    java.lang.String str32 = stackAr26.toString();
    stackAr21.push((java.lang.Object)stackAr26);
    java.lang.String str34 = stackAr26.toString();
    org.autotest.StackAr stackAr35 = new org.autotest.StackAr();
    boolean b36 = stackAr35.isFull();
    boolean b37 = stackAr35.isFull();
    java.lang.String str38 = stackAr35.toString();
    boolean b39 = stackAr35.isEmpty();
    stackAr26.push((java.lang.Object)stackAr35);
    org.autotest.StackAr stackAr41 = new org.autotest.StackAr();
    boolean b42 = stackAr41.isFull();
    java.lang.String str43 = stackAr41.toString();
    boolean b44 = stackAr41.isEmpty();
    boolean b45 = stackAr41.isEmpty();
    org.autotest.StackAr stackAr46 = new org.autotest.StackAr();
    boolean b47 = stackAr46.isFull();
    java.lang.String str48 = stackAr46.toString();
    boolean b49 = stackAr46.isEmpty();
    stackAr46.push((java.lang.Object)10);
    java.lang.String str52 = stackAr46.toString();
    stackAr41.push((java.lang.Object)stackAr46);
    java.lang.String str54 = stackAr41.toString();
    int i55 = stackAr41.size();
    stackAr35.push((java.lang.Object)i55);
    boolean b57 = stackAr0.equals((java.lang.Object)stackAr35);
    int i58 = stackAr35.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[10]"+ "'", str32.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[10]"+ "'", str34.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[]"+ "'", str43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "[]"+ "'", str48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "[10]"+ "'", str52.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[[10]]"+ "'", str54.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    int i5 = stackAr0.size();
    java.lang.String str6 = stackAr0.toString();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isEmpty();
    boolean b9 = stackAr7.isEmpty();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isFull();
    boolean b14 = stackAr12.isFull();
    boolean b15 = stackAr10.equals((java.lang.Object)b14);
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isFull();
    java.lang.String str18 = stackAr16.toString();
    boolean b19 = stackAr16.isEmpty();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isEmpty();
    java.lang.String str22 = stackAr20.toString();
    java.lang.String str23 = stackAr20.toString();
    int i24 = stackAr20.size();
    stackAr16.push((java.lang.Object)i24);
    java.lang.Object obj26 = stackAr16.top();
    stackAr10.push((java.lang.Object)stackAr16);
    boolean b28 = stackAr7.equals((java.lang.Object)stackAr16);
    boolean b29 = stackAr0.equals((java.lang.Object)stackAr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 0+ "'", obj26.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    int i2 = stackAr0.size();
    int i3 = stackAr0.size();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    int i7 = stackAr5.size();
    stackAr0.push((java.lang.Object)i7);
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int)(byte)100);
    boolean b11 = stackAr10.isEmpty();
    stackAr0.push((java.lang.Object)stackAr10);
    int i13 = stackAr10.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)0);
    boolean b2 = stackAr1.isEmpty();
    boolean b4 = stackAr1.equals((java.lang.Object)100);
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isEmpty();
    java.lang.String str11 = stackAr9.toString();
    java.lang.String str12 = stackAr9.toString();
    int i13 = stackAr9.size();
    stackAr5.push((java.lang.Object)i13);
    int i15 = stackAr5.size();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isEmpty();
    java.lang.String str18 = stackAr16.toString();
    java.lang.String str19 = stackAr16.toString();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    boolean b22 = stackAr16.equals((java.lang.Object)stackAr20);
    stackAr5.push((java.lang.Object)stackAr20);
    boolean b24 = stackAr1.equals((java.lang.Object)stackAr20);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj25 = stackAr1.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    boolean b8 = stackAr4.isEmpty();
    stackAr0.push((java.lang.Object)b8);
    boolean b10 = stackAr0.isFull();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    int i14 = stackAr11.size();
    stackAr0.push((java.lang.Object)i14);
    java.lang.String str16 = stackAr0.toString();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isFull();
    java.lang.String str19 = stackAr17.toString();
    boolean b20 = stackAr17.isEmpty();
    boolean b21 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    java.lang.String str24 = stackAr22.toString();
    boolean b25 = stackAr22.isEmpty();
    stackAr22.push((java.lang.Object)10);
    java.lang.String str28 = stackAr22.toString();
    stackAr17.push((java.lang.Object)stackAr22);
    java.lang.String str30 = stackAr22.toString();
    org.autotest.StackAr stackAr31 = new org.autotest.StackAr();
    boolean b32 = stackAr31.isFull();
    boolean b33 = stackAr31.isFull();
    java.lang.String str34 = stackAr31.toString();
    boolean b35 = stackAr31.isEmpty();
    stackAr22.push((java.lang.Object)stackAr31);
    stackAr0.push((java.lang.Object)stackAr22);
    org.autotest.StackAr stackAr38 = new org.autotest.StackAr();
    boolean b39 = stackAr38.isFull();
    java.lang.String str40 = stackAr38.toString();
    boolean b41 = stackAr38.isEmpty();
    stackAr38.push((java.lang.Object)10);
    java.lang.Object obj44 = stackAr38.top();
    org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int)'4');
    boolean b47 = stackAr46.isFull();
    boolean b48 = stackAr38.equals((java.lang.Object)stackAr46);
    boolean b49 = stackAr46.isFull();
    boolean b50 = stackAr0.equals((java.lang.Object)stackAr46);
    java.lang.Object obj51 = stackAr0.top();
    java.lang.Object obj52 = stackAr0.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[true,0]"+ "'", str16.equals("[true,0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[10]"+ "'", str28.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[10]"+ "'", str30.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[]"+ "'", str34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[]"+ "'", str40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 10+ "'", obj44.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj52);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str2 = stackAr1.toString();
    boolean b3 = stackAr1.isEmpty();
    boolean b4 = stackAr1.isEmpty();
    java.lang.String str5 = stackAr1.toString();
    boolean b6 = stackAr1.isFull();
    java.lang.Object obj7 = null;
    boolean b8 = stackAr1.equals(obj7);
    java.lang.String str9 = stackAr1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    boolean b2 = stackAr1.isEmpty();
    boolean b3 = stackAr1.isEmpty();
    boolean b5 = stackAr1.equals((java.lang.Object)(-1));
    int i6 = stackAr1.size();
    stackAr1.push((java.lang.Object)"hi!");
    int i9 = stackAr1.size();
    boolean b10 = stackAr1.isFull();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isFull();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isEmpty();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    java.lang.String str17 = stackAr15.toString();
    java.lang.String str18 = stackAr15.toString();
    int i19 = stackAr15.size();
    boolean b20 = stackAr13.equals((java.lang.Object)stackAr15);
    stackAr11.push((java.lang.Object)stackAr15);
    stackAr1.push((java.lang.Object)stackAr11);
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int)(byte)100);
    java.lang.String str25 = stackAr24.toString();
    int i26 = stackAr24.size();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    java.lang.String str29 = stackAr27.toString();
    boolean b30 = stackAr27.isEmpty();
    org.autotest.StackAr stackAr31 = new org.autotest.StackAr();
    boolean b32 = stackAr31.isFull();
    java.lang.String str33 = stackAr31.toString();
    boolean b34 = stackAr31.isEmpty();
    stackAr31.push((java.lang.Object)10);
    boolean b37 = stackAr27.equals((java.lang.Object)stackAr31);
    java.lang.Object obj38 = stackAr31.top();
    boolean b39 = stackAr24.equals(obj38);
    stackAr11.push((java.lang.Object)b39);
    org.autotest.StackAr stackAr41 = new org.autotest.StackAr();
    boolean b42 = stackAr41.isEmpty();
    boolean b43 = stackAr41.isEmpty();
    org.autotest.StackAr stackAr44 = new org.autotest.StackAr();
    boolean b45 = stackAr44.isFull();
    java.lang.String str46 = stackAr44.toString();
    boolean b48 = stackAr44.equals((java.lang.Object)(-1));
    boolean b49 = stackAr41.equals((java.lang.Object)stackAr44);
    org.autotest.StackAr stackAr50 = new org.autotest.StackAr();
    boolean b51 = stackAr50.isEmpty();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isFull();
    boolean b54 = stackAr52.isFull();
    boolean b55 = stackAr50.equals((java.lang.Object)b54);
    int i56 = stackAr50.size();
    boolean b57 = stackAr50.isEmpty();
    stackAr44.push((java.lang.Object)stackAr50);
    stackAr11.push((java.lang.Object)stackAr50);
    java.lang.String str60 = stackAr11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[]"+ "'", str29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[]"+ "'", str33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 10+ "'", obj38.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[]"+ "'", str46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "[[],false,[]]"+ "'", str60.equals("[[],false,[]]"));

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    java.lang.String str1 = stackAr0.toString();
    java.lang.String str2 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    java.lang.Object obj14 = stackAr5.top();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    java.lang.String str17 = stackAr15.toString();
    java.lang.String str18 = stackAr15.toString();
    int i19 = stackAr15.size();
    boolean b20 = stackAr15.isEmpty();
    int i21 = stackAr15.size();
    stackAr5.push((java.lang.Object)stackAr15);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isFull();
    java.lang.String str25 = stackAr23.toString();
    boolean b26 = stackAr23.isEmpty();
    stackAr23.push((java.lang.Object)10);
    java.lang.Object obj29 = stackAr23.top();
    org.autotest.StackAr stackAr30 = new org.autotest.StackAr();
    boolean b31 = stackAr30.isFull();
    java.lang.String str32 = stackAr30.toString();
    boolean b33 = stackAr30.isEmpty();
    stackAr30.push((java.lang.Object)10);
    java.lang.Object obj36 = stackAr30.top();
    org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int)'4');
    boolean b39 = stackAr38.isFull();
    boolean b40 = stackAr30.equals((java.lang.Object)stackAr38);
    org.autotest.StackAr stackAr41 = new org.autotest.StackAr();
    boolean b42 = stackAr41.isEmpty();
    java.lang.String str43 = stackAr41.toString();
    java.lang.String str44 = stackAr41.toString();
    org.autotest.StackAr stackAr45 = new org.autotest.StackAr();
    boolean b46 = stackAr45.isFull();
    boolean b47 = stackAr41.equals((java.lang.Object)stackAr45);
    int i48 = stackAr45.size();
    stackAr38.push((java.lang.Object)stackAr45);
    stackAr23.push((java.lang.Object)stackAr45);
    boolean b51 = stackAr23.isEmpty();
    int i52 = stackAr23.size();
    java.lang.String str53 = stackAr23.toString();
    stackAr15.push((java.lang.Object)str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10+ "'", obj14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 10+ "'", obj29.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[]"+ "'", str32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 10+ "'", obj36.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[]"+ "'", str43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "[]"+ "'", str44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[10,[]]"+ "'", str53.equals("[10,[]]"));

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    int i11 = stackAr0.size();
    java.lang.Object obj12 = stackAr0.top();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isFull();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    java.lang.String str19 = stackAr17.toString();
    java.lang.String str20 = stackAr17.toString();
    int i21 = stackAr17.size();
    boolean b22 = stackAr15.equals((java.lang.Object)stackAr17);
    stackAr13.push((java.lang.Object)stackAr17);
    stackAr0.push((java.lang.Object)stackAr13);
    java.lang.Object obj25 = stackAr0.top();
    int i26 = stackAr0.size();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isEmpty();
    boolean b29 = stackAr27.isEmpty();
    org.autotest.StackAr stackAr30 = new org.autotest.StackAr();
    boolean b31 = stackAr30.isFull();
    java.lang.String str32 = stackAr30.toString();
    boolean b34 = stackAr30.equals((java.lang.Object)(-1));
    boolean b35 = stackAr27.equals((java.lang.Object)stackAr30);
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    org.autotest.StackAr stackAr38 = new org.autotest.StackAr();
    boolean b39 = stackAr38.isFull();
    boolean b40 = stackAr38.isFull();
    boolean b41 = stackAr36.equals((java.lang.Object)b40);
    int i42 = stackAr36.size();
    boolean b43 = stackAr36.isEmpty();
    stackAr30.push((java.lang.Object)stackAr36);
    int i45 = stackAr30.size();
    org.autotest.StackAr stackAr47 = new org.autotest.StackAr(10);
    boolean b48 = stackAr30.equals((java.lang.Object)10);
    boolean b49 = stackAr0.equals((java.lang.Object)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[]"+ "'", str32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    boolean b2 = stackAr1.isEmpty();
    boolean b3 = stackAr1.isEmpty();
    boolean b5 = stackAr1.equals((java.lang.Object)(-1));
    boolean b6 = stackAr1.isFull();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b10 = stackAr7.isEmpty();
    boolean b11 = stackAr7.isEmpty();
    boolean b12 = stackAr7.isEmpty();
    int i13 = stackAr7.size();
    boolean b14 = stackAr1.equals((java.lang.Object)stackAr7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str8 = stackAr7.toString();
    stackAr0.push((java.lang.Object)str8);
    java.lang.Object obj10 = stackAr0.top();
    java.lang.String str11 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "[]"+ "'", obj10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[[]]"+ "'", str11.equals("[[]]"));

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.String str6 = stackAr0.toString();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isEmpty();
    java.lang.String str9 = stackAr7.toString();
    java.lang.String str10 = stackAr7.toString();
    boolean b11 = stackAr7.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isEmpty();
    java.lang.String str14 = stackAr12.toString();
    java.lang.String str15 = stackAr12.toString();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isFull();
    boolean b18 = stackAr12.equals((java.lang.Object)stackAr16);
    boolean b19 = stackAr12.isFull();
    stackAr7.push((java.lang.Object)stackAr12);
    boolean b21 = stackAr0.equals((java.lang.Object)stackAr7);
    boolean b23 = stackAr0.equals((java.lang.Object)0.0d);
    boolean b24 = stackAr0.isFull();
    org.autotest.StackAr stackAr25 = new org.autotest.StackAr();
    boolean b26 = stackAr25.isFull();
    java.lang.String str27 = stackAr25.toString();
    boolean b28 = stackAr25.isEmpty();
    boolean b29 = stackAr25.isEmpty();
    org.autotest.StackAr stackAr30 = new org.autotest.StackAr();
    boolean b31 = stackAr30.isFull();
    java.lang.String str32 = stackAr30.toString();
    boolean b33 = stackAr30.isEmpty();
    stackAr30.push((java.lang.Object)10);
    java.lang.String str36 = stackAr30.toString();
    stackAr25.push((java.lang.Object)stackAr30);
    java.lang.String str38 = stackAr30.toString();
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isFull();
    boolean b41 = stackAr39.isFull();
    java.lang.String str42 = stackAr39.toString();
    boolean b43 = stackAr39.isEmpty();
    stackAr30.push((java.lang.Object)stackAr39);
    int i45 = stackAr30.size();
    org.autotest.StackAr stackAr46 = new org.autotest.StackAr();
    boolean b47 = stackAr46.isFull();
    java.lang.String str48 = stackAr46.toString();
    boolean b49 = stackAr46.isEmpty();
    stackAr46.push((java.lang.Object)10);
    java.lang.Object obj52 = stackAr46.top();
    stackAr30.push((java.lang.Object)stackAr46);
    stackAr0.push((java.lang.Object)stackAr30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[10]"+ "'", str6.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[]"+ "'", str27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[]"+ "'", str32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[10]"+ "'", str36.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[10]"+ "'", str38.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[]"+ "'", str42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "[]"+ "'", str48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj52 + "' != '" + 10+ "'", obj52.equals(10));

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr0.equals((java.lang.Object)stackAr4);
    boolean b7 = stackAr0.isFull();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr(1);
    boolean b10 = stackAr0.equals((java.lang.Object)1);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    boolean b13 = stackAr11.isEmpty();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isFull();
    java.lang.String str16 = stackAr14.toString();
    boolean b18 = stackAr14.equals((java.lang.Object)(-1));
    boolean b19 = stackAr11.equals((java.lang.Object)stackAr14);
    boolean b20 = stackAr0.equals((java.lang.Object)stackAr11);
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b22 = stackAr21.isFull();
    java.lang.String str23 = stackAr21.toString();
    boolean b24 = stackAr21.isEmpty();
    boolean b25 = stackAr21.isEmpty();
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isFull();
    java.lang.String str28 = stackAr26.toString();
    boolean b29 = stackAr26.isEmpty();
    stackAr26.push((java.lang.Object)10);
    java.lang.String str32 = stackAr26.toString();
    stackAr21.push((java.lang.Object)stackAr26);
    java.lang.String str34 = stackAr26.toString();
    org.autotest.StackAr stackAr35 = new org.autotest.StackAr();
    boolean b36 = stackAr35.isFull();
    boolean b37 = stackAr35.isFull();
    java.lang.String str38 = stackAr35.toString();
    boolean b39 = stackAr35.isEmpty();
    stackAr26.push((java.lang.Object)stackAr35);
    org.autotest.StackAr stackAr41 = new org.autotest.StackAr();
    boolean b42 = stackAr41.isFull();
    java.lang.String str43 = stackAr41.toString();
    boolean b44 = stackAr41.isEmpty();
    boolean b45 = stackAr41.isEmpty();
    org.autotest.StackAr stackAr46 = new org.autotest.StackAr();
    boolean b47 = stackAr46.isFull();
    java.lang.String str48 = stackAr46.toString();
    boolean b49 = stackAr46.isEmpty();
    stackAr46.push((java.lang.Object)10);
    java.lang.String str52 = stackAr46.toString();
    stackAr41.push((java.lang.Object)stackAr46);
    java.lang.String str54 = stackAr41.toString();
    int i55 = stackAr41.size();
    stackAr35.push((java.lang.Object)i55);
    boolean b57 = stackAr0.equals((java.lang.Object)stackAr35);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj58 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[10]"+ "'", str32.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[10]"+ "'", str34.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[]"+ "'", str43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "[]"+ "'", str48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "[10]"+ "'", str52.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[[10]]"+ "'", str54.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)'4');
    int i2 = stackAr1.size();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    boolean b7 = stackAr5.isFull();
    boolean b8 = stackAr3.equals((java.lang.Object)b7);
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    java.lang.String str11 = stackAr9.toString();
    boolean b12 = stackAr9.isEmpty();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isEmpty();
    java.lang.String str15 = stackAr13.toString();
    java.lang.String str16 = stackAr13.toString();
    int i17 = stackAr13.size();
    stackAr9.push((java.lang.Object)i17);
    java.lang.Object obj19 = stackAr9.top();
    stackAr3.push((java.lang.Object)stackAr9);
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b23 = stackAr21.equals((java.lang.Object)0);
    stackAr21.push((java.lang.Object)"[]");
    stackAr9.push((java.lang.Object)"[]");
    stackAr1.push((java.lang.Object)stackAr9);
    java.lang.String str28 = stackAr9.toString();
    org.autotest.StackAr stackAr29 = new org.autotest.StackAr();
    boolean b30 = stackAr29.isEmpty();
    java.lang.String str31 = stackAr29.toString();
    org.autotest.StackAr stackAr33 = new org.autotest.StackAr((int)(byte)100);
    boolean b34 = stackAr29.equals((java.lang.Object)stackAr33);
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str37 = stackAr36.toString();
    stackAr29.push((java.lang.Object)str37);
    java.lang.String str39 = stackAr29.toString();
    boolean b40 = stackAr9.equals((java.lang.Object)stackAr29);
    java.lang.String str41 = stackAr29.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 0+ "'", obj19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[0,[]]"+ "'", str28.equals("[0,[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[]"+ "'", str31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[]"+ "'", str37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[[]]"+ "'", str39.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[[]]"+ "'", str41.equals("[[]]"));

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isFull();
    java.lang.String str8 = stackAr6.toString();
    boolean b9 = stackAr6.isEmpty();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isEmpty();
    java.lang.String str12 = stackAr10.toString();
    java.lang.String str13 = stackAr10.toString();
    int i14 = stackAr10.size();
    stackAr6.push((java.lang.Object)i14);
    java.lang.Object obj16 = stackAr6.top();
    stackAr0.push((java.lang.Object)stackAr6);
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isFull();
    java.lang.String str20 = stackAr18.toString();
    boolean b21 = stackAr18.isEmpty();
    boolean b22 = stackAr18.isEmpty();
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isFull();
    java.lang.String str25 = stackAr23.toString();
    boolean b26 = stackAr23.isEmpty();
    stackAr23.push((java.lang.Object)10);
    java.lang.String str29 = stackAr23.toString();
    stackAr18.push((java.lang.Object)stackAr23);
    boolean b31 = stackAr18.isEmpty();
    boolean b32 = stackAr6.equals((java.lang.Object)b31);
    boolean b33 = stackAr6.isFull();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    java.lang.String str36 = stackAr34.toString();
    org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int)(byte)100);
    boolean b39 = stackAr34.equals((java.lang.Object)stackAr38);
    int i40 = stackAr34.size();
    boolean b41 = stackAr34.isFull();
    boolean b42 = stackAr34.isFull();
    boolean b43 = stackAr34.isEmpty();
    org.autotest.StackAr stackAr44 = new org.autotest.StackAr();
    boolean b45 = stackAr44.isEmpty();
    org.autotest.StackAr stackAr46 = new org.autotest.StackAr();
    boolean b47 = stackAr46.isFull();
    boolean b48 = stackAr46.isFull();
    boolean b49 = stackAr44.equals((java.lang.Object)b48);
    org.autotest.StackAr stackAr50 = new org.autotest.StackAr();
    boolean b51 = stackAr50.isEmpty();
    java.lang.String str52 = stackAr50.toString();
    java.lang.String str53 = stackAr50.toString();
    org.autotest.StackAr stackAr54 = new org.autotest.StackAr();
    boolean b55 = stackAr54.isFull();
    boolean b56 = stackAr50.equals((java.lang.Object)stackAr54);
    java.lang.String str57 = stackAr50.toString();
    stackAr44.push((java.lang.Object)stackAr50);
    org.autotest.StackAr stackAr59 = new org.autotest.StackAr();
    boolean b60 = stackAr59.isFull();
    org.autotest.StackAr stackAr61 = new org.autotest.StackAr();
    boolean b62 = stackAr61.isEmpty();
    org.autotest.StackAr stackAr63 = new org.autotest.StackAr();
    boolean b64 = stackAr63.isEmpty();
    java.lang.String str65 = stackAr63.toString();
    java.lang.String str66 = stackAr63.toString();
    int i67 = stackAr63.size();
    boolean b68 = stackAr61.equals((java.lang.Object)stackAr63);
    stackAr59.push((java.lang.Object)stackAr63);
    int i70 = stackAr59.size();
    stackAr50.push((java.lang.Object)i70);
    boolean b72 = stackAr50.isEmpty();
    stackAr34.push((java.lang.Object)stackAr50);
    stackAr6.push((java.lang.Object)stackAr34);
    int i75 = stackAr6.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[10]"+ "'", str29.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[]"+ "'", str36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "[]"+ "'", str52.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[]"+ "'", str53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[]"+ "'", str57.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "[]"+ "'", str65.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[]"+ "'", str66.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 2);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    int i8 = stackAr0.size();
    boolean b9 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj10 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isFull();
    java.lang.String str8 = stackAr6.toString();
    boolean b9 = stackAr6.isEmpty();
    stackAr6.push((java.lang.Object)10);
    java.lang.String str12 = stackAr6.toString();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isEmpty();
    java.lang.String str15 = stackAr13.toString();
    java.lang.String str16 = stackAr13.toString();
    boolean b17 = stackAr13.isEmpty();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    java.lang.String str20 = stackAr18.toString();
    java.lang.String str21 = stackAr18.toString();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    boolean b24 = stackAr18.equals((java.lang.Object)stackAr22);
    boolean b25 = stackAr18.isFull();
    stackAr13.push((java.lang.Object)stackAr18);
    boolean b27 = stackAr6.equals((java.lang.Object)stackAr13);
    boolean b28 = stackAr0.equals((java.lang.Object)stackAr13);
    java.lang.String str29 = stackAr13.toString();
    org.autotest.StackAr stackAr30 = new org.autotest.StackAr();
    boolean b31 = stackAr30.isFull();
    java.lang.String str32 = stackAr30.toString();
    boolean b33 = stackAr30.isEmpty();
    boolean b34 = stackAr30.isEmpty();
    org.autotest.StackAr stackAr35 = new org.autotest.StackAr();
    boolean b36 = stackAr35.isFull();
    java.lang.String str37 = stackAr35.toString();
    boolean b38 = stackAr35.isEmpty();
    stackAr35.push((java.lang.Object)10);
    java.lang.String str41 = stackAr35.toString();
    stackAr30.push((java.lang.Object)stackAr35);
    java.lang.String str43 = stackAr35.toString();
    org.autotest.StackAr stackAr44 = new org.autotest.StackAr();
    boolean b45 = stackAr44.isFull();
    boolean b46 = stackAr44.isFull();
    java.lang.String str47 = stackAr44.toString();
    boolean b48 = stackAr44.isEmpty();
    stackAr35.push((java.lang.Object)stackAr44);
    boolean b50 = stackAr13.equals((java.lang.Object)stackAr35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[10]"+ "'", str12.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[[]]"+ "'", str29.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[]"+ "'", str32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[]"+ "'", str37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[10]"+ "'", str41.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[10]"+ "'", str43.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "[]"+ "'", str47.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    boolean b8 = stackAr4.isEmpty();
    stackAr0.push((java.lang.Object)b8);
    boolean b10 = stackAr0.isFull();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    int i14 = stackAr11.size();
    stackAr0.push((java.lang.Object)i14);
    int i16 = stackAr0.size();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int)(byte)100);
    boolean b19 = stackAr18.isEmpty();
    boolean b20 = stackAr18.isEmpty();
    boolean b21 = stackAr0.equals((java.lang.Object)stackAr18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)0);
    int i2 = stackAr1.size();
    boolean b3 = stackAr1.isFull();
    boolean b4 = stackAr1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    boolean b2 = stackAr1.isEmpty();
    boolean b3 = stackAr1.isEmpty();
    boolean b5 = stackAr1.equals((java.lang.Object)(-1));
    int i6 = stackAr1.size();
    stackAr1.push((java.lang.Object)"hi!");
    int i9 = stackAr1.size();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    java.lang.String str11 = stackAr10.toString();
    boolean b12 = stackAr10.isEmpty();
    int i13 = stackAr10.size();
    boolean b14 = stackAr1.equals((java.lang.Object)i13);
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isFull();
    boolean b19 = stackAr17.isFull();
    boolean b20 = stackAr15.equals((java.lang.Object)b19);
    boolean b21 = stackAr1.equals((java.lang.Object)b20);
    boolean b22 = stackAr1.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    int i2 = stackAr1.size();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr4.isEmpty();
    boolean b6 = stackAr4.isEmpty();
    int i7 = stackAr4.size();
    boolean b8 = stackAr4.isFull();
    boolean b9 = stackAr1.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b12 = stackAr10.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isFull();
    java.lang.String str15 = stackAr13.toString();
    boolean b16 = stackAr13.isEmpty();
    boolean b17 = stackAr13.isEmpty();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isFull();
    java.lang.String str20 = stackAr18.toString();
    boolean b21 = stackAr18.isEmpty();
    stackAr18.push((java.lang.Object)10);
    java.lang.String str24 = stackAr18.toString();
    stackAr13.push((java.lang.Object)stackAr18);
    stackAr10.push((java.lang.Object)stackAr13);
    stackAr1.push((java.lang.Object)stackAr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[10]"+ "'", str24.equals("[10]"));

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b10 = stackAr7.isEmpty();
    stackAr7.push((java.lang.Object)10);
    java.lang.Object obj13 = stackAr7.top();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int)'4');
    boolean b16 = stackAr15.isFull();
    boolean b17 = stackAr7.equals((java.lang.Object)stackAr15);
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    java.lang.String str20 = stackAr18.toString();
    java.lang.String str21 = stackAr18.toString();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    boolean b24 = stackAr18.equals((java.lang.Object)stackAr22);
    int i25 = stackAr22.size();
    stackAr15.push((java.lang.Object)stackAr22);
    stackAr0.push((java.lang.Object)stackAr22);
    java.lang.String str28 = stackAr22.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 10+ "'", obj13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    stackAr4.push((java.lang.Object)10);
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr4);
    int i11 = stackAr4.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isFull();
    boolean b16 = stackAr14.isFull();
    java.lang.String str17 = stackAr14.toString();
    boolean b18 = stackAr14.isEmpty();
    stackAr5.push((java.lang.Object)stackAr14);
    boolean b20 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b22 = stackAr21.isEmpty();
    java.lang.String str23 = stackAr21.toString();
    org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int)(byte)100);
    boolean b26 = stackAr21.equals((java.lang.Object)stackAr25);
    int i27 = stackAr21.size();
    boolean b28 = stackAr21.isFull();
    boolean b29 = stackAr21.isFull();
    boolean b30 = stackAr21.isEmpty();
    boolean b31 = stackAr5.equals((java.lang.Object)b30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test353"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str14 = stackAr5.toString();
    boolean b15 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    java.lang.String str17 = stackAr16.toString();
    boolean b18 = stackAr16.isEmpty();
    int i19 = stackAr16.size();
    int i20 = stackAr16.size();
    int i21 = stackAr16.size();
    stackAr5.push((java.lang.Object)i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    java.lang.Object obj3 = null;
    boolean b4 = stackAr0.equals(obj3);
    java.lang.String str5 = stackAr0.toString();
    boolean b7 = stackAr0.equals((java.lang.Object)"[[10]]");
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b10 = stackAr8.equals((java.lang.Object)0);
    stackAr8.push((java.lang.Object)"[]");
    java.lang.String str13 = stackAr8.toString();
    boolean b14 = stackAr0.equals((java.lang.Object)str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[[]]"+ "'", str13.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b3 = stackAr0.equals((java.lang.Object)100);
    java.lang.String str4 = stackAr0.toString();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    boolean b9 = stackAr7.isFull();
    boolean b10 = stackAr5.equals((java.lang.Object)b9);
    java.lang.Object obj11 = null;
    boolean b12 = stackAr5.equals(obj11);
    boolean b13 = stackAr5.isEmpty();
    java.lang.String str14 = stackAr5.toString();
    boolean b15 = stackAr0.equals((java.lang.Object)str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    java.lang.Object obj14 = stackAr5.top();
    boolean b15 = stackAr5.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10+ "'", obj14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(short)1);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stackAr1.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    int i8 = stackAr0.size();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int)(short)100);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isFull();
    java.lang.String str13 = stackAr11.toString();
    boolean b14 = stackAr11.isEmpty();
    stackAr11.push((java.lang.Object)100.0d);
    java.lang.String str17 = stackAr11.toString();
    stackAr10.push((java.lang.Object)str17);
    int i19 = stackAr10.size();
    stackAr0.push((java.lang.Object)i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[100.0]"+ "'", str17.equals("[100.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    int i5 = stackAr0.size();
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isFull();
    java.lang.String str8 = stackAr6.toString();
    boolean b9 = stackAr6.isEmpty();
    stackAr6.push((java.lang.Object)10);
    java.lang.Object obj12 = stackAr6.top();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isFull();
    java.lang.String str15 = stackAr13.toString();
    boolean b16 = stackAr13.isEmpty();
    stackAr13.push((java.lang.Object)10);
    java.lang.Object obj19 = stackAr13.top();
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int)'4');
    boolean b22 = stackAr21.isFull();
    boolean b23 = stackAr13.equals((java.lang.Object)stackAr21);
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
    boolean b25 = stackAr24.isEmpty();
    java.lang.String str26 = stackAr24.toString();
    java.lang.String str27 = stackAr24.toString();
    org.autotest.StackAr stackAr28 = new org.autotest.StackAr();
    boolean b29 = stackAr28.isFull();
    boolean b30 = stackAr24.equals((java.lang.Object)stackAr28);
    int i31 = stackAr28.size();
    stackAr21.push((java.lang.Object)stackAr28);
    stackAr6.push((java.lang.Object)stackAr28);
    boolean b34 = stackAr6.isEmpty();
    boolean b35 = stackAr0.equals((java.lang.Object)b34);
    int i36 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 10+ "'", obj12.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 10+ "'", obj19.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[]"+ "'", str27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isEmpty();
    java.lang.String str16 = stackAr14.toString();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int)(byte)100);
    boolean b19 = stackAr14.equals((java.lang.Object)stackAr18);
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    java.lang.String str22 = stackAr20.toString();
    boolean b23 = stackAr20.isEmpty();
    stackAr20.push((java.lang.Object)10);
    java.lang.String str26 = stackAr20.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isEmpty();
    java.lang.String str29 = stackAr27.toString();
    java.lang.String str30 = stackAr27.toString();
    boolean b31 = stackAr27.isEmpty();
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isEmpty();
    java.lang.String str34 = stackAr32.toString();
    java.lang.String str35 = stackAr32.toString();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isFull();
    boolean b38 = stackAr32.equals((java.lang.Object)stackAr36);
    boolean b39 = stackAr32.isFull();
    stackAr27.push((java.lang.Object)stackAr32);
    boolean b41 = stackAr20.equals((java.lang.Object)stackAr27);
    boolean b42 = stackAr14.equals((java.lang.Object)stackAr27);
    boolean b43 = stackAr5.equals((java.lang.Object)b42);
    int i44 = stackAr5.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[10]"+ "'", str26.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[]"+ "'", str29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[]"+ "'", str34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[]"+ "'", str35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b4 = stackAr0.equals((java.lang.Object)(-1));
    boolean b5 = stackAr0.isEmpty();
    int i6 = stackAr0.size();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b10 = stackAr7.isEmpty();
    boolean b11 = stackAr7.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isFull();
    java.lang.String str14 = stackAr12.toString();
    boolean b15 = stackAr12.isEmpty();
    stackAr12.push((java.lang.Object)10);
    java.lang.String str18 = stackAr12.toString();
    stackAr7.push((java.lang.Object)stackAr12);
    java.lang.String str20 = stackAr7.toString();
    stackAr0.push((java.lang.Object)str20);
    int i22 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[10]"+ "'", str18.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[[10]]"+ "'", str20.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    java.lang.String str11 = stackAr8.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj12 = stackAr8.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str2 = stackAr1.toString();
    boolean b3 = stackAr1.isEmpty();
    java.lang.String str4 = stackAr1.toString();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isEmpty();
    java.lang.String str9 = stackAr7.toString();
    java.lang.String str10 = stackAr7.toString();
    int i11 = stackAr7.size();
    boolean b12 = stackAr5.equals((java.lang.Object)stackAr7);
    int i13 = stackAr5.size();
    boolean b15 = stackAr5.equals((java.lang.Object)(-1));
    stackAr1.push((java.lang.Object)stackAr5);
    java.lang.String str17 = stackAr5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test364"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    java.lang.String str30 = stackAr23.toString();
    stackAr17.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    java.lang.String str38 = stackAr36.toString();
    java.lang.String str39 = stackAr36.toString();
    int i40 = stackAr36.size();
    boolean b41 = stackAr34.equals((java.lang.Object)stackAr36);
    stackAr32.push((java.lang.Object)stackAr36);
    int i43 = stackAr32.size();
    stackAr23.push((java.lang.Object)i43);
    boolean b45 = stackAr3.equals((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int)'4');
    stackAr23.push((java.lang.Object)'4');
    java.lang.Object obj49 = null;
    boolean b50 = stackAr23.equals(obj49);
    java.lang.String str51 = stackAr23.toString();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isEmpty();
    boolean b54 = stackAr52.isEmpty();
    org.autotest.StackAr stackAr55 = new org.autotest.StackAr();
    boolean b56 = stackAr55.isFull();
    java.lang.String str57 = stackAr55.toString();
    boolean b59 = stackAr55.equals((java.lang.Object)(-1));
    boolean b60 = stackAr52.equals((java.lang.Object)stackAr55);
    org.autotest.StackAr stackAr62 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str63 = stackAr62.toString();
    stackAr55.push((java.lang.Object)str63);
    org.autotest.StackAr stackAr65 = new org.autotest.StackAr();
    boolean b66 = stackAr65.isFull();
    java.lang.String str67 = stackAr65.toString();
    boolean b68 = stackAr65.isEmpty();
    boolean b69 = stackAr65.isEmpty();
    org.autotest.StackAr stackAr70 = new org.autotest.StackAr();
    boolean b71 = stackAr70.isFull();
    java.lang.String str72 = stackAr70.toString();
    boolean b73 = stackAr70.isEmpty();
    stackAr70.push((java.lang.Object)10);
    java.lang.String str76 = stackAr70.toString();
    stackAr65.push((java.lang.Object)stackAr70);
    java.lang.String str78 = stackAr70.toString();
    org.autotest.StackAr stackAr79 = new org.autotest.StackAr();
    boolean b80 = stackAr79.isFull();
    boolean b81 = stackAr79.isFull();
    java.lang.String str82 = stackAr79.toString();
    boolean b83 = stackAr79.isEmpty();
    stackAr70.push((java.lang.Object)stackAr79);
    org.autotest.StackAr stackAr86 = new org.autotest.StackAr((int)' ');
    boolean b87 = stackAr86.isEmpty();
    stackAr70.push((java.lang.Object)stackAr86);
    boolean b89 = stackAr55.equals((java.lang.Object)stackAr70);
    boolean b90 = stackAr70.isEmpty();
    stackAr23.push((java.lang.Object)stackAr70);
    boolean b92 = stackAr23.isEmpty();
    java.lang.Object obj93 = stackAr23.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[1,4]"+ "'", str51.equals("[1,4]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[]"+ "'", str57.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "[]"+ "'", str63.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]"+ "'", str67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "[]"+ "'", str72.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "[10]"+ "'", str76.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "[10]"+ "'", str78.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "[]"+ "'", str82.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj93);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test365"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    boolean b14 = stackAr0.isEmpty();
    java.lang.Object obj15 = stackAr0.top();
    boolean b16 = stackAr0.isFull();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    boolean b19 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    java.lang.String str22 = stackAr20.toString();
    boolean b24 = stackAr20.equals((java.lang.Object)(-1));
    boolean b25 = stackAr17.equals((java.lang.Object)stackAr20);
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isEmpty();
    org.autotest.StackAr stackAr28 = new org.autotest.StackAr();
    boolean b29 = stackAr28.isFull();
    boolean b30 = stackAr28.isFull();
    boolean b31 = stackAr26.equals((java.lang.Object)b30);
    int i32 = stackAr26.size();
    boolean b33 = stackAr26.isEmpty();
    stackAr20.push((java.lang.Object)stackAr26);
    boolean b35 = stackAr0.equals((java.lang.Object)stackAr26);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj36 = stackAr26.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test366"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isFull();
    boolean b16 = stackAr14.isFull();
    java.lang.String str17 = stackAr14.toString();
    boolean b18 = stackAr14.isEmpty();
    stackAr5.push((java.lang.Object)stackAr14);
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    java.lang.String str22 = stackAr20.toString();
    boolean b23 = stackAr20.isEmpty();
    boolean b24 = stackAr20.isEmpty();
    org.autotest.StackAr stackAr25 = new org.autotest.StackAr();
    boolean b26 = stackAr25.isFull();
    java.lang.String str27 = stackAr25.toString();
    boolean b28 = stackAr25.isEmpty();
    stackAr25.push((java.lang.Object)10);
    java.lang.String str31 = stackAr25.toString();
    stackAr20.push((java.lang.Object)stackAr25);
    java.lang.String str33 = stackAr20.toString();
    int i34 = stackAr20.size();
    stackAr14.push((java.lang.Object)i34);
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    boolean b38 = stackAr36.isEmpty();
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isFull();
    java.lang.String str41 = stackAr39.toString();
    boolean b43 = stackAr39.equals((java.lang.Object)(-1));
    boolean b44 = stackAr36.equals((java.lang.Object)stackAr39);
    boolean b46 = stackAr39.equals((java.lang.Object)(byte)0);
    boolean b47 = stackAr39.isFull();
    int i48 = stackAr39.size();
    stackAr14.push((java.lang.Object)i48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[]"+ "'", str27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[10]"+ "'", str31.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[[10]]"+ "'", str33.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[]"+ "'", str41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test367"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    boolean b5 = stackAr0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj6 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test368"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    boolean b8 = stackAr2.isFull();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int)'4');
    java.lang.String str11 = stackAr10.toString();
    boolean b12 = stackAr2.equals((java.lang.Object)str11);
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isFull();
    java.lang.String str15 = stackAr13.toString();
    boolean b16 = stackAr13.isEmpty();
    stackAr13.push((java.lang.Object)10);
    boolean b19 = stackAr13.isFull();
    boolean b20 = stackAr13.isEmpty();
    stackAr2.push((java.lang.Object)stackAr13);
    int i22 = stackAr13.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test369"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    int i11 = stackAr4.size();
    int i12 = stackAr4.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test370"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)'#');
    int i2 = stackAr1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test371"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    java.lang.String str4 = stackAr2.toString();
    boolean b5 = stackAr2.isEmpty();
    boolean b6 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b10 = stackAr7.isEmpty();
    stackAr7.push((java.lang.Object)10);
    java.lang.String str13 = stackAr7.toString();
    stackAr2.push((java.lang.Object)stackAr7);
    stackAr0.push((java.lang.Object)stackAr7);
    java.lang.String str16 = stackAr0.toString();
    boolean b17 = stackAr0.isFull();
    boolean b18 = stackAr0.isEmpty();
    java.lang.String str19 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[[10]]"+ "'", str16.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[[10]]"+ "'", str19.equals("[[10]]"));

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test372"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int)(byte)100);
    boolean b6 = stackAr5.isEmpty();
    boolean b7 = stackAr0.equals((java.lang.Object)b6);
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isEmpty();
    java.lang.String str14 = stackAr12.toString();
    java.lang.String str15 = stackAr12.toString();
    int i16 = stackAr12.size();
    stackAr8.push((java.lang.Object)i16);
    int i18 = stackAr8.size();
    boolean b19 = stackAr8.isFull();
    stackAr0.push((java.lang.Object)b19);
    int i21 = stackAr0.size();
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int)(byte)100);
    boolean b24 = stackAr23.isEmpty();
    boolean b25 = stackAr23.isEmpty();
    boolean b27 = stackAr23.equals((java.lang.Object)(-1));
    int i28 = stackAr23.size();
    stackAr23.push((java.lang.Object)"hi!");
    int i31 = stackAr23.size();
    boolean b32 = stackAr23.isFull();
    stackAr0.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isFull();
    java.lang.String str36 = stackAr34.toString();
    boolean b37 = stackAr34.isEmpty();
    stackAr34.push((java.lang.Object)10);
    boolean b40 = stackAr34.isFull();
    org.autotest.StackAr stackAr41 = new org.autotest.StackAr();
    boolean b42 = stackAr41.isFull();
    java.lang.String str43 = stackAr41.toString();
    boolean b44 = stackAr41.isEmpty();
    stackAr41.push((java.lang.Object)100.0d);
    boolean b47 = stackAr41.isEmpty();
    stackAr34.push((java.lang.Object)stackAr41);
    boolean b49 = stackAr41.isFull();
    boolean b50 = stackAr0.equals((java.lang.Object)b49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[]"+ "'", str36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[]"+ "'", str43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test373"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)100.0d);
    boolean b6 = stackAr0.isEmpty();
    boolean b7 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test374"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    int i7 = stackAr0.size();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isEmpty();
    java.lang.String str10 = stackAr8.toString();
    java.lang.String str11 = stackAr8.toString();
    int i12 = stackAr8.size();
    int i13 = stackAr8.size();
    boolean b14 = stackAr8.isFull();
    stackAr0.push((java.lang.Object)stackAr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test375"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    int i11 = stackAr0.size();
    java.lang.Object obj12 = stackAr0.top();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isFull();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    java.lang.String str19 = stackAr17.toString();
    java.lang.String str20 = stackAr17.toString();
    int i21 = stackAr17.size();
    boolean b22 = stackAr15.equals((java.lang.Object)stackAr17);
    stackAr13.push((java.lang.Object)stackAr17);
    stackAr0.push((java.lang.Object)stackAr13);
    java.lang.Object obj25 = stackAr13.top();
    java.lang.String str26 = stackAr13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[[]]"+ "'", str26.equals("[[]]"));

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test376"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b3 = stackAr0.equals((java.lang.Object)100);
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int)(byte)100);
    boolean b6 = stackAr5.isEmpty();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str8 = stackAr0.toString();
    int i9 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[[]]"+ "'", str8.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test377"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test378"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    boolean b13 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isEmpty();
    java.lang.String str16 = stackAr14.toString();
    java.lang.String str17 = stackAr14.toString();
    stackAr14.push((java.lang.Object)(-1.0f));
    stackAr0.push((java.lang.Object)stackAr14);
    boolean b21 = stackAr14.isEmpty();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    boolean b24 = stackAr22.isFull();
    java.lang.String str25 = stackAr22.toString();
    boolean b26 = stackAr22.isEmpty();
    boolean b27 = stackAr22.isEmpty();
    boolean b28 = stackAr14.equals((java.lang.Object)stackAr22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test379"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    int i5 = stackAr0.size();
    int i6 = stackAr0.size();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)(byte)10);
    boolean b9 = stackAr0.equals((java.lang.Object)stackAr8);
    boolean b10 = stackAr8.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj11 = stackAr8.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test380"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    java.lang.String str1 = stackAr0.toString();
    boolean b2 = stackAr0.isFull();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test381"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    java.lang.String str1 = stackAr0.toString();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    boolean b7 = stackAr5.isFull();
    boolean b8 = stackAr3.equals((java.lang.Object)b7);
    int i9 = stackAr3.size();
    stackAr0.push((java.lang.Object)i9);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int)(byte)100);
    boolean b16 = stackAr11.equals((java.lang.Object)stackAr15);
    int i17 = stackAr11.size();
    boolean b18 = stackAr11.isFull();
    boolean b19 = stackAr11.isFull();
    boolean b20 = stackAr11.isEmpty();
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b22 = stackAr21.isEmpty();
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isFull();
    boolean b25 = stackAr23.isFull();
    boolean b26 = stackAr21.equals((java.lang.Object)b25);
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isEmpty();
    java.lang.String str29 = stackAr27.toString();
    java.lang.String str30 = stackAr27.toString();
    org.autotest.StackAr stackAr31 = new org.autotest.StackAr();
    boolean b32 = stackAr31.isFull();
    boolean b33 = stackAr27.equals((java.lang.Object)stackAr31);
    java.lang.String str34 = stackAr27.toString();
    stackAr21.push((java.lang.Object)stackAr27);
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isFull();
    org.autotest.StackAr stackAr38 = new org.autotest.StackAr();
    boolean b39 = stackAr38.isEmpty();
    org.autotest.StackAr stackAr40 = new org.autotest.StackAr();
    boolean b41 = stackAr40.isEmpty();
    java.lang.String str42 = stackAr40.toString();
    java.lang.String str43 = stackAr40.toString();
    int i44 = stackAr40.size();
    boolean b45 = stackAr38.equals((java.lang.Object)stackAr40);
    stackAr36.push((java.lang.Object)stackAr40);
    int i47 = stackAr36.size();
    stackAr27.push((java.lang.Object)i47);
    boolean b49 = stackAr27.isEmpty();
    stackAr11.push((java.lang.Object)stackAr27);
    java.lang.String str51 = stackAr11.toString();
    boolean b52 = stackAr0.equals((java.lang.Object)stackAr11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[]"+ "'", str29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[]"+ "'", str34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[]"+ "'", str42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[]"+ "'", str43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[[1]]"+ "'", str51.equals("[[1]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test382"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr0.toString();
    int i14 = stackAr0.size();
    boolean b15 = stackAr0.isEmpty();
    java.lang.Object obj16 = stackAr0.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[[10]]"+ "'", str13.equals("[[10]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj16);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test383"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    boolean b30 = stackAr17.equals((java.lang.Object)stackAr23);
    java.lang.String str31 = stackAr23.toString();
    stackAr0.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr33 = new org.autotest.StackAr();
    boolean b34 = stackAr33.isEmpty();
    org.autotest.StackAr stackAr35 = new org.autotest.StackAr();
    boolean b36 = stackAr35.isFull();
    boolean b37 = stackAr35.isFull();
    boolean b38 = stackAr33.equals((java.lang.Object)b37);
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isEmpty();
    java.lang.String str41 = stackAr39.toString();
    java.lang.String str42 = stackAr39.toString();
    org.autotest.StackAr stackAr43 = new org.autotest.StackAr();
    boolean b44 = stackAr43.isFull();
    boolean b45 = stackAr39.equals((java.lang.Object)stackAr43);
    java.lang.String str46 = stackAr39.toString();
    stackAr33.push((java.lang.Object)stackAr39);
    boolean b48 = stackAr39.isFull();
    int i49 = stackAr39.size();
    boolean b51 = stackAr39.equals((java.lang.Object)1L);
    stackAr23.push((java.lang.Object)b51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[]"+ "'", str31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[]"+ "'", str41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[]"+ "'", str42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[]"+ "'", str46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test384"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr0.equals((java.lang.Object)stackAr4);
    boolean b7 = stackAr4.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stackAr4.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test385"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.String str6 = stackAr0.toString();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isEmpty();
    java.lang.String str9 = stackAr7.toString();
    java.lang.String str10 = stackAr7.toString();
    boolean b11 = stackAr7.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isEmpty();
    java.lang.String str14 = stackAr12.toString();
    java.lang.String str15 = stackAr12.toString();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isFull();
    boolean b18 = stackAr12.equals((java.lang.Object)stackAr16);
    boolean b19 = stackAr12.isFull();
    stackAr7.push((java.lang.Object)stackAr12);
    boolean b21 = stackAr0.equals((java.lang.Object)stackAr7);
    boolean b22 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[10]"+ "'", str6.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test386"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    boolean b11 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b14 = stackAr12.equals((java.lang.Object)0);
    boolean b15 = stackAr12.isEmpty();
    stackAr0.push((java.lang.Object)stackAr12);
    boolean b17 = stackAr12.isEmpty();
    boolean b18 = stackAr12.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test387"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)0);
    int i2 = stackAr1.size();
    boolean b3 = stackAr1.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj4 = stackAr1.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test388"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(short)10);
    boolean b2 = stackAr1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr1.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test389"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    int i5 = stackAr0.size();
    boolean b6 = stackAr0.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj7 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test390"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    boolean b17 = stackAr0.isFull();
    int i18 = stackAr0.size();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    java.lang.String str21 = stackAr19.toString();
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int)(byte)100);
    boolean b24 = stackAr19.equals((java.lang.Object)stackAr23);
    int i25 = stackAr19.size();
    boolean b26 = stackAr19.isFull();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isEmpty();
    java.lang.String str29 = stackAr27.toString();
    java.lang.String str30 = stackAr27.toString();
    boolean b31 = stackAr27.isEmpty();
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isEmpty();
    java.lang.String str34 = stackAr32.toString();
    java.lang.String str35 = stackAr32.toString();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isFull();
    boolean b38 = stackAr32.equals((java.lang.Object)stackAr36);
    boolean b39 = stackAr32.isFull();
    stackAr27.push((java.lang.Object)stackAr32);
    stackAr19.push((java.lang.Object)stackAr32);
    boolean b42 = stackAr32.isEmpty();
    org.autotest.StackAr stackAr44 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str45 = stackAr44.toString();
    boolean b46 = stackAr44.isEmpty();
    boolean b47 = stackAr44.isEmpty();
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isEmpty();
    boolean b50 = stackAr48.isEmpty();
    org.autotest.StackAr stackAr51 = new org.autotest.StackAr();
    boolean b52 = stackAr51.isFull();
    java.lang.String str53 = stackAr51.toString();
    boolean b55 = stackAr51.equals((java.lang.Object)(-1));
    boolean b56 = stackAr48.equals((java.lang.Object)stackAr51);
    boolean b58 = stackAr51.equals((java.lang.Object)(byte)0);
    boolean b59 = stackAr44.equals((java.lang.Object)b58);
    boolean b60 = stackAr32.equals((java.lang.Object)stackAr44);
    boolean b61 = stackAr0.equals((java.lang.Object)b60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[]"+ "'", str29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[]"+ "'", str34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[]"+ "'", str35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[]"+ "'", str45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[]"+ "'", str53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test391"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    boolean b6 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test392"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str2 = stackAr1.toString();
    boolean b3 = stackAr1.isEmpty();
    boolean b4 = stackAr1.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    boolean b7 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b12 = stackAr8.equals((java.lang.Object)(-1));
    boolean b13 = stackAr5.equals((java.lang.Object)stackAr8);
    boolean b15 = stackAr8.equals((java.lang.Object)(byte)0);
    boolean b16 = stackAr1.equals((java.lang.Object)b15);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    java.lang.String str21 = stackAr19.toString();
    java.lang.String str22 = stackAr19.toString();
    int i23 = stackAr19.size();
    boolean b24 = stackAr17.equals((java.lang.Object)stackAr19);
    int i25 = stackAr17.size();
    boolean b26 = stackAr1.equals((java.lang.Object)i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test393"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b7 = stackAr3.equals((java.lang.Object)(-1));
    boolean b8 = stackAr0.equals((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    java.lang.String str11 = stackAr9.toString();
    boolean b12 = stackAr9.isEmpty();
    boolean b13 = stackAr9.isEmpty();
    boolean b14 = stackAr9.isEmpty();
    int i15 = stackAr9.size();
    int i16 = stackAr9.size();
    java.lang.String str17 = stackAr9.toString();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    java.lang.String str20 = stackAr18.toString();
    java.lang.String str21 = stackAr18.toString();
    int i22 = stackAr18.size();
    int i23 = stackAr18.size();
    stackAr9.push((java.lang.Object)stackAr18);
    boolean b25 = stackAr3.equals((java.lang.Object)stackAr18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test394"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    stackAr0.push((java.lang.Object)i8);
    int i10 = stackAr0.size();
    boolean b11 = stackAr0.isEmpty();
    boolean b12 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test395"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.String str6 = stackAr0.toString();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isEmpty();
    java.lang.String str9 = stackAr7.toString();
    java.lang.String str10 = stackAr7.toString();
    boolean b11 = stackAr7.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isEmpty();
    java.lang.String str14 = stackAr12.toString();
    java.lang.String str15 = stackAr12.toString();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isFull();
    boolean b18 = stackAr12.equals((java.lang.Object)stackAr16);
    boolean b19 = stackAr12.isFull();
    stackAr7.push((java.lang.Object)stackAr12);
    boolean b21 = stackAr0.equals((java.lang.Object)stackAr7);
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    java.lang.String str24 = stackAr22.toString();
    boolean b25 = stackAr22.isEmpty();
    boolean b26 = stackAr22.isEmpty();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    java.lang.String str29 = stackAr27.toString();
    boolean b30 = stackAr27.isEmpty();
    stackAr27.push((java.lang.Object)10);
    java.lang.String str33 = stackAr27.toString();
    stackAr22.push((java.lang.Object)stackAr27);
    java.lang.String str35 = stackAr27.toString();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isFull();
    boolean b38 = stackAr36.isFull();
    java.lang.String str39 = stackAr36.toString();
    boolean b40 = stackAr36.isEmpty();
    stackAr27.push((java.lang.Object)stackAr36);
    org.autotest.StackAr stackAr42 = new org.autotest.StackAr();
    boolean b43 = stackAr42.isFull();
    org.autotest.StackAr stackAr44 = new org.autotest.StackAr();
    boolean b45 = stackAr44.isEmpty();
    org.autotest.StackAr stackAr46 = new org.autotest.StackAr();
    boolean b47 = stackAr46.isEmpty();
    java.lang.String str48 = stackAr46.toString();
    java.lang.String str49 = stackAr46.toString();
    int i50 = stackAr46.size();
    boolean b51 = stackAr44.equals((java.lang.Object)stackAr46);
    stackAr42.push((java.lang.Object)stackAr46);
    boolean b53 = stackAr42.isEmpty();
    org.autotest.StackAr stackAr54 = new org.autotest.StackAr();
    boolean b56 = stackAr54.equals((java.lang.Object)0);
    boolean b57 = stackAr54.isEmpty();
    stackAr42.push((java.lang.Object)stackAr54);
    stackAr27.push((java.lang.Object)stackAr54);
    org.autotest.StackAr stackAr61 = new org.autotest.StackAr((int)(byte)100);
    boolean b62 = stackAr61.isEmpty();
    boolean b63 = stackAr61.isEmpty();
    boolean b65 = stackAr61.equals((java.lang.Object)(-1));
    int i66 = stackAr61.size();
    stackAr61.push((java.lang.Object)"hi!");
    int i69 = stackAr61.size();
    org.autotest.StackAr stackAr70 = new org.autotest.StackAr();
    java.lang.String str71 = stackAr70.toString();
    boolean b72 = stackAr70.isEmpty();
    int i73 = stackAr70.size();
    boolean b74 = stackAr61.equals((java.lang.Object)i73);
    stackAr54.push((java.lang.Object)stackAr61);
    boolean b76 = stackAr7.equals((java.lang.Object)stackAr61);
    boolean b77 = stackAr61.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[10]"+ "'", str6.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[]"+ "'", str29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[10]"+ "'", str33.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[10]"+ "'", str35.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "[]"+ "'", str48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[]"+ "'", str49.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "[]"+ "'", str71.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test396"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    stackAr0.push((java.lang.Object)1L);
    java.lang.Object obj16 = stackAr0.top();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    java.lang.String str19 = stackAr17.toString();
    java.lang.String str20 = stackAr17.toString();
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b22 = stackAr21.isFull();
    java.lang.String str23 = stackAr21.toString();
    boolean b24 = stackAr21.isEmpty();
    boolean b25 = stackAr21.isEmpty();
    stackAr17.push((java.lang.Object)b25);
    boolean b27 = stackAr17.isFull();
    org.autotest.StackAr stackAr28 = new org.autotest.StackAr();
    boolean b29 = stackAr28.isEmpty();
    java.lang.String str30 = stackAr28.toString();
    int i31 = stackAr28.size();
    stackAr17.push((java.lang.Object)i31);
    java.lang.String str33 = stackAr17.toString();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isFull();
    java.lang.String str36 = stackAr34.toString();
    boolean b37 = stackAr34.isEmpty();
    boolean b38 = stackAr34.isEmpty();
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isFull();
    java.lang.String str41 = stackAr39.toString();
    boolean b42 = stackAr39.isEmpty();
    stackAr39.push((java.lang.Object)10);
    java.lang.String str45 = stackAr39.toString();
    stackAr34.push((java.lang.Object)stackAr39);
    java.lang.String str47 = stackAr39.toString();
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isFull();
    boolean b50 = stackAr48.isFull();
    java.lang.String str51 = stackAr48.toString();
    boolean b52 = stackAr48.isEmpty();
    stackAr39.push((java.lang.Object)stackAr48);
    stackAr17.push((java.lang.Object)stackAr39);
    org.autotest.StackAr stackAr55 = new org.autotest.StackAr();
    boolean b56 = stackAr55.isFull();
    org.autotest.StackAr stackAr57 = new org.autotest.StackAr();
    boolean b58 = stackAr57.isEmpty();
    org.autotest.StackAr stackAr59 = new org.autotest.StackAr();
    boolean b60 = stackAr59.isEmpty();
    java.lang.String str61 = stackAr59.toString();
    java.lang.String str62 = stackAr59.toString();
    int i63 = stackAr59.size();
    boolean b64 = stackAr57.equals((java.lang.Object)stackAr59);
    stackAr55.push((java.lang.Object)stackAr59);
    boolean b66 = stackAr39.equals((java.lang.Object)stackAr55);
    boolean b67 = stackAr55.isEmpty();
    stackAr0.push((java.lang.Object)stackAr55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 1L+ "'", obj16.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[true,0]"+ "'", str33.equals("[true,0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[]"+ "'", str36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[]"+ "'", str41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[10]"+ "'", str45.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "[10]"+ "'", str47.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[]"+ "'", str51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "[]"+ "'", str61.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "[]"+ "'", str62.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test397"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    int i6 = stackAr0.size();
    boolean b7 = stackAr0.isFull();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isEmpty();
    java.lang.String str10 = stackAr8.toString();
    java.lang.String str11 = stackAr8.toString();
    boolean b12 = stackAr8.isEmpty();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isEmpty();
    java.lang.String str15 = stackAr13.toString();
    java.lang.String str16 = stackAr13.toString();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isFull();
    boolean b19 = stackAr13.equals((java.lang.Object)stackAr17);
    boolean b20 = stackAr13.isFull();
    stackAr8.push((java.lang.Object)stackAr13);
    stackAr0.push((java.lang.Object)stackAr13);
    boolean b23 = stackAr13.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test398"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isFull();
    boolean b16 = stackAr14.isFull();
    boolean b18 = stackAr14.equals((java.lang.Object)10.0f);
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b22 = stackAr21.isFull();
    java.lang.String str23 = stackAr21.toString();
    boolean b24 = stackAr21.isEmpty();
    boolean b25 = stackAr21.isEmpty();
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isFull();
    java.lang.String str28 = stackAr26.toString();
    boolean b29 = stackAr26.isEmpty();
    stackAr26.push((java.lang.Object)10);
    java.lang.String str32 = stackAr26.toString();
    stackAr21.push((java.lang.Object)stackAr26);
    stackAr19.push((java.lang.Object)stackAr26);
    boolean b35 = stackAr14.equals((java.lang.Object)stackAr19);
    boolean b36 = stackAr14.isEmpty();
    stackAr5.push((java.lang.Object)stackAr14);
    int i38 = stackAr14.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[10]"+ "'", str32.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test399"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    int i6 = stackAr0.size();
    boolean b7 = stackAr0.isFull();
    int i8 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test400"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    java.lang.String str6 = stackAr0.toString();
    int i7 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test401"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isEmpty();
    java.lang.String str8 = stackAr6.toString();
    java.lang.String str9 = stackAr6.toString();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    boolean b12 = stackAr6.equals((java.lang.Object)stackAr10);
    boolean b13 = stackAr0.equals((java.lang.Object)stackAr6);
    int i14 = stackAr6.size();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    java.lang.String str17 = stackAr15.toString();
    int i18 = stackAr15.size();
    boolean b19 = stackAr15.isFull();
    boolean b20 = stackAr6.equals((java.lang.Object)stackAr15);
    int i21 = stackAr6.size();
    boolean b22 = stackAr6.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test402"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    java.lang.String str1 = stackAr0.toString();
    int i2 = stackAr0.size();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b5 = stackAr3.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isFull();
    java.lang.String str8 = stackAr6.toString();
    boolean b9 = stackAr6.isEmpty();
    boolean b10 = stackAr6.isEmpty();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isFull();
    java.lang.String str13 = stackAr11.toString();
    boolean b14 = stackAr11.isEmpty();
    stackAr11.push((java.lang.Object)10);
    java.lang.String str17 = stackAr11.toString();
    stackAr6.push((java.lang.Object)stackAr11);
    stackAr3.push((java.lang.Object)stackAr6);
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isEmpty();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    boolean b24 = stackAr22.isFull();
    boolean b25 = stackAr20.equals((java.lang.Object)b24);
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isEmpty();
    java.lang.String str28 = stackAr26.toString();
    java.lang.String str29 = stackAr26.toString();
    org.autotest.StackAr stackAr30 = new org.autotest.StackAr();
    boolean b31 = stackAr30.isFull();
    boolean b32 = stackAr26.equals((java.lang.Object)stackAr30);
    java.lang.String str33 = stackAr26.toString();
    stackAr20.push((java.lang.Object)stackAr26);
    org.autotest.StackAr stackAr35 = new org.autotest.StackAr();
    boolean b36 = stackAr35.isFull();
    org.autotest.StackAr stackAr37 = new org.autotest.StackAr();
    boolean b38 = stackAr37.isEmpty();
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isEmpty();
    java.lang.String str41 = stackAr39.toString();
    java.lang.String str42 = stackAr39.toString();
    int i43 = stackAr39.size();
    boolean b44 = stackAr37.equals((java.lang.Object)stackAr39);
    stackAr35.push((java.lang.Object)stackAr39);
    int i46 = stackAr35.size();
    stackAr26.push((java.lang.Object)i46);
    boolean b48 = stackAr6.equals((java.lang.Object)stackAr26);
    org.autotest.StackAr stackAr50 = new org.autotest.StackAr((int)'4');
    stackAr26.push((java.lang.Object)'4');
    java.lang.Object obj52 = null;
    boolean b53 = stackAr26.equals(obj52);
    java.lang.String str54 = stackAr26.toString();
    org.autotest.StackAr stackAr55 = new org.autotest.StackAr();
    boolean b56 = stackAr55.isEmpty();
    boolean b57 = stackAr55.isEmpty();
    org.autotest.StackAr stackAr58 = new org.autotest.StackAr();
    boolean b59 = stackAr58.isFull();
    java.lang.String str60 = stackAr58.toString();
    boolean b62 = stackAr58.equals((java.lang.Object)(-1));
    boolean b63 = stackAr55.equals((java.lang.Object)stackAr58);
    org.autotest.StackAr stackAr65 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str66 = stackAr65.toString();
    stackAr58.push((java.lang.Object)str66);
    org.autotest.StackAr stackAr68 = new org.autotest.StackAr();
    boolean b69 = stackAr68.isFull();
    java.lang.String str70 = stackAr68.toString();
    boolean b71 = stackAr68.isEmpty();
    boolean b72 = stackAr68.isEmpty();
    org.autotest.StackAr stackAr73 = new org.autotest.StackAr();
    boolean b74 = stackAr73.isFull();
    java.lang.String str75 = stackAr73.toString();
    boolean b76 = stackAr73.isEmpty();
    stackAr73.push((java.lang.Object)10);
    java.lang.String str79 = stackAr73.toString();
    stackAr68.push((java.lang.Object)stackAr73);
    java.lang.String str81 = stackAr73.toString();
    org.autotest.StackAr stackAr82 = new org.autotest.StackAr();
    boolean b83 = stackAr82.isFull();
    boolean b84 = stackAr82.isFull();
    java.lang.String str85 = stackAr82.toString();
    boolean b86 = stackAr82.isEmpty();
    stackAr73.push((java.lang.Object)stackAr82);
    org.autotest.StackAr stackAr89 = new org.autotest.StackAr((int)' ');
    boolean b90 = stackAr89.isEmpty();
    stackAr73.push((java.lang.Object)stackAr89);
    boolean b92 = stackAr58.equals((java.lang.Object)stackAr73);
    boolean b93 = stackAr73.isEmpty();
    stackAr26.push((java.lang.Object)stackAr73);
    java.lang.String str95 = stackAr26.toString();
    boolean b96 = stackAr0.equals((java.lang.Object)str95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[10]"+ "'", str17.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[]"+ "'", str29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[]"+ "'", str33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[]"+ "'", str41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[]"+ "'", str42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[1,4]"+ "'", str54.equals("[1,4]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "[]"+ "'", str60.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[]"+ "'", str66.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "[]"+ "'", str70.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "[]"+ "'", str75.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "[10]"+ "'", str79.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "[10]"+ "'", str81.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "[]"+ "'", str85.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "[1,4,[10,[],[]]]"+ "'", str95.equals("[1,4,[10,[],[]]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test403"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    java.lang.Object obj14 = stackAr5.top();
    java.lang.Object obj15 = stackAr5.top();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isEmpty();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    java.lang.String str20 = stackAr18.toString();
    java.lang.String str21 = stackAr18.toString();
    int i22 = stackAr18.size();
    boolean b23 = stackAr16.equals((java.lang.Object)stackAr18);
    boolean b24 = stackAr18.isFull();
    int i25 = stackAr18.size();
    stackAr5.push((java.lang.Object)i25);
    java.lang.Object obj27 = stackAr5.top();
    boolean b28 = stackAr5.isFull();
    java.lang.Object obj29 = stackAr5.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10+ "'", obj14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 10+ "'", obj15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 0+ "'", obj27.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 0+ "'", obj29.equals(0));

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test404"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    boolean b5 = stackAr0.isEmpty();
    int i6 = stackAr0.size();
    boolean b7 = stackAr0.isEmpty();
    int i8 = stackAr0.size();
    int i9 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test405"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    int i4 = stackAr0.size();
    java.lang.Object obj5 = null;
    stackAr0.push(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test406"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    boolean b14 = stackAr0.isEmpty();
    java.lang.Object obj15 = stackAr0.top();
    boolean b16 = stackAr0.isFull();
    boolean b17 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test407"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    boolean b11 = stackAr8.isFull();
    java.lang.String str12 = stackAr8.toString();
    boolean b13 = stackAr8.isFull();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b16 = stackAr14.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isFull();
    java.lang.String str19 = stackAr17.toString();
    boolean b20 = stackAr17.isEmpty();
    boolean b21 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    java.lang.String str24 = stackAr22.toString();
    boolean b25 = stackAr22.isEmpty();
    stackAr22.push((java.lang.Object)10);
    java.lang.String str28 = stackAr22.toString();
    stackAr17.push((java.lang.Object)stackAr22);
    stackAr14.push((java.lang.Object)stackAr17);
    org.autotest.StackAr stackAr31 = new org.autotest.StackAr();
    boolean b32 = stackAr31.isEmpty();
    org.autotest.StackAr stackAr33 = new org.autotest.StackAr();
    boolean b34 = stackAr33.isFull();
    boolean b35 = stackAr33.isFull();
    boolean b36 = stackAr31.equals((java.lang.Object)b35);
    org.autotest.StackAr stackAr37 = new org.autotest.StackAr();
    boolean b38 = stackAr37.isEmpty();
    java.lang.String str39 = stackAr37.toString();
    java.lang.String str40 = stackAr37.toString();
    org.autotest.StackAr stackAr41 = new org.autotest.StackAr();
    boolean b42 = stackAr41.isFull();
    boolean b43 = stackAr37.equals((java.lang.Object)stackAr41);
    java.lang.String str44 = stackAr37.toString();
    stackAr31.push((java.lang.Object)stackAr37);
    org.autotest.StackAr stackAr46 = new org.autotest.StackAr();
    boolean b47 = stackAr46.isFull();
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isEmpty();
    org.autotest.StackAr stackAr50 = new org.autotest.StackAr();
    boolean b51 = stackAr50.isEmpty();
    java.lang.String str52 = stackAr50.toString();
    java.lang.String str53 = stackAr50.toString();
    int i54 = stackAr50.size();
    boolean b55 = stackAr48.equals((java.lang.Object)stackAr50);
    stackAr46.push((java.lang.Object)stackAr50);
    int i57 = stackAr46.size();
    stackAr37.push((java.lang.Object)i57);
    boolean b59 = stackAr17.equals((java.lang.Object)stackAr37);
    org.autotest.StackAr stackAr61 = new org.autotest.StackAr((int)'4');
    stackAr37.push((java.lang.Object)'4');
    java.lang.Object obj63 = null;
    boolean b64 = stackAr37.equals(obj63);
    java.lang.String str65 = stackAr37.toString();
    boolean b66 = stackAr8.equals((java.lang.Object)stackAr37);
    boolean b67 = stackAr8.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[10]"+ "'", str28.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[]"+ "'", str40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "[]"+ "'", str44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "[]"+ "'", str52.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[]"+ "'", str53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "[1,4]"+ "'", str65.equals("[1,4]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test408"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b7 = stackAr3.equals((java.lang.Object)(-1));
    boolean b8 = stackAr0.equals((java.lang.Object)stackAr3);
    boolean b9 = stackAr0.isEmpty();
    boolean b10 = stackAr0.isFull();
    boolean b11 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test409"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    stackAr0.push((java.lang.Object)i8);
    int i10 = stackAr0.size();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    java.lang.String str14 = stackAr11.toString();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    boolean b17 = stackAr11.equals((java.lang.Object)stackAr15);
    stackAr0.push((java.lang.Object)stackAr15);
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    java.lang.String str21 = stackAr19.toString();
    boolean b22 = stackAr19.isEmpty();
    stackAr19.push((java.lang.Object)10);
    java.lang.String str25 = stackAr19.toString();
    int i26 = stackAr19.size();
    boolean b27 = stackAr0.equals((java.lang.Object)stackAr19);
    int i28 = stackAr19.size();
    int i29 = stackAr19.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[10]"+ "'", str25.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test410"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr(1);
    java.lang.String str2 = stackAr1.toString();
    boolean b3 = stackAr1.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test411"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    boolean b4 = stackAr0.equals((java.lang.Object)(byte)0);
    boolean b6 = stackAr0.equals((java.lang.Object)1);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj7 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test412"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isFull();
    boolean b16 = stackAr14.isFull();
    java.lang.String str17 = stackAr14.toString();
    boolean b18 = stackAr14.isEmpty();
    stackAr5.push((java.lang.Object)stackAr14);
    int i20 = stackAr14.size();
    int i21 = stackAr14.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test413"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    boolean b8 = stackAr2.isFull();
    int i9 = stackAr2.size();
    boolean b10 = stackAr2.isEmpty();
    boolean b11 = stackAr2.isEmpty();
    int i12 = stackAr2.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test414"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    int i6 = stackAr0.size();
    boolean b7 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isEmpty();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isEmpty();
    java.lang.String str12 = stackAr10.toString();
    java.lang.String str13 = stackAr10.toString();
    int i14 = stackAr10.size();
    boolean b15 = stackAr8.equals((java.lang.Object)stackAr10);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int)(byte)100);
    java.lang.String str18 = stackAr17.toString();
    stackAr8.push((java.lang.Object)str18);
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isEmpty();
    java.lang.String str22 = stackAr20.toString();
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int)(byte)100);
    boolean b25 = stackAr20.equals((java.lang.Object)stackAr24);
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str28 = stackAr27.toString();
    stackAr20.push((java.lang.Object)str28);
    boolean b30 = stackAr8.equals((java.lang.Object)stackAr20);
    stackAr0.push((java.lang.Object)stackAr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test415"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    java.lang.Object obj6 = null;
    boolean b7 = stackAr0.equals(obj6);
    boolean b8 = stackAr0.isEmpty();
    boolean b9 = stackAr0.isFull();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    java.lang.String str12 = stackAr10.toString();
    boolean b13 = stackAr10.isEmpty();
    boolean b14 = stackAr10.isEmpty();
    boolean b15 = stackAr10.isEmpty();
    int i16 = stackAr10.size();
    boolean b17 = stackAr10.isFull();
    stackAr0.push((java.lang.Object)b17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test416"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    int i6 = stackAr0.size();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)(byte)100);
    java.lang.String str9 = stackAr8.toString();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    boolean b11 = stackAr8.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test417"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    int i6 = stackAr0.size();
    boolean b7 = stackAr0.isEmpty();
    int i8 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test418"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr(1);
    boolean b2 = stackAr1.isEmpty();
    int i3 = stackAr1.size();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isFull();
    boolean b8 = stackAr6.isFull();
    boolean b9 = stackAr4.equals((java.lang.Object)b8);
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    java.lang.String str12 = stackAr10.toString();
    boolean b13 = stackAr10.isEmpty();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isEmpty();
    java.lang.String str16 = stackAr14.toString();
    java.lang.String str17 = stackAr14.toString();
    int i18 = stackAr14.size();
    stackAr10.push((java.lang.Object)i18);
    java.lang.Object obj20 = stackAr10.top();
    stackAr4.push((java.lang.Object)stackAr10);
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    java.lang.String str24 = stackAr22.toString();
    boolean b25 = stackAr22.isEmpty();
    boolean b26 = stackAr22.isEmpty();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    java.lang.String str29 = stackAr27.toString();
    boolean b30 = stackAr27.isEmpty();
    stackAr27.push((java.lang.Object)10);
    java.lang.String str33 = stackAr27.toString();
    stackAr22.push((java.lang.Object)stackAr27);
    boolean b35 = stackAr22.isEmpty();
    boolean b36 = stackAr10.equals((java.lang.Object)b35);
    boolean b37 = stackAr10.isFull();
    org.autotest.StackAr stackAr38 = new org.autotest.StackAr();
    boolean b39 = stackAr38.isEmpty();
    java.lang.String str40 = stackAr38.toString();
    org.autotest.StackAr stackAr42 = new org.autotest.StackAr((int)(byte)100);
    boolean b43 = stackAr38.equals((java.lang.Object)stackAr42);
    int i44 = stackAr38.size();
    boolean b45 = stackAr38.isFull();
    boolean b46 = stackAr38.isFull();
    boolean b47 = stackAr38.isEmpty();
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isEmpty();
    org.autotest.StackAr stackAr50 = new org.autotest.StackAr();
    boolean b51 = stackAr50.isFull();
    boolean b52 = stackAr50.isFull();
    boolean b53 = stackAr48.equals((java.lang.Object)b52);
    org.autotest.StackAr stackAr54 = new org.autotest.StackAr();
    boolean b55 = stackAr54.isEmpty();
    java.lang.String str56 = stackAr54.toString();
    java.lang.String str57 = stackAr54.toString();
    org.autotest.StackAr stackAr58 = new org.autotest.StackAr();
    boolean b59 = stackAr58.isFull();
    boolean b60 = stackAr54.equals((java.lang.Object)stackAr58);
    java.lang.String str61 = stackAr54.toString();
    stackAr48.push((java.lang.Object)stackAr54);
    org.autotest.StackAr stackAr63 = new org.autotest.StackAr();
    boolean b64 = stackAr63.isFull();
    org.autotest.StackAr stackAr65 = new org.autotest.StackAr();
    boolean b66 = stackAr65.isEmpty();
    org.autotest.StackAr stackAr67 = new org.autotest.StackAr();
    boolean b68 = stackAr67.isEmpty();
    java.lang.String str69 = stackAr67.toString();
    java.lang.String str70 = stackAr67.toString();
    int i71 = stackAr67.size();
    boolean b72 = stackAr65.equals((java.lang.Object)stackAr67);
    stackAr63.push((java.lang.Object)stackAr67);
    int i74 = stackAr63.size();
    stackAr54.push((java.lang.Object)i74);
    boolean b76 = stackAr54.isEmpty();
    stackAr38.push((java.lang.Object)stackAr54);
    stackAr10.push((java.lang.Object)stackAr38);
    stackAr1.push((java.lang.Object)stackAr38);
    java.lang.Object obj80 = stackAr1.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 0+ "'", obj20.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[]"+ "'", str29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[10]"+ "'", str33.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[]"+ "'", str40.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "[]"+ "'", str56.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[]"+ "'", str57.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "[]"+ "'", str61.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "[]"+ "'", str69.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "[]"+ "'", str70.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj80);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test419"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    java.lang.Object obj14 = stackAr5.top();
    java.lang.Object obj15 = stackAr5.top();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int)'4');
    java.lang.String str18 = stackAr17.toString();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b22 = stackAr21.isFull();
    java.lang.String str23 = stackAr21.toString();
    boolean b24 = stackAr21.isEmpty();
    boolean b25 = stackAr21.isEmpty();
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isFull();
    java.lang.String str28 = stackAr26.toString();
    boolean b29 = stackAr26.isEmpty();
    stackAr26.push((java.lang.Object)10);
    java.lang.String str32 = stackAr26.toString();
    stackAr21.push((java.lang.Object)stackAr26);
    stackAr19.push((java.lang.Object)stackAr26);
    boolean b35 = stackAr19.isEmpty();
    java.lang.Object obj36 = stackAr19.top();
    stackAr17.push((java.lang.Object)stackAr19);
    boolean b38 = stackAr5.equals((java.lang.Object)stackAr17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10+ "'", obj14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 10+ "'", obj15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[10]"+ "'", str32.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test420"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str8 = stackAr7.toString();
    stackAr0.push((java.lang.Object)str8);
    int i10 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test421"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    boolean b11 = stackAr8.isFull();
    java.lang.String str12 = stackAr8.toString();
    boolean b13 = stackAr8.isFull();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str16 = stackAr15.toString();
    boolean b17 = stackAr15.isEmpty();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isFull();
    boolean b20 = stackAr18.isFull();
    boolean b22 = stackAr18.equals((java.lang.Object)10.0f);
    int i23 = stackAr18.size();
    boolean b24 = stackAr18.isFull();
    boolean b25 = stackAr15.equals((java.lang.Object)stackAr18);
    stackAr8.push((java.lang.Object)stackAr18);
    java.lang.String str27 = stackAr18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[]"+ "'", str27.equals("[]"));

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test422"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isFull();
    boolean b16 = stackAr14.isFull();
    java.lang.String str17 = stackAr14.toString();
    boolean b18 = stackAr14.isEmpty();
    stackAr5.push((java.lang.Object)stackAr14);
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int)' ');
    boolean b22 = stackAr21.isEmpty();
    stackAr5.push((java.lang.Object)stackAr21);
    java.lang.Object obj24 = stackAr5.top();
    org.autotest.StackAr stackAr25 = new org.autotest.StackAr();
    boolean b27 = stackAr25.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr28 = new org.autotest.StackAr();
    boolean b29 = stackAr28.isFull();
    java.lang.String str30 = stackAr28.toString();
    boolean b31 = stackAr28.isEmpty();
    boolean b32 = stackAr28.isEmpty();
    org.autotest.StackAr stackAr33 = new org.autotest.StackAr();
    boolean b34 = stackAr33.isFull();
    java.lang.String str35 = stackAr33.toString();
    boolean b36 = stackAr33.isEmpty();
    stackAr33.push((java.lang.Object)10);
    java.lang.String str39 = stackAr33.toString();
    stackAr28.push((java.lang.Object)stackAr33);
    stackAr25.push((java.lang.Object)stackAr28);
    org.autotest.StackAr stackAr42 = new org.autotest.StackAr();
    boolean b43 = stackAr42.isEmpty();
    org.autotest.StackAr stackAr44 = new org.autotest.StackAr();
    boolean b45 = stackAr44.isFull();
    boolean b46 = stackAr44.isFull();
    boolean b47 = stackAr42.equals((java.lang.Object)b46);
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isEmpty();
    java.lang.String str50 = stackAr48.toString();
    java.lang.String str51 = stackAr48.toString();
    org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
    boolean b53 = stackAr52.isFull();
    boolean b54 = stackAr48.equals((java.lang.Object)stackAr52);
    java.lang.String str55 = stackAr48.toString();
    stackAr42.push((java.lang.Object)stackAr48);
    org.autotest.StackAr stackAr57 = new org.autotest.StackAr();
    boolean b58 = stackAr57.isFull();
    org.autotest.StackAr stackAr59 = new org.autotest.StackAr();
    boolean b60 = stackAr59.isEmpty();
    org.autotest.StackAr stackAr61 = new org.autotest.StackAr();
    boolean b62 = stackAr61.isEmpty();
    java.lang.String str63 = stackAr61.toString();
    java.lang.String str64 = stackAr61.toString();
    int i65 = stackAr61.size();
    boolean b66 = stackAr59.equals((java.lang.Object)stackAr61);
    stackAr57.push((java.lang.Object)stackAr61);
    int i68 = stackAr57.size();
    stackAr48.push((java.lang.Object)i68);
    boolean b70 = stackAr28.equals((java.lang.Object)stackAr48);
    boolean b71 = stackAr28.isEmpty();
    stackAr5.push((java.lang.Object)stackAr28);
    java.lang.Object obj73 = stackAr28.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[]"+ "'", str35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[10]"+ "'", str39.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "[]"+ "'", str50.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[]"+ "'", str51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "[]"+ "'", str55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "[]"+ "'", str63.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "[]"+ "'", str64.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj73);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test423"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    int i5 = stackAr0.size();
    java.lang.String str6 = stackAr0.toString();
    java.lang.String str7 = stackAr0.toString();
    boolean b8 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    int i11 = stackAr9.size();
    int i12 = stackAr9.size();
    java.lang.String str13 = stackAr9.toString();
    stackAr0.push((java.lang.Object)str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test424"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    boolean b5 = stackAr0.isEmpty();
    int i6 = stackAr0.size();
    boolean b7 = stackAr0.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test425"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    stackAr0.push((java.lang.Object)i8);
    java.lang.Object obj10 = stackAr0.top();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str13 = stackAr12.toString();
    boolean b14 = stackAr0.equals((java.lang.Object)str13);
    int i15 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 0+ "'", obj10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test426"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    int i5 = stackAr0.size();
    java.lang.String str6 = stackAr0.toString();
    boolean b7 = stackAr0.isEmpty();
    int i8 = stackAr0.size();
    boolean b9 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test427"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    boolean b14 = stackAr0.isEmpty();
    java.lang.Object obj15 = stackAr0.top();
    boolean b16 = stackAr0.isFull();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    boolean b19 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    java.lang.String str22 = stackAr20.toString();
    boolean b24 = stackAr20.equals((java.lang.Object)(-1));
    boolean b25 = stackAr17.equals((java.lang.Object)stackAr20);
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isEmpty();
    org.autotest.StackAr stackAr28 = new org.autotest.StackAr();
    boolean b29 = stackAr28.isFull();
    boolean b30 = stackAr28.isFull();
    boolean b31 = stackAr26.equals((java.lang.Object)b30);
    int i32 = stackAr26.size();
    boolean b33 = stackAr26.isEmpty();
    stackAr20.push((java.lang.Object)stackAr26);
    boolean b35 = stackAr0.equals((java.lang.Object)stackAr26);
    boolean b37 = stackAr0.equals((java.lang.Object)3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test428"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    int i11 = stackAr0.size();
    java.lang.Object obj12 = stackAr0.top();
    java.lang.String str13 = stackAr0.toString();
    boolean b14 = stackAr0.isFull();
    java.lang.Object obj15 = stackAr0.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[[]]"+ "'", str13.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test429"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b7 = stackAr3.equals((java.lang.Object)(-1));
    boolean b8 = stackAr0.equals((java.lang.Object)stackAr3);
    boolean b9 = stackAr0.isFull();
    int i10 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test430"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isFull();
    java.lang.String str8 = stackAr6.toString();
    boolean b9 = stackAr6.isEmpty();
    stackAr6.push((java.lang.Object)10);
    java.lang.String str12 = stackAr6.toString();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isEmpty();
    java.lang.String str15 = stackAr13.toString();
    java.lang.String str16 = stackAr13.toString();
    boolean b17 = stackAr13.isEmpty();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    java.lang.String str20 = stackAr18.toString();
    java.lang.String str21 = stackAr18.toString();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    boolean b24 = stackAr18.equals((java.lang.Object)stackAr22);
    boolean b25 = stackAr18.isFull();
    stackAr13.push((java.lang.Object)stackAr18);
    boolean b27 = stackAr6.equals((java.lang.Object)stackAr13);
    boolean b28 = stackAr0.equals((java.lang.Object)stackAr13);
    java.lang.String str29 = stackAr13.toString();
    boolean b30 = stackAr13.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[10]"+ "'", str12.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[[]]"+ "'", str29.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test431"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)1);
    boolean b3 = stackAr1.equals((java.lang.Object)100);
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    stackAr4.push((java.lang.Object)10);
    java.lang.Object obj10 = stackAr4.top();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isFull();
    java.lang.String str13 = stackAr11.toString();
    boolean b14 = stackAr11.isEmpty();
    stackAr11.push((java.lang.Object)10);
    java.lang.Object obj17 = stackAr11.top();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int)'4');
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr11.equals((java.lang.Object)stackAr19);
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isEmpty();
    java.lang.String str24 = stackAr22.toString();
    java.lang.String str25 = stackAr22.toString();
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isFull();
    boolean b28 = stackAr22.equals((java.lang.Object)stackAr26);
    int i29 = stackAr26.size();
    stackAr19.push((java.lang.Object)stackAr26);
    stackAr4.push((java.lang.Object)stackAr26);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    java.lang.String str34 = stackAr32.toString();
    boolean b35 = stackAr32.isEmpty();
    boolean b36 = stackAr32.isEmpty();
    boolean b37 = stackAr32.isEmpty();
    int i38 = stackAr32.size();
    int i39 = stackAr32.size();
    stackAr26.push((java.lang.Object)stackAr32);
    boolean b42 = stackAr32.equals((java.lang.Object)"[1,4]");
    boolean b43 = stackAr1.equals((java.lang.Object)stackAr32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10+ "'", obj10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 10+ "'", obj17.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[]"+ "'", str34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test432"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    java.lang.String str2 = stackAr1.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = stackAr1.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test433"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    int i4 = stackAr0.size();
    boolean b5 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isEmpty();
    boolean b8 = stackAr6.isEmpty();
    int i9 = stackAr6.size();
    boolean b10 = stackAr6.isEmpty();
    java.lang.String str11 = stackAr6.toString();
    stackAr0.push((java.lang.Object)stackAr6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test434"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)100);
    java.lang.String str2 = stackAr1.toString();
    java.lang.String str3 = stackAr1.toString();
    java.lang.Object obj4 = null;
    boolean b5 = stackAr1.equals(obj4);
    java.lang.String str6 = stackAr1.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj7 = stackAr1.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test435"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    stackAr4.push((java.lang.Object)10);
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    boolean b13 = stackAr11.isEmpty();
    int i14 = stackAr11.size();
    boolean b15 = stackAr11.isEmpty();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isEmpty();
    boolean b18 = stackAr16.isEmpty();
    int i19 = stackAr16.size();
    stackAr11.push((java.lang.Object)i19);
    boolean b21 = stackAr0.equals((java.lang.Object)i19);
    java.lang.String str22 = stackAr0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj23 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test436"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    int i11 = stackAr0.size();
    java.lang.Object obj12 = stackAr0.top();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isFull();
    int i15 = stackAr13.size();
    int i16 = stackAr13.size();
    boolean b17 = stackAr13.isEmpty();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isFull();
    int i20 = stackAr18.size();
    stackAr13.push((java.lang.Object)i20);
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    java.lang.String str24 = stackAr22.toString();
    boolean b25 = stackAr22.isEmpty();
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isEmpty();
    java.lang.String str28 = stackAr26.toString();
    java.lang.String str29 = stackAr26.toString();
    int i30 = stackAr26.size();
    stackAr22.push((java.lang.Object)i30);
    java.lang.Object obj32 = stackAr22.top();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str35 = stackAr34.toString();
    boolean b36 = stackAr22.equals((java.lang.Object)str35);
    boolean b37 = stackAr22.isEmpty();
    boolean b38 = stackAr13.equals((java.lang.Object)b37);
    stackAr0.push((java.lang.Object)stackAr13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[]"+ "'", str29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 0+ "'", obj32.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[]"+ "'", str35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test437"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str8 = stackAr7.toString();
    stackAr0.push((java.lang.Object)str8);
    java.lang.String str10 = stackAr0.toString();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    boolean b13 = stackAr11.isEmpty();
    int i14 = stackAr11.size();
    boolean b15 = stackAr0.equals((java.lang.Object)i14);
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isEmpty();
    java.lang.String str18 = stackAr16.toString();
    java.lang.String str19 = stackAr16.toString();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    boolean b22 = stackAr16.equals((java.lang.Object)stackAr20);
    int i23 = stackAr20.size();
    int i24 = stackAr20.size();
    boolean b25 = stackAr0.equals((java.lang.Object)i24);
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isEmpty();
    org.autotest.StackAr stackAr28 = new org.autotest.StackAr();
    boolean b29 = stackAr28.isEmpty();
    java.lang.String str30 = stackAr28.toString();
    java.lang.String str31 = stackAr28.toString();
    int i32 = stackAr28.size();
    boolean b33 = stackAr26.equals((java.lang.Object)stackAr28);
    boolean b34 = stackAr28.isFull();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int)'4');
    java.lang.String str37 = stackAr36.toString();
    boolean b38 = stackAr28.equals((java.lang.Object)str37);
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isFull();
    java.lang.String str41 = stackAr39.toString();
    boolean b42 = stackAr39.isEmpty();
    stackAr39.push((java.lang.Object)10);
    boolean b45 = stackAr39.isFull();
    boolean b46 = stackAr39.isEmpty();
    stackAr28.push((java.lang.Object)stackAr39);
    java.lang.Object obj48 = stackAr39.top();
    org.autotest.StackAr stackAr50 = new org.autotest.StackAr(0);
    boolean b51 = stackAr50.isEmpty();
    java.lang.String str52 = stackAr50.toString();
    stackAr39.push((java.lang.Object)str52);
    java.lang.Object obj54 = stackAr39.top();
    boolean b55 = stackAr0.equals((java.lang.Object)stackAr39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[[]]"+ "'", str10.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[]"+ "'", str31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[]"+ "'", str37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[]"+ "'", str41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 10+ "'", obj48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "[]"+ "'", str52.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "[]"+ "'", obj54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test438"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr0.equals((java.lang.Object)stackAr4);
    int i7 = stackAr0.size();
    int i8 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test439"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isEmpty();
    java.lang.String str8 = stackAr6.toString();
    java.lang.String str9 = stackAr6.toString();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    boolean b12 = stackAr6.equals((java.lang.Object)stackAr10);
    java.lang.String str13 = stackAr6.toString();
    stackAr0.push((java.lang.Object)stackAr6);
    boolean b15 = stackAr6.isFull();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj16 = stackAr6.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test440"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    stackAr0.push((java.lang.Object)i8);
    java.lang.Object obj10 = stackAr0.top();
    java.lang.String str11 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 0+ "'", obj10.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[0]"+ "'", str11.equals("[0]"));

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test441"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    boolean b14 = stackAr5.equals((java.lang.Object)(byte)10);
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isFull();
    boolean b19 = stackAr17.isFull();
    boolean b20 = stackAr15.equals((java.lang.Object)b19);
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
    boolean b22 = stackAr21.isEmpty();
    java.lang.String str23 = stackAr21.toString();
    java.lang.String str24 = stackAr21.toString();
    org.autotest.StackAr stackAr25 = new org.autotest.StackAr();
    boolean b26 = stackAr25.isFull();
    boolean b27 = stackAr21.equals((java.lang.Object)stackAr25);
    java.lang.String str28 = stackAr21.toString();
    stackAr15.push((java.lang.Object)stackAr21);
    stackAr5.push((java.lang.Object)stackAr21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test442"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    int i4 = stackAr0.size();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    boolean b9 = stackAr7.isFull();
    boolean b10 = stackAr5.equals((java.lang.Object)b9);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    java.lang.String str14 = stackAr11.toString();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    boolean b17 = stackAr11.equals((java.lang.Object)stackAr15);
    boolean b18 = stackAr5.equals((java.lang.Object)stackAr11);
    int i19 = stackAr11.size();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isEmpty();
    java.lang.String str22 = stackAr20.toString();
    int i23 = stackAr20.size();
    boolean b24 = stackAr20.isFull();
    boolean b25 = stackAr11.equals((java.lang.Object)stackAr20);
    boolean b26 = stackAr0.equals((java.lang.Object)stackAr11);
    boolean b27 = stackAr11.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test443"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    java.lang.String str30 = stackAr23.toString();
    stackAr17.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    java.lang.String str38 = stackAr36.toString();
    java.lang.String str39 = stackAr36.toString();
    int i40 = stackAr36.size();
    boolean b41 = stackAr34.equals((java.lang.Object)stackAr36);
    stackAr32.push((java.lang.Object)stackAr36);
    int i43 = stackAr32.size();
    stackAr23.push((java.lang.Object)i43);
    boolean b45 = stackAr3.equals((java.lang.Object)stackAr23);
    java.lang.String str46 = stackAr23.toString();
    boolean b47 = stackAr23.isFull();
    boolean b48 = stackAr23.isFull();
    java.lang.String str49 = stackAr23.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[1]"+ "'", str46.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[1]"+ "'", str49.equals("[1]"));

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test444"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    int i5 = stackAr0.size();
    int i6 = stackAr0.size();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)(byte)10);
    boolean b9 = stackAr0.equals((java.lang.Object)stackAr8);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr(1);
    java.lang.Object obj12 = null;
    stackAr11.push(obj12);
    boolean b14 = stackAr0.equals((java.lang.Object)stackAr11);
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    java.lang.String str17 = stackAr15.toString();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int)(byte)100);
    boolean b20 = stackAr15.equals((java.lang.Object)stackAr19);
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str23 = stackAr22.toString();
    stackAr15.push((java.lang.Object)str23);
    java.lang.String str25 = stackAr15.toString();
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isEmpty();
    boolean b28 = stackAr26.isEmpty();
    int i29 = stackAr26.size();
    boolean b30 = stackAr15.equals((java.lang.Object)i29);
    java.lang.Object obj31 = stackAr15.top();
    boolean b32 = stackAr15.isEmpty();
    org.autotest.StackAr stackAr33 = new org.autotest.StackAr();
    boolean b34 = stackAr33.isEmpty();
    org.autotest.StackAr stackAr35 = new org.autotest.StackAr();
    boolean b36 = stackAr35.isFull();
    boolean b37 = stackAr35.isFull();
    boolean b38 = stackAr33.equals((java.lang.Object)b37);
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isFull();
    java.lang.String str41 = stackAr39.toString();
    boolean b42 = stackAr39.isEmpty();
    org.autotest.StackAr stackAr43 = new org.autotest.StackAr();
    boolean b44 = stackAr43.isEmpty();
    java.lang.String str45 = stackAr43.toString();
    java.lang.String str46 = stackAr43.toString();
    int i47 = stackAr43.size();
    stackAr39.push((java.lang.Object)i47);
    java.lang.Object obj49 = stackAr39.top();
    stackAr33.push((java.lang.Object)stackAr39);
    java.lang.String str51 = stackAr33.toString();
    boolean b52 = stackAr15.equals((java.lang.Object)stackAr33);
    java.lang.Object obj53 = stackAr15.top();
    boolean b54 = stackAr0.equals(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[[]]"+ "'", str25.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "[]"+ "'", obj31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[]"+ "'", str41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[]"+ "'", str45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[]"+ "'", str46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 0+ "'", obj49.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[[0]]"+ "'", str51.equals("[[0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + "[]"+ "'", obj53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test445"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    int i7 = stackAr0.size();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isEmpty();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    java.lang.String str12 = stackAr10.toString();
    boolean b13 = stackAr10.isEmpty();
    boolean b14 = stackAr10.isEmpty();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    java.lang.String str17 = stackAr15.toString();
    boolean b18 = stackAr15.isEmpty();
    stackAr15.push((java.lang.Object)10);
    java.lang.String str21 = stackAr15.toString();
    stackAr10.push((java.lang.Object)stackAr15);
    stackAr8.push((java.lang.Object)stackAr15);
    java.lang.String str24 = stackAr8.toString();
    stackAr0.push((java.lang.Object)stackAr8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[10]"+ "'", str21.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[[10]]"+ "'", str24.equals("[[10]]"));

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test446"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    java.lang.Object obj14 = stackAr5.top();
    java.lang.Object obj15 = stackAr5.top();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isFull();
    java.lang.String str18 = stackAr16.toString();
    boolean b19 = stackAr16.isEmpty();
    stackAr16.push((java.lang.Object)100.0d);
    java.lang.String str22 = stackAr16.toString();
    boolean b23 = stackAr16.isEmpty();
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
    boolean b25 = stackAr24.isFull();
    java.lang.String str26 = stackAr24.toString();
    boolean b27 = stackAr24.isEmpty();
    stackAr24.push((java.lang.Object)10);
    java.lang.Object obj30 = stackAr24.top();
    boolean b31 = stackAr16.equals(obj30);
    stackAr5.push(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10+ "'", obj14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 10+ "'", obj15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[100.0]"+ "'", str22.equals("[100.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 10+ "'", obj30.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test447"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    boolean b6 = stackAr0.isFull();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b10 = stackAr7.isEmpty();
    stackAr7.push((java.lang.Object)100.0d);
    boolean b13 = stackAr7.isEmpty();
    stackAr0.push((java.lang.Object)stackAr7);
    boolean b15 = stackAr7.isFull();
    boolean b16 = stackAr7.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test448"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    int i4 = stackAr0.size();
    boolean b5 = stackAr0.isEmpty();
    int i6 = stackAr0.size();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj7 = stackAr0.top();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test449"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    java.lang.String str1 = stackAr0.toString();
    boolean b2 = stackAr0.isEmpty();
    int i3 = stackAr0.size();
    int i4 = stackAr0.size();
    int i5 = stackAr0.size();
    boolean b6 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "[]"+ "'", str1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test450"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)0);
    boolean b2 = stackAr1.isEmpty();
    boolean b4 = stackAr1.equals((java.lang.Object)100);
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isEmpty();
    java.lang.String str11 = stackAr9.toString();
    java.lang.String str12 = stackAr9.toString();
    int i13 = stackAr9.size();
    stackAr5.push((java.lang.Object)i13);
    int i15 = stackAr5.size();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isEmpty();
    java.lang.String str18 = stackAr16.toString();
    java.lang.String str19 = stackAr16.toString();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    boolean b22 = stackAr16.equals((java.lang.Object)stackAr20);
    stackAr5.push((java.lang.Object)stackAr20);
    boolean b24 = stackAr1.equals((java.lang.Object)stackAr20);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj25 = stackAr20.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test451"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    int i2 = stackAr0.size();
    int i3 = stackAr0.size();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    int i7 = stackAr5.size();
    stackAr0.push((java.lang.Object)i7);
    int i9 = stackAr0.size();
    java.lang.Object obj10 = stackAr0.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 0+ "'", obj10.equals(0));

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test452"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    boolean b6 = stackAr0.equals((java.lang.Object)stackAr4);
    boolean b7 = stackAr0.isFull();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr(1);
    boolean b10 = stackAr0.equals((java.lang.Object)1);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    boolean b13 = stackAr11.isEmpty();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isFull();
    java.lang.String str16 = stackAr14.toString();
    boolean b18 = stackAr14.equals((java.lang.Object)(-1));
    boolean b19 = stackAr11.equals((java.lang.Object)stackAr14);
    boolean b20 = stackAr0.equals((java.lang.Object)stackAr11);
    boolean b21 = stackAr11.isEmpty();
    java.lang.String str22 = stackAr11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test453"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str8 = stackAr7.toString();
    stackAr0.push((java.lang.Object)str8);
    java.lang.String str10 = stackAr0.toString();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    boolean b13 = stackAr11.isEmpty();
    int i14 = stackAr11.size();
    boolean b15 = stackAr0.equals((java.lang.Object)i14);
    java.lang.Object obj16 = stackAr0.top();
    boolean b17 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    boolean b22 = stackAr20.isFull();
    boolean b23 = stackAr18.equals((java.lang.Object)b22);
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
    boolean b25 = stackAr24.isFull();
    java.lang.String str26 = stackAr24.toString();
    boolean b27 = stackAr24.isEmpty();
    org.autotest.StackAr stackAr28 = new org.autotest.StackAr();
    boolean b29 = stackAr28.isEmpty();
    java.lang.String str30 = stackAr28.toString();
    java.lang.String str31 = stackAr28.toString();
    int i32 = stackAr28.size();
    stackAr24.push((java.lang.Object)i32);
    java.lang.Object obj34 = stackAr24.top();
    stackAr18.push((java.lang.Object)stackAr24);
    java.lang.String str36 = stackAr18.toString();
    boolean b37 = stackAr0.equals((java.lang.Object)stackAr18);
    int i38 = stackAr18.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[[]]"+ "'", str10.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "[]"+ "'", obj16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[]"+ "'", str31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 0+ "'", obj34.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[[0]]"+ "'", str36.equals("[[0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test454"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    java.lang.String str7 = stackAr5.toString();
    java.lang.String str8 = stackAr5.toString();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    boolean b11 = stackAr5.equals((java.lang.Object)stackAr9);
    boolean b12 = stackAr5.isFull();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str14 = stackAr5.toString();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    java.lang.String str21 = stackAr19.toString();
    java.lang.String str22 = stackAr19.toString();
    int i23 = stackAr19.size();
    boolean b24 = stackAr17.equals((java.lang.Object)stackAr19);
    stackAr15.push((java.lang.Object)stackAr19);
    boolean b26 = stackAr5.equals((java.lang.Object)stackAr19);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj27 = stackAr5.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test455"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isEmpty();
    java.lang.String str16 = stackAr14.toString();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int)(byte)100);
    boolean b19 = stackAr14.equals((java.lang.Object)stackAr18);
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    java.lang.String str22 = stackAr20.toString();
    boolean b23 = stackAr20.isEmpty();
    stackAr20.push((java.lang.Object)10);
    java.lang.String str26 = stackAr20.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isEmpty();
    java.lang.String str29 = stackAr27.toString();
    java.lang.String str30 = stackAr27.toString();
    boolean b31 = stackAr27.isEmpty();
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isEmpty();
    java.lang.String str34 = stackAr32.toString();
    java.lang.String str35 = stackAr32.toString();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isFull();
    boolean b38 = stackAr32.equals((java.lang.Object)stackAr36);
    boolean b39 = stackAr32.isFull();
    stackAr27.push((java.lang.Object)stackAr32);
    boolean b41 = stackAr20.equals((java.lang.Object)stackAr27);
    boolean b42 = stackAr14.equals((java.lang.Object)stackAr27);
    boolean b43 = stackAr5.equals((java.lang.Object)b42);
    boolean b44 = stackAr5.isFull();
    int i45 = stackAr5.size();
    org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int)(byte)100);
    boolean b48 = stackAr47.isEmpty();
    boolean b49 = stackAr5.equals((java.lang.Object)stackAr47);
    int i50 = stackAr5.size();
    org.autotest.StackAr stackAr51 = new org.autotest.StackAr();
    boolean b52 = stackAr51.isFull();
    java.lang.String str53 = stackAr51.toString();
    boolean b54 = stackAr51.isEmpty();
    boolean b55 = stackAr51.isEmpty();
    org.autotest.StackAr stackAr56 = new org.autotest.StackAr();
    boolean b57 = stackAr56.isFull();
    java.lang.String str58 = stackAr56.toString();
    boolean b59 = stackAr56.isEmpty();
    stackAr56.push((java.lang.Object)10);
    java.lang.String str62 = stackAr56.toString();
    stackAr51.push((java.lang.Object)stackAr56);
    java.lang.String str64 = stackAr56.toString();
    java.lang.Object obj65 = stackAr56.top();
    org.autotest.StackAr stackAr66 = new org.autotest.StackAr();
    boolean b67 = stackAr66.isEmpty();
    java.lang.String str68 = stackAr66.toString();
    java.lang.String str69 = stackAr66.toString();
    int i70 = stackAr66.size();
    boolean b71 = stackAr66.isEmpty();
    int i72 = stackAr66.size();
    stackAr56.push((java.lang.Object)stackAr66);
    stackAr5.push((java.lang.Object)stackAr66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[10]"+ "'", str26.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[]"+ "'", str29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[]"+ "'", str34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[]"+ "'", str35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[]"+ "'", str53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "[]"+ "'", str58.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "[10]"+ "'", str62.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "[10]"+ "'", str64.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj65 + "' != '" + 10+ "'", obj65.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "[]"+ "'", str68.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "[]"+ "'", str69.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test456"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.String str6 = stackAr0.toString();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isEmpty();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    java.lang.String str14 = stackAr11.toString();
    int i15 = stackAr11.size();
    boolean b16 = stackAr9.equals((java.lang.Object)stackAr11);
    stackAr7.push((java.lang.Object)stackAr11);
    int i18 = stackAr7.size();
    java.lang.Object obj19 = stackAr7.top();
    stackAr0.push((java.lang.Object)stackAr7);
    stackAr7.push((java.lang.Object)100.0f);
    boolean b23 = stackAr7.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[10]"+ "'", str6.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test457"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isEmpty();
    java.lang.String str8 = stackAr6.toString();
    java.lang.String str9 = stackAr6.toString();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    boolean b12 = stackAr6.equals((java.lang.Object)stackAr10);
    java.lang.String str13 = stackAr6.toString();
    stackAr0.push((java.lang.Object)stackAr6);
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    java.lang.String str21 = stackAr19.toString();
    java.lang.String str22 = stackAr19.toString();
    int i23 = stackAr19.size();
    boolean b24 = stackAr17.equals((java.lang.Object)stackAr19);
    stackAr15.push((java.lang.Object)stackAr19);
    int i26 = stackAr15.size();
    stackAr6.push((java.lang.Object)i26);
    boolean b28 = stackAr6.isEmpty();
    boolean b29 = stackAr6.isFull();
    boolean b30 = stackAr6.isEmpty();
    java.lang.Object obj31 = stackAr6.top();
    java.lang.Object obj32 = stackAr6.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj31 + "' != '" + 1+ "'", obj31.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + 1+ "'", obj32.equals(1));

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test458"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    int i2 = stackAr0.size();
    boolean b3 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test459"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    int i5 = stackAr0.size();
    int i6 = stackAr0.size();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)(byte)10);
    boolean b9 = stackAr0.equals((java.lang.Object)stackAr8);
    boolean b10 = stackAr0.isFull();
    java.lang.String str11 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test460"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)1);
    boolean b3 = stackAr1.equals((java.lang.Object)100);
    java.lang.String str4 = stackAr1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test461"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isFull();
    java.lang.String str13 = stackAr11.toString();
    boolean b14 = stackAr11.isEmpty();
    stackAr11.push((java.lang.Object)10);
    java.lang.String str17 = stackAr11.toString();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    java.lang.String str20 = stackAr18.toString();
    java.lang.String str21 = stackAr18.toString();
    boolean b22 = stackAr18.isEmpty();
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    boolean b30 = stackAr23.isFull();
    stackAr18.push((java.lang.Object)stackAr23);
    boolean b32 = stackAr11.equals((java.lang.Object)stackAr18);
    int i33 = stackAr11.size();
    boolean b34 = stackAr8.equals((java.lang.Object)stackAr11);
    org.autotest.StackAr stackAr35 = new org.autotest.StackAr();
    boolean b36 = stackAr35.isEmpty();
    java.lang.String str37 = stackAr35.toString();
    java.lang.String str38 = stackAr35.toString();
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isFull();
    boolean b41 = stackAr35.equals((java.lang.Object)stackAr39);
    int i42 = stackAr39.size();
    int i43 = stackAr39.size();
    org.autotest.StackAr stackAr44 = new org.autotest.StackAr();
    boolean b45 = stackAr44.isFull();
    stackAr39.push((java.lang.Object)stackAr44);
    boolean b47 = stackAr11.equals((java.lang.Object)stackAr39);
    java.lang.Object obj48 = stackAr11.top();
    org.autotest.StackAr stackAr50 = new org.autotest.StackAr((int)(byte)100);
    boolean b51 = stackAr50.isEmpty();
    boolean b52 = stackAr50.isFull();
    org.autotest.StackAr stackAr53 = new org.autotest.StackAr();
    boolean b54 = stackAr53.isEmpty();
    java.lang.String str55 = stackAr53.toString();
    org.autotest.StackAr stackAr57 = new org.autotest.StackAr((int)(byte)100);
    boolean b58 = stackAr53.equals((java.lang.Object)stackAr57);
    org.autotest.StackAr stackAr60 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str61 = stackAr60.toString();
    stackAr53.push((java.lang.Object)str61);
    java.lang.String str63 = stackAr53.toString();
    org.autotest.StackAr stackAr64 = new org.autotest.StackAr();
    boolean b65 = stackAr64.isEmpty();
    boolean b66 = stackAr64.isEmpty();
    int i67 = stackAr64.size();
    boolean b68 = stackAr53.equals((java.lang.Object)i67);
    boolean b69 = stackAr53.isFull();
    stackAr50.push((java.lang.Object)b69);
    boolean b71 = stackAr11.equals((java.lang.Object)b69);
    boolean b72 = stackAr11.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[10]"+ "'", str17.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[]"+ "'", str37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 10+ "'", obj48.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "[]"+ "'", str55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "[]"+ "'", str61.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "[[]]"+ "'", str63.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test462"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    boolean b14 = stackAr5.equals((java.lang.Object)(byte)10);
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    java.lang.String str17 = stackAr15.toString();
    boolean b18 = stackAr15.isEmpty();
    stackAr15.push((java.lang.Object)10);
    java.lang.String str21 = stackAr15.toString();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
    boolean b25 = stackAr24.isEmpty();
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isEmpty();
    java.lang.String str28 = stackAr26.toString();
    java.lang.String str29 = stackAr26.toString();
    int i30 = stackAr26.size();
    boolean b31 = stackAr24.equals((java.lang.Object)stackAr26);
    stackAr22.push((java.lang.Object)stackAr26);
    int i33 = stackAr22.size();
    java.lang.Object obj34 = stackAr22.top();
    stackAr15.push((java.lang.Object)stackAr22);
    int i36 = stackAr22.size();
    stackAr5.push((java.lang.Object)stackAr22);
    java.lang.Object obj38 = stackAr22.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[10]"+ "'", str21.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[]"+ "'", str29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test463"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    int i11 = stackAr0.size();
    java.lang.Object obj12 = stackAr0.top();
    boolean b13 = stackAr0.isEmpty();
    int i14 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test464"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)1);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj2 = stackAr1.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test465"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    stackAr0.push((java.lang.Object)(-1.0f));
    boolean b6 = stackAr0.isEmpty();
    java.lang.Object obj7 = stackAr0.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + (-1.0f)+ "'", obj7.equals((-1.0f)));

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test466"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    int i6 = stackAr0.size();
    boolean b7 = stackAr0.isFull();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isEmpty();
    java.lang.String str10 = stackAr8.toString();
    java.lang.String str11 = stackAr8.toString();
    boolean b12 = stackAr8.isEmpty();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isEmpty();
    java.lang.String str15 = stackAr13.toString();
    java.lang.String str16 = stackAr13.toString();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isFull();
    boolean b19 = stackAr13.equals((java.lang.Object)stackAr17);
    boolean b20 = stackAr13.isFull();
    stackAr8.push((java.lang.Object)stackAr13);
    stackAr0.push((java.lang.Object)stackAr13);
    boolean b23 = stackAr13.isEmpty();
    boolean b24 = stackAr13.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test467"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.String str6 = stackAr0.toString();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isEmpty();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    java.lang.String str14 = stackAr11.toString();
    int i15 = stackAr11.size();
    boolean b16 = stackAr9.equals((java.lang.Object)stackAr11);
    stackAr7.push((java.lang.Object)stackAr11);
    int i18 = stackAr7.size();
    java.lang.Object obj19 = stackAr7.top();
    stackAr0.push((java.lang.Object)stackAr7);
    java.lang.Object obj21 = stackAr0.top();
    java.lang.String str22 = stackAr0.toString();
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isFull();
    boolean b25 = stackAr23.isFull();
    boolean b27 = stackAr23.equals((java.lang.Object)10.0f);
    int i28 = stackAr23.size();
    int i29 = stackAr23.size();
    org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int)(byte)10);
    boolean b32 = stackAr23.equals((java.lang.Object)stackAr31);
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr(1);
    java.lang.Object obj35 = null;
    stackAr34.push(obj35);
    boolean b37 = stackAr23.equals((java.lang.Object)stackAr34);
    boolean b38 = stackAr34.isFull();
    stackAr0.push((java.lang.Object)b38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[10]"+ "'", str6.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[10,[[]]]"+ "'", str22.equals("[10,[[]]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test468"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b3 = stackAr0.equals((java.lang.Object)100);
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int)(byte)100);
    boolean b6 = stackAr5.isEmpty();
    stackAr0.push((java.lang.Object)stackAr5);
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    boolean b12 = stackAr8.isEmpty();
    boolean b13 = stackAr8.isEmpty();
    int i14 = stackAr8.size();
    int i15 = stackAr8.size();
    java.lang.String str16 = stackAr8.toString();
    boolean b17 = stackAr5.equals((java.lang.Object)stackAr8);
    boolean b18 = stackAr8.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test469"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isFull();
    java.lang.String str8 = stackAr6.toString();
    boolean b9 = stackAr6.isEmpty();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isEmpty();
    java.lang.String str12 = stackAr10.toString();
    java.lang.String str13 = stackAr10.toString();
    int i14 = stackAr10.size();
    stackAr6.push((java.lang.Object)i14);
    java.lang.Object obj16 = stackAr6.top();
    stackAr0.push((java.lang.Object)stackAr6);
    int i18 = stackAr0.size();
    java.lang.String str19 = stackAr0.toString();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isEmpty();
    java.lang.String str22 = stackAr20.toString();
    java.lang.String str23 = stackAr20.toString();
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
    boolean b25 = stackAr24.isFull();
    java.lang.String str26 = stackAr24.toString();
    boolean b27 = stackAr24.isEmpty();
    boolean b28 = stackAr24.isEmpty();
    stackAr20.push((java.lang.Object)b28);
    boolean b30 = stackAr20.isFull();
    org.autotest.StackAr stackAr31 = new org.autotest.StackAr();
    boolean b32 = stackAr31.isEmpty();
    java.lang.String str33 = stackAr31.toString();
    int i34 = stackAr31.size();
    stackAr20.push((java.lang.Object)i34);
    java.lang.String str36 = stackAr20.toString();
    stackAr0.push((java.lang.Object)str36);
    java.lang.String str38 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0+ "'", obj16.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[[0]]"+ "'", str19.equals("[[0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[]"+ "'", str33.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[true,0]"+ "'", str36.equals("[true,0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[[0],[true,0]]"+ "'", str38.equals("[[0],[true,0]]"));

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test470"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isFull();
    boolean b3 = stackAr0.isFull();
    java.lang.String str4 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test471"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str8 = stackAr7.toString();
    stackAr0.push((java.lang.Object)str8);
    java.lang.String str10 = stackAr0.toString();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isEmpty();
    java.lang.String str15 = stackAr13.toString();
    java.lang.String str16 = stackAr13.toString();
    int i17 = stackAr13.size();
    boolean b18 = stackAr11.equals((java.lang.Object)stackAr13);
    stackAr0.push((java.lang.Object)stackAr11);
    org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int)(short)10);
    boolean b22 = stackAr21.isEmpty();
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isFull();
    boolean b25 = stackAr23.isFull();
    boolean b27 = stackAr23.equals((java.lang.Object)10.0f);
    int i28 = stackAr23.size();
    int i29 = stackAr23.size();
    org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int)(byte)10);
    boolean b32 = stackAr23.equals((java.lang.Object)stackAr31);
    stackAr21.push((java.lang.Object)b32);
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    java.lang.String str36 = stackAr34.toString();
    java.lang.String str37 = stackAr34.toString();
    boolean b38 = stackAr34.isEmpty();
    boolean b39 = stackAr21.equals((java.lang.Object)b38);
    boolean b40 = stackAr0.equals((java.lang.Object)b39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[[]]"+ "'", str10.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[]"+ "'", str36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[]"+ "'", str37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test472"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b10 = stackAr7.isEmpty();
    stackAr7.push((java.lang.Object)10);
    java.lang.Object obj13 = stackAr7.top();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int)'4');
    boolean b16 = stackAr15.isFull();
    boolean b17 = stackAr7.equals((java.lang.Object)stackAr15);
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    java.lang.String str20 = stackAr18.toString();
    java.lang.String str21 = stackAr18.toString();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    boolean b24 = stackAr18.equals((java.lang.Object)stackAr22);
    int i25 = stackAr22.size();
    stackAr15.push((java.lang.Object)stackAr22);
    stackAr0.push((java.lang.Object)stackAr22);
    boolean b28 = stackAr0.isEmpty();
    boolean b29 = stackAr0.isEmpty();
    int i30 = stackAr0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 10+ "'", obj13.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 2);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test473"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str2 = stackAr1.toString();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isEmpty();
    java.lang.String str9 = stackAr7.toString();
    java.lang.String str10 = stackAr7.toString();
    int i11 = stackAr7.size();
    boolean b12 = stackAr5.equals((java.lang.Object)stackAr7);
    stackAr3.push((java.lang.Object)stackAr7);
    int i14 = stackAr3.size();
    java.lang.Object obj15 = stackAr3.top();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isFull();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isEmpty();
    java.lang.String str22 = stackAr20.toString();
    java.lang.String str23 = stackAr20.toString();
    int i24 = stackAr20.size();
    boolean b25 = stackAr18.equals((java.lang.Object)stackAr20);
    stackAr16.push((java.lang.Object)stackAr20);
    stackAr3.push((java.lang.Object)stackAr16);
    java.lang.Object obj28 = stackAr3.top();
    boolean b29 = stackAr1.equals((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str32 = stackAr31.toString();
    boolean b33 = stackAr31.isEmpty();
    boolean b34 = stackAr31.isEmpty();
    java.lang.String str35 = stackAr31.toString();
    boolean b36 = stackAr3.equals((java.lang.Object)stackAr31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[]"+ "'", str32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[]"+ "'", str35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test474"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    boolean b5 = stackAr0.isEmpty();
    int i6 = stackAr0.size();
    boolean b7 = stackAr0.isEmpty();
    int i8 = stackAr0.size();
    boolean b9 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test475"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    java.lang.String str14 = stackAr11.toString();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isFull();
    boolean b17 = stackAr11.equals((java.lang.Object)stackAr15);
    int i18 = stackAr15.size();
    stackAr8.push((java.lang.Object)stackAr15);
    java.lang.String str20 = stackAr15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test476"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)100.0d);
    java.lang.String str6 = stackAr0.toString();
    boolean b7 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.Object obj14 = stackAr8.top();
    boolean b15 = stackAr0.equals(obj14);
    java.lang.Object obj16 = stackAr0.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[100.0]"+ "'", str6.equals("[100.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10+ "'", obj14.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 100.0d+ "'", obj16.equals(100.0d));

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test477"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b7 = stackAr3.equals((java.lang.Object)(-1));
    boolean b8 = stackAr0.equals((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
    boolean b10 = stackAr9.isFull();
    java.lang.String str11 = stackAr9.toString();
    boolean b12 = stackAr9.isEmpty();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isEmpty();
    java.lang.String str15 = stackAr13.toString();
    java.lang.String str16 = stackAr13.toString();
    int i17 = stackAr13.size();
    stackAr9.push((java.lang.Object)i17);
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isEmpty();
    java.lang.String str21 = stackAr19.toString();
    java.lang.String str22 = stackAr19.toString();
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isFull();
    boolean b25 = stackAr19.equals((java.lang.Object)stackAr23);
    int i26 = stackAr23.size();
    stackAr9.push((java.lang.Object)i26);
    java.lang.String str28 = stackAr9.toString();
    stackAr3.push((java.lang.Object)stackAr9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]"+ "'", str22.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[0,0]"+ "'", str28.equals("[0,0]"));

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test478"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    int i2 = stackAr0.size();
    int i3 = stackAr0.size();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    int i7 = stackAr5.size();
    stackAr0.push((java.lang.Object)i7);
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int)(byte)100);
    boolean b11 = stackAr10.isEmpty();
    stackAr0.push((java.lang.Object)stackAr10);
    boolean b13 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isEmpty();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isEmpty();
    java.lang.String str18 = stackAr16.toString();
    java.lang.String str19 = stackAr16.toString();
    int i20 = stackAr16.size();
    boolean b21 = stackAr14.equals((java.lang.Object)stackAr16);
    boolean b22 = stackAr16.isFull();
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int)'4');
    java.lang.String str25 = stackAr24.toString();
    boolean b26 = stackAr16.equals((java.lang.Object)str25);
    boolean b27 = stackAr0.equals((java.lang.Object)stackAr16);
    org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int)(byte)10);
    java.lang.String str30 = stackAr29.toString();
    boolean b31 = stackAr29.isEmpty();
    java.lang.String str32 = stackAr29.toString();
    stackAr0.push((java.lang.Object)stackAr29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[]"+ "'", str32.equals("[]"));

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test479"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr(100);
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    boolean b6 = stackAr2.isEmpty();
    stackAr1.push((java.lang.Object)b6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test480"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    boolean b8 = stackAr4.isEmpty();
    stackAr0.push((java.lang.Object)b8);
    boolean b10 = stackAr0.isFull();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isEmpty();
    java.lang.String str13 = stackAr11.toString();
    int i14 = stackAr11.size();
    stackAr0.push((java.lang.Object)i14);
    java.lang.String str16 = stackAr0.toString();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isFull();
    java.lang.String str19 = stackAr17.toString();
    boolean b20 = stackAr17.isEmpty();
    boolean b21 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    java.lang.String str24 = stackAr22.toString();
    boolean b25 = stackAr22.isEmpty();
    stackAr22.push((java.lang.Object)10);
    java.lang.String str28 = stackAr22.toString();
    stackAr17.push((java.lang.Object)stackAr22);
    java.lang.String str30 = stackAr22.toString();
    org.autotest.StackAr stackAr31 = new org.autotest.StackAr();
    boolean b32 = stackAr31.isFull();
    boolean b33 = stackAr31.isFull();
    java.lang.String str34 = stackAr31.toString();
    boolean b35 = stackAr31.isEmpty();
    stackAr22.push((java.lang.Object)stackAr31);
    stackAr0.push((java.lang.Object)stackAr22);
    boolean b38 = stackAr22.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[true,0]"+ "'", str16.equals("[true,0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[10]"+ "'", str28.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[10]"+ "'", str30.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[]"+ "'", str34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test481"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int)(byte)100);
    boolean b5 = stackAr0.equals((java.lang.Object)stackAr4);
    java.lang.String str6 = stackAr4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test482"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    stackAr4.push((java.lang.Object)10);
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr4);
    boolean b11 = stackAr0.isEmpty();
    boolean b12 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test483"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b2 = stackAr0.isFull();
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    boolean b5 = stackAr3.isFull();
    boolean b7 = stackAr3.equals((java.lang.Object)10.0f);
    int i8 = stackAr3.size();
    int i9 = stackAr3.size();
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int)(byte)10);
    boolean b12 = stackAr3.equals((java.lang.Object)stackAr11);
    boolean b13 = stackAr0.equals((java.lang.Object)b12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test484"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    boolean b3 = stackAr0.equals((java.lang.Object)100);
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int)(byte)100);
    boolean b6 = stackAr5.isEmpty();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.Object obj8 = stackAr0.top();
    java.lang.String str9 = stackAr0.toString();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    boolean b12 = stackAr10.isFull();
    boolean b14 = stackAr10.equals((java.lang.Object)10.0f);
    boolean b15 = stackAr10.isEmpty();
    java.lang.String str16 = stackAr10.toString();
    stackAr0.push((java.lang.Object)stackAr10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[[]]"+ "'", str9.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]"+ "'", str16.equals("[]"));

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test485"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    stackAr4.push((java.lang.Object)10);
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr4);
    java.lang.String str11 = stackAr4.toString();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isFull();
    java.lang.String str14 = stackAr12.toString();
    boolean b15 = stackAr12.isEmpty();
    stackAr12.push((java.lang.Object)10);
    boolean b18 = stackAr12.isEmpty();
    stackAr4.push((java.lang.Object)b18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test486"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.String str6 = stackAr0.toString();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isEmpty();
    java.lang.String str9 = stackAr7.toString();
    java.lang.String str10 = stackAr7.toString();
    boolean b11 = stackAr7.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isEmpty();
    java.lang.String str14 = stackAr12.toString();
    java.lang.String str15 = stackAr12.toString();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isFull();
    boolean b18 = stackAr12.equals((java.lang.Object)stackAr16);
    boolean b19 = stackAr12.isFull();
    stackAr7.push((java.lang.Object)stackAr12);
    boolean b21 = stackAr0.equals((java.lang.Object)stackAr7);
    java.lang.Object obj22 = stackAr0.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[10]"+ "'", str6.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 10+ "'", obj22.equals(10));

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test487"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b3 = stackAr0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test488"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    boolean b4 = stackAr2.isFull();
    boolean b5 = stackAr0.equals((java.lang.Object)b4);
    org.autotest.StackAr stackAr6 = new org.autotest.StackAr();
    boolean b7 = stackAr6.isEmpty();
    java.lang.String str8 = stackAr6.toString();
    java.lang.String str9 = stackAr6.toString();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isFull();
    boolean b12 = stackAr6.equals((java.lang.Object)stackAr10);
    java.lang.String str13 = stackAr6.toString();
    stackAr0.push((java.lang.Object)stackAr6);
    boolean b15 = stackAr6.isFull();
    boolean b16 = stackAr6.isEmpty();
    boolean b17 = stackAr6.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test489"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    java.lang.String str30 = stackAr23.toString();
    stackAr17.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
    boolean b35 = stackAr34.isEmpty();
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isEmpty();
    java.lang.String str38 = stackAr36.toString();
    java.lang.String str39 = stackAr36.toString();
    int i40 = stackAr36.size();
    boolean b41 = stackAr34.equals((java.lang.Object)stackAr36);
    stackAr32.push((java.lang.Object)stackAr36);
    int i43 = stackAr32.size();
    stackAr23.push((java.lang.Object)i43);
    boolean b45 = stackAr3.equals((java.lang.Object)stackAr23);
    java.lang.String str46 = stackAr23.toString();
    boolean b47 = stackAr23.isFull();
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isEmpty();
    org.autotest.StackAr stackAr50 = new org.autotest.StackAr();
    boolean b51 = stackAr50.isFull();
    boolean b52 = stackAr50.isFull();
    boolean b53 = stackAr48.equals((java.lang.Object)b52);
    org.autotest.StackAr stackAr54 = new org.autotest.StackAr();
    boolean b55 = stackAr54.isFull();
    java.lang.String str56 = stackAr54.toString();
    boolean b57 = stackAr54.isEmpty();
    org.autotest.StackAr stackAr58 = new org.autotest.StackAr();
    boolean b59 = stackAr58.isEmpty();
    java.lang.String str60 = stackAr58.toString();
    java.lang.String str61 = stackAr58.toString();
    int i62 = stackAr58.size();
    stackAr54.push((java.lang.Object)i62);
    java.lang.Object obj64 = stackAr54.top();
    stackAr48.push((java.lang.Object)stackAr54);
    org.autotest.StackAr stackAr66 = new org.autotest.StackAr();
    boolean b67 = stackAr66.isFull();
    java.lang.String str68 = stackAr66.toString();
    boolean b69 = stackAr66.isEmpty();
    boolean b70 = stackAr66.isEmpty();
    org.autotest.StackAr stackAr71 = new org.autotest.StackAr();
    boolean b72 = stackAr71.isFull();
    java.lang.String str73 = stackAr71.toString();
    boolean b74 = stackAr71.isEmpty();
    stackAr71.push((java.lang.Object)10);
    java.lang.String str77 = stackAr71.toString();
    stackAr66.push((java.lang.Object)stackAr71);
    boolean b79 = stackAr66.isEmpty();
    boolean b80 = stackAr54.equals((java.lang.Object)b79);
    org.autotest.StackAr stackAr81 = new org.autotest.StackAr();
    boolean b82 = stackAr81.isEmpty();
    org.autotest.StackAr stackAr83 = new org.autotest.StackAr();
    boolean b84 = stackAr83.isFull();
    java.lang.String str85 = stackAr83.toString();
    boolean b86 = stackAr83.isEmpty();
    boolean b87 = stackAr83.isEmpty();
    org.autotest.StackAr stackAr88 = new org.autotest.StackAr();
    boolean b89 = stackAr88.isFull();
    java.lang.String str90 = stackAr88.toString();
    boolean b91 = stackAr88.isEmpty();
    stackAr88.push((java.lang.Object)10);
    java.lang.String str94 = stackAr88.toString();
    stackAr83.push((java.lang.Object)stackAr88);
    stackAr81.push((java.lang.Object)stackAr88);
    boolean b97 = stackAr81.isEmpty();
    stackAr54.push((java.lang.Object)b97);
    boolean b99 = stackAr23.equals((java.lang.Object)b97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[1]"+ "'", str46.equals("[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "[]"+ "'", str56.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "[]"+ "'", str60.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "[]"+ "'", str61.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj64 + "' != '" + 0+ "'", obj64.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "[]"+ "'", str68.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "[]"+ "'", str73.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "[10]"+ "'", str77.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "[]"+ "'", str85.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "[]"+ "'", str90.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "[10]"+ "'", str94.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test490"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    boolean b2 = stackAr0.isFull();
    boolean b4 = stackAr0.equals((java.lang.Object)10.0f);
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isEmpty();
    org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
    boolean b8 = stackAr7.isFull();
    java.lang.String str9 = stackAr7.toString();
    boolean b10 = stackAr7.isEmpty();
    boolean b11 = stackAr7.isEmpty();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isFull();
    java.lang.String str14 = stackAr12.toString();
    boolean b15 = stackAr12.isEmpty();
    stackAr12.push((java.lang.Object)10);
    java.lang.String str18 = stackAr12.toString();
    stackAr7.push((java.lang.Object)stackAr12);
    stackAr5.push((java.lang.Object)stackAr12);
    boolean b21 = stackAr0.equals((java.lang.Object)stackAr5);
    boolean b22 = stackAr0.isEmpty();
    java.lang.String str23 = stackAr0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]"+ "'", str9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[10]"+ "'", str18.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test491"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    stackAr0.push((java.lang.Object)10);
    java.lang.Object obj6 = stackAr0.top();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int)'4');
    boolean b9 = stackAr8.isFull();
    boolean b10 = stackAr0.equals((java.lang.Object)stackAr8);
    org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
    boolean b12 = stackAr11.isFull();
    java.lang.String str13 = stackAr11.toString();
    boolean b14 = stackAr11.isEmpty();
    stackAr11.push((java.lang.Object)10);
    java.lang.String str17 = stackAr11.toString();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    java.lang.String str20 = stackAr18.toString();
    java.lang.String str21 = stackAr18.toString();
    boolean b22 = stackAr18.isEmpty();
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    boolean b30 = stackAr23.isFull();
    stackAr18.push((java.lang.Object)stackAr23);
    boolean b32 = stackAr11.equals((java.lang.Object)stackAr18);
    int i33 = stackAr11.size();
    boolean b34 = stackAr8.equals((java.lang.Object)stackAr11);
    org.autotest.StackAr stackAr35 = new org.autotest.StackAr();
    boolean b36 = stackAr35.isEmpty();
    java.lang.String str37 = stackAr35.toString();
    java.lang.String str38 = stackAr35.toString();
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isFull();
    boolean b41 = stackAr35.equals((java.lang.Object)stackAr39);
    int i42 = stackAr39.size();
    int i43 = stackAr39.size();
    org.autotest.StackAr stackAr44 = new org.autotest.StackAr();
    boolean b45 = stackAr44.isFull();
    stackAr39.push((java.lang.Object)stackAr44);
    boolean b47 = stackAr11.equals((java.lang.Object)stackAr39);
    java.lang.String str48 = stackAr39.toString();
    org.autotest.StackAr stackAr49 = new org.autotest.StackAr();
    boolean b50 = stackAr49.isEmpty();
    java.lang.String str51 = stackAr49.toString();
    org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int)(byte)100);
    boolean b54 = stackAr49.equals((java.lang.Object)stackAr53);
    org.autotest.StackAr stackAr56 = new org.autotest.StackAr((int)(short)10);
    java.lang.String str57 = stackAr56.toString();
    stackAr49.push((java.lang.Object)str57);
    java.lang.Object obj59 = stackAr49.top();
    boolean b60 = stackAr49.isFull();
    stackAr39.push((java.lang.Object)b60);
    boolean b62 = stackAr39.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 10+ "'", obj6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[10]"+ "'", str17.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[]"+ "'", str37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "[[]]"+ "'", str48.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[]"+ "'", str51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[]"+ "'", str57.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj59 + "' != '" + "[]"+ "'", obj59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test492"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isEmpty();
    java.lang.String str6 = stackAr4.toString();
    java.lang.String str7 = stackAr4.toString();
    int i8 = stackAr4.size();
    boolean b9 = stackAr2.equals((java.lang.Object)stackAr4);
    stackAr0.push((java.lang.Object)stackAr4);
    int i11 = stackAr0.size();
    java.lang.Object obj12 = stackAr0.top();
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isFull();
    org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
    boolean b16 = stackAr15.isEmpty();
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    java.lang.String str19 = stackAr17.toString();
    java.lang.String str20 = stackAr17.toString();
    int i21 = stackAr17.size();
    boolean b22 = stackAr15.equals((java.lang.Object)stackAr17);
    stackAr13.push((java.lang.Object)stackAr17);
    stackAr0.push((java.lang.Object)stackAr13);
    int i25 = stackAr13.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]"+ "'", str20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test493"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    java.lang.Object obj3 = null;
    boolean b4 = stackAr0.equals(obj3);
    java.lang.String str5 = stackAr0.toString();
    boolean b7 = stackAr0.equals((java.lang.Object)"[[10]]");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = stackAr0.pop();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalStateException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test494"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    java.lang.String str2 = stackAr0.toString();
    java.lang.String str3 = stackAr0.toString();
    org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
    boolean b5 = stackAr4.isFull();
    java.lang.String str6 = stackAr4.toString();
    boolean b7 = stackAr4.isEmpty();
    boolean b8 = stackAr4.isEmpty();
    stackAr0.push((java.lang.Object)b8);
    boolean b10 = stackAr0.isFull();
    java.lang.String str11 = stackAr0.toString();
    org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
    boolean b13 = stackAr12.isFull();
    java.lang.String str14 = stackAr12.toString();
    boolean b15 = stackAr12.isEmpty();
    org.autotest.StackAr stackAr16 = new org.autotest.StackAr();
    boolean b17 = stackAr16.isEmpty();
    java.lang.String str18 = stackAr16.toString();
    java.lang.String str19 = stackAr16.toString();
    int i20 = stackAr16.size();
    stackAr12.push((java.lang.Object)i20);
    java.lang.Object obj22 = stackAr12.top();
    boolean b23 = stackAr0.equals((java.lang.Object)stackAr12);
    java.lang.Object obj24 = stackAr12.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]"+ "'", str3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[true]"+ "'", str11.equals("[true]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 0+ "'", obj22.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 0+ "'", obj24.equals(0));

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test495"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    int i2 = stackAr0.size();
    int i3 = stackAr0.size();
    java.lang.String str4 = stackAr0.toString();
    int i5 = stackAr0.size();
    boolean b6 = stackAr0.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test496"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b2 = stackAr0.equals((java.lang.Object)0);
    org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
    boolean b4 = stackAr3.isFull();
    java.lang.String str5 = stackAr3.toString();
    boolean b6 = stackAr3.isEmpty();
    boolean b7 = stackAr3.isEmpty();
    org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
    boolean b9 = stackAr8.isFull();
    java.lang.String str10 = stackAr8.toString();
    boolean b11 = stackAr8.isEmpty();
    stackAr8.push((java.lang.Object)10);
    java.lang.String str14 = stackAr8.toString();
    stackAr3.push((java.lang.Object)stackAr8);
    stackAr0.push((java.lang.Object)stackAr3);
    org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
    boolean b18 = stackAr17.isEmpty();
    org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
    boolean b20 = stackAr19.isFull();
    boolean b21 = stackAr19.isFull();
    boolean b22 = stackAr17.equals((java.lang.Object)b21);
    org.autotest.StackAr stackAr23 = new org.autotest.StackAr();
    boolean b24 = stackAr23.isEmpty();
    java.lang.String str25 = stackAr23.toString();
    java.lang.String str26 = stackAr23.toString();
    org.autotest.StackAr stackAr27 = new org.autotest.StackAr();
    boolean b28 = stackAr27.isFull();
    boolean b29 = stackAr23.equals((java.lang.Object)stackAr27);
    boolean b30 = stackAr17.equals((java.lang.Object)stackAr23);
    java.lang.String str31 = stackAr23.toString();
    stackAr0.push((java.lang.Object)stackAr23);
    org.autotest.StackAr stackAr33 = new org.autotest.StackAr();
    boolean b34 = stackAr33.isEmpty();
    org.autotest.StackAr stackAr35 = new org.autotest.StackAr();
    boolean b36 = stackAr35.isFull();
    boolean b37 = stackAr35.isFull();
    boolean b38 = stackAr33.equals((java.lang.Object)b37);
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isFull();
    java.lang.String str41 = stackAr39.toString();
    boolean b42 = stackAr39.isEmpty();
    org.autotest.StackAr stackAr43 = new org.autotest.StackAr();
    boolean b44 = stackAr43.isEmpty();
    java.lang.String str45 = stackAr43.toString();
    java.lang.String str46 = stackAr43.toString();
    int i47 = stackAr43.size();
    stackAr39.push((java.lang.Object)i47);
    java.lang.Object obj49 = stackAr39.top();
    stackAr33.push((java.lang.Object)stackAr39);
    org.autotest.StackAr stackAr51 = new org.autotest.StackAr();
    boolean b52 = stackAr51.isFull();
    java.lang.String str53 = stackAr51.toString();
    boolean b54 = stackAr51.isEmpty();
    boolean b55 = stackAr51.isEmpty();
    org.autotest.StackAr stackAr56 = new org.autotest.StackAr();
    boolean b57 = stackAr56.isFull();
    java.lang.String str58 = stackAr56.toString();
    boolean b59 = stackAr56.isEmpty();
    stackAr56.push((java.lang.Object)10);
    java.lang.String str62 = stackAr56.toString();
    stackAr51.push((java.lang.Object)stackAr56);
    boolean b64 = stackAr51.isEmpty();
    boolean b65 = stackAr39.equals((java.lang.Object)b64);
    int i66 = stackAr39.size();
    int i67 = stackAr39.size();
    boolean b68 = stackAr39.isFull();
    boolean b69 = stackAr23.equals((java.lang.Object)stackAr39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]"+ "'", str10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[10]"+ "'", str14.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[]"+ "'", str31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[]"+ "'", str41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[]"+ "'", str45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[]"+ "'", str46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 0+ "'", obj49.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[]"+ "'", str53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "[]"+ "'", str58.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "[10]"+ "'", str62.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test497"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isFull();
    java.lang.String str2 = stackAr0.toString();
    boolean b3 = stackAr0.isEmpty();
    boolean b4 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
    boolean b6 = stackAr5.isFull();
    java.lang.String str7 = stackAr5.toString();
    boolean b8 = stackAr5.isEmpty();
    stackAr5.push((java.lang.Object)10);
    java.lang.String str11 = stackAr5.toString();
    stackAr0.push((java.lang.Object)stackAr5);
    java.lang.String str13 = stackAr5.toString();
    org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
    boolean b15 = stackAr14.isFull();
    boolean b16 = stackAr14.isFull();
    java.lang.String str17 = stackAr14.toString();
    boolean b18 = stackAr14.isEmpty();
    stackAr5.push((java.lang.Object)stackAr14);
    boolean b20 = stackAr14.isEmpty();
    boolean b21 = stackAr14.isEmpty();
    org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
    boolean b23 = stackAr22.isFull();
    java.lang.String str24 = stackAr22.toString();
    boolean b25 = stackAr22.isFull();
    org.autotest.StackAr stackAr26 = new org.autotest.StackAr();
    boolean b27 = stackAr26.isEmpty();
    java.lang.String str28 = stackAr26.toString();
    org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int)(byte)100);
    boolean b31 = stackAr26.equals((java.lang.Object)stackAr30);
    org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
    boolean b33 = stackAr32.isFull();
    java.lang.String str34 = stackAr32.toString();
    boolean b35 = stackAr32.isEmpty();
    stackAr32.push((java.lang.Object)10);
    java.lang.String str38 = stackAr32.toString();
    org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
    boolean b40 = stackAr39.isEmpty();
    java.lang.String str41 = stackAr39.toString();
    java.lang.String str42 = stackAr39.toString();
    boolean b43 = stackAr39.isEmpty();
    org.autotest.StackAr stackAr44 = new org.autotest.StackAr();
    boolean b45 = stackAr44.isEmpty();
    java.lang.String str46 = stackAr44.toString();
    java.lang.String str47 = stackAr44.toString();
    org.autotest.StackAr stackAr48 = new org.autotest.StackAr();
    boolean b49 = stackAr48.isFull();
    boolean b50 = stackAr44.equals((java.lang.Object)stackAr48);
    boolean b51 = stackAr44.isFull();
    stackAr39.push((java.lang.Object)stackAr44);
    boolean b53 = stackAr32.equals((java.lang.Object)stackAr39);
    boolean b54 = stackAr26.equals((java.lang.Object)stackAr39);
    stackAr22.push((java.lang.Object)b54);
    org.autotest.StackAr stackAr56 = new org.autotest.StackAr();
    boolean b57 = stackAr56.isEmpty();
    java.lang.String str58 = stackAr56.toString();
    java.lang.String str59 = stackAr56.toString();
    stackAr56.push((java.lang.Object)(-1.0f));
    java.lang.String str62 = stackAr56.toString();
    boolean b63 = stackAr22.equals((java.lang.Object)stackAr56);
    boolean b64 = stackAr14.equals((java.lang.Object)stackAr56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]"+ "'", str7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10]"+ "'", str11.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[10]"+ "'", str13.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]"+ "'", str17.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]"+ "'", str28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[]"+ "'", str34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[10]"+ "'", str38.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[]"+ "'", str41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[]"+ "'", str42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[]"+ "'", str46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "[]"+ "'", str47.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "[]"+ "'", str58.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[]"+ "'", str59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "[-1.0]"+ "'", str62.equals("[-1.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test498"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int)(short)100);
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isFull();
    java.lang.String str4 = stackAr2.toString();
    boolean b5 = stackAr2.isEmpty();
    stackAr2.push((java.lang.Object)100.0d);
    java.lang.String str8 = stackAr2.toString();
    stackAr1.push((java.lang.Object)str8);
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
    boolean b11 = stackAr10.isEmpty();
    java.lang.String str12 = stackAr10.toString();
    java.lang.String str13 = stackAr10.toString();
    int i14 = stackAr10.size();
    int i15 = stackAr10.size();
    boolean b16 = stackAr10.isFull();
    boolean b17 = stackAr10.isFull();
    org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
    boolean b19 = stackAr18.isEmpty();
    org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
    boolean b21 = stackAr20.isFull();
    boolean b22 = stackAr20.isFull();
    boolean b23 = stackAr18.equals((java.lang.Object)b22);
    org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
    boolean b25 = stackAr24.isFull();
    java.lang.String str26 = stackAr24.toString();
    boolean b27 = stackAr24.isEmpty();
    org.autotest.StackAr stackAr28 = new org.autotest.StackAr();
    boolean b29 = stackAr28.isEmpty();
    java.lang.String str30 = stackAr28.toString();
    java.lang.String str31 = stackAr28.toString();
    int i32 = stackAr28.size();
    stackAr24.push((java.lang.Object)i32);
    java.lang.Object obj34 = stackAr24.top();
    stackAr18.push((java.lang.Object)stackAr24);
    org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
    boolean b37 = stackAr36.isFull();
    java.lang.String str38 = stackAr36.toString();
    boolean b39 = stackAr36.isEmpty();
    boolean b40 = stackAr36.isEmpty();
    org.autotest.StackAr stackAr41 = new org.autotest.StackAr();
    boolean b42 = stackAr41.isFull();
    java.lang.String str43 = stackAr41.toString();
    boolean b44 = stackAr41.isEmpty();
    stackAr41.push((java.lang.Object)10);
    java.lang.String str47 = stackAr41.toString();
    stackAr36.push((java.lang.Object)stackAr41);
    boolean b49 = stackAr36.isEmpty();
    boolean b50 = stackAr24.equals((java.lang.Object)b49);
    boolean b51 = stackAr24.isFull();
    boolean b52 = stackAr24.isEmpty();
    org.autotest.StackAr stackAr53 = new org.autotest.StackAr();
    boolean b54 = stackAr53.isFull();
    org.autotest.StackAr stackAr55 = new org.autotest.StackAr();
    boolean b56 = stackAr55.isEmpty();
    org.autotest.StackAr stackAr57 = new org.autotest.StackAr();
    boolean b58 = stackAr57.isEmpty();
    java.lang.String str59 = stackAr57.toString();
    java.lang.String str60 = stackAr57.toString();
    int i61 = stackAr57.size();
    boolean b62 = stackAr55.equals((java.lang.Object)stackAr57);
    stackAr53.push((java.lang.Object)stackAr57);
    int i64 = stackAr53.size();
    java.lang.Object obj65 = stackAr53.top();
    java.lang.String str66 = stackAr53.toString();
    boolean b67 = stackAr53.isFull();
    boolean b68 = stackAr24.equals((java.lang.Object)b67);
    java.lang.String str69 = stackAr24.toString();
    stackAr10.push((java.lang.Object)stackAr24);
    boolean b71 = stackAr1.equals((java.lang.Object)stackAr24);
    boolean b72 = stackAr24.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[100.0]"+ "'", str8.equals("[100.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]"+ "'", str26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]"+ "'", str30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[]"+ "'", str31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 0+ "'", obj34.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]"+ "'", str38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[]"+ "'", str43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "[10]"+ "'", str47.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[]"+ "'", str59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "[]"+ "'", str60.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[[]]"+ "'", str66.equals("[[]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "[0]"+ "'", str69.equals("[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test499"); }


    org.autotest.StackAr stackAr1 = new org.autotest.StackAr(3);
    boolean b2 = stackAr1.isEmpty();
    boolean b3 = stackAr1.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test500"); }


    org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
    boolean b1 = stackAr0.isEmpty();
    org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
    boolean b3 = stackAr2.isEmpty();
    java.lang.String str4 = stackAr2.toString();
    java.lang.String str5 = stackAr2.toString();
    int i6 = stackAr2.size();
    boolean b7 = stackAr0.equals((java.lang.Object)stackAr2);
    boolean b8 = stackAr2.isFull();
    org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int)'4');
    java.lang.String str11 = stackAr10.toString();
    boolean b12 = stackAr2.equals((java.lang.Object)str11);
    org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
    boolean b14 = stackAr13.isFull();
    java.lang.String str15 = stackAr13.toString();
    boolean b16 = stackAr13.isEmpty();
    stackAr13.push((java.lang.Object)10);
    boolean b19 = stackAr13.isFull();
    boolean b20 = stackAr13.isEmpty();
    stackAr2.push((java.lang.Object)stackAr13);
    java.lang.Object obj22 = stackAr13.top();
    int i23 = stackAr13.size();
    java.lang.String str24 = stackAr13.toString();
    java.lang.Object obj25 = stackAr13.top();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]"+ "'", str15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 10+ "'", obj22.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[10]"+ "'", str24.equals("[10]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10+ "'", obj25.equals(10));

  }

}
